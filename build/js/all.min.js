!function(){"use strict";angular.module("app",["ui.router","ngResource","ngMaterial"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",template:'<p class="lead">Welcome to the UI-Router Demo</p><p>Use the menu above to navigate. Pay attention to the <code>$state</code> and <code>$stateParams</code> values below.</p><p>Click these links—<a href="#/c?id=1">Alice</a> or <a href="#/user/42">Bob</a>—to see a url redirect in action.</p>'})}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){console.log(e.query())}angular.module("app").controller("Cofrades",e),e.$inject=["cofradesPrepService"]}(),function(){"use strict";function e(e){e.state("cofrades",{url:"/cofrades",templateProvider:["$templateCache",function(e){return e.get("cofrades/cofrades.html")}],controller:"Cofrades",controllerAs:"vm",resolve:{cofradesPrepService:t}})}function t(e){return e.getCofrades()}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["cofradesService"]}(),function(){"use strict";function e(e){function t(t){e(t).toggle()}var r=this;r.toggleSidenav=t}angular.module("app").controller("AppCtrl",e),e.$inject=["$mdSidenav"]}(),function(){"use strict";function e(){return function(t){var r=t instanceof Array;for(var o in t)null===t[o]?r?t.splice(o,1):delete t[o]:"object"==typeof t[o]&&e(t[o]);return t}}angular.module("app").filter("removeNulls",e)}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/cofrades/:id.json:json",null,{query:{method:"GET",isArray:!1},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("removeNulls")(e))}}})}function o(){return e("http://127.0.0.1:5050/api/cofradesBajas/:id.json:json",null,{query:{method:"GET",isArray:!1}})}return{getCofrades:r,getCofradesBajas:o}}angular.module("app").factory("cofradesService",e),e.$inject=["$resource","$filter"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAucm91dGVzLmpzIiwiYWxsLm1pbi5qcyIsImNvZnJhZGVzL2NvZnJhZGVzLmNvbnRyb2xsZXIuanMiLCJjb2ZyYWRlcy9jb2ZyYWRlcy5yb3V0ZXMuanMiLCJpbnRlcmZhei9hcHAuY29udHJvbGxlci5qcyIsImNvbW1vbnMvZmlsdGVycy9yZW1vdmVOdWxscy5maWx0ZXIuanMiLCJjb21tb25zL3NlcnZpY2VzL2NvZnJhZGVzLnNlcnZpY2UuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZSIsIiRpbmplY3QiLCJDb2ZyYWRlcyIsImNvZnJhZGVzUHJlcFNlcnZpY2UiLCJjb25zb2xlIiwibG9nIiwicXVlcnkiLCJjb250cm9sbGVyIiwidGVtcGxhdGVQcm92aWRlciIsIiR0ZW1wbGF0ZUNhY2hlIiwiZ2V0IiwiY29udHJvbGxlckFzIiwicmVzb2x2ZSIsImNvZnJhZGVzU2VydmljZSIsImdldENvZnJhZGVzIiwiQXBwQ3RybCIsIiRtZFNpZGVuYXYiLCJ0b2dnbGVTaWRlbmF2IiwibWVudUlkIiwidG9nZ2xlIiwidm0iLCJ0aGlzIiwicmVtb3ZlTnVsbHMiLCJvYmoiLCJpc0FycmF5IiwiQXJyYXkiLCJrIiwic3BsaWNlIiwiZmlsdGVyIiwiJHJlc291cmNlIiwiJGZpbHRlciIsIm1ldGhvZCIsInNhdmUiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZGF0YSIsImhlYWRlcnNHZXR0ZXIiLCJ0b0pzb24iLCJnZXRDb2ZyYWRlc0JhamFzIiwiZmFjdG9yeSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQUVBQSxTQUFBQyxPQUFBLE9BQ0EsWUFDQSxhQUNBLGtCQ05BLFdBQ0EsWUFNQSxTQUFBQyxHQUFBQyxFQUFBQyxHQUVBQSxFQUFBQyxVQUFBLEtBRUFGLEVBQ0FHLE1BQUEsUUFDQUMsSUFBQSxJQUNBQyxTQUFBLHNTQVhBUixRQUNBQyxPQUFBLE9BQ0FDLE9BQUFBLEdDMkJFQSxFQUFPTyxTQUFXLGlCQUFrQix5QkNoQ3RDLFdBQ0EsWUFNQSxTQUFBQyxHQUFBQyxHQUVBQyxRQUFBQyxJQUFBRixFQUFBRyxTQVBBZCxRQUNBQyxPQUFBLE9BQ0FjLFdBQUEsV0FBQUwsR0QwQ0VBLEVBQVNELFNBQVcsMEJFOUN0QixXQUNBLFlBTUEsU0FBQVAsR0FBQUMsR0FDQUEsRUFDQUcsTUFBQSxZQUNBQyxJQUFBLFlBQ0FTLGtCQUFBLGlCQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FBQUMsSUFBQSw0QkFFQUgsV0FBQSxXQUNBSSxhQUFBLEtBQ0FDLFNBQ0FULG9CQUFBQSxLQUtBLFFBQUFBLEdBQUFVLEdBQ0EsTUFBQUEsR0FBQUMsY0FwQkF0QixRQUNBQyxPQUFBLE9BQ0FDLE9BQUFBLEdGaUVFQSxFQUFPTyxTQUFXLGtCQUtsQkUsRUFBb0JGLFNBQVcsc0JHM0VqQyxXQUNBLFlBT0EsU0FBQWMsR0FBQUMsR0FJQSxRQUFBQyxHQUFBQyxHQUNBRixFQUFBRSxHQUFBQyxTQUpBLEdBQUFDLEdBQUFDLElBQ0FELEdBQUFILGNBQUFBLEVBUEF6QixRQUNBQyxPQUFBLE9BQ0FjLFdBQUEsVUFBQVEsR0h5RkVBLEVBQVFkLFNBQVcsaUJJOUZyQixXQUNBLFlBTUEsU0FBQXFCLEtBQ0EsTUFBQSxVQUFBQyxHQUNBLEdBQUFDLEdBQUFELFlBQUFFLE1BQ0EsS0FBQSxHQUFBQyxLQUFBSCxHQUNBLE9BQUFBLEVBQUFHLEdBQUFGLEVBQUFELEVBQUFJLE9BQUFELEVBQUEsU0FBQUgsR0FBQUcsR0FDQSxnQkFBQUgsR0FBQUcsSUFBQUosRUFBQUMsRUFBQUcsR0FFQSxPQUFBSCxJQVhBL0IsUUFDQUMsT0FBQSxPQUNBbUMsT0FBQSxjQUFBTixNQ0xBLFdBQ0EsWUFNQSxTQUFBVCxHQUFBZ0IsRUFBQUMsR0FNQSxRQUFBaEIsS0FDQSxNQUFBZSxHQUFBLG1EQUFBLE1BQ0F2QixPQUFBeUIsT0FBQSxNQUFBUCxTQUFBLEdBQ0FRLE1BQUFELE9BQUEsT0FBQUUsaUJBQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBM0MsU0FBQTRDLE9BQUFOLEVBQUEsZUFBQUksUUFNQSxRQUFBRyxLQUNBLE1BQUFSLEdBQUEsd0RBQUEsTUFBQXZCLE9BQUF5QixPQUFBLE1BQUFQLFNBQUEsS0FoQkEsT0FDQVYsWUFBQUEsRUFDQXVCLGlCQUFBQSxHQVBBN0MsUUFDQUMsT0FBQSxPQUNBNkMsUUFBQSxrQkFBQXpCLEdMNElFQSxFQUFnQlosU0FBVyxZQUFhIiwiZmlsZSI6ImFsbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdSZXNvdXJjZScsXHJcbiAgICAnbmdNYXRlcmlhbCdcclxuICBdKTtcclxuXHJcbiAgXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgZnVuY3Rpb24gY29uZmlnKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcclxuXHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAuc3RhdGUoXCJob21lXCIsIHtcclxuICAgICAgICB1cmw6IFwiL1wiLFxyXG4gICAgICAgIHRlbXBsYXRlOiAnPHAgY2xhc3M9XCJsZWFkXCI+V2VsY29tZSB0byB0aGUgVUktUm91dGVyIERlbW88L3A+JyArXHJcbiAgICAgICAgICAnPHA+VXNlIHRoZSBtZW51IGFib3ZlIHRvIG5hdmlnYXRlLiAnICtcclxuICAgICAgICAgICdQYXkgYXR0ZW50aW9uIHRvIHRoZSA8Y29kZT4kc3RhdGU8L2NvZGU+IGFuZCA8Y29kZT4kc3RhdGVQYXJhbXM8L2NvZGU+IHZhbHVlcyBiZWxvdy48L3A+JyArXHJcbiAgICAgICAgICAnPHA+Q2xpY2sgdGhlc2UgbGlua3PigJQ8YSBocmVmPVwiIy9jP2lkPTFcIj5BbGljZTwvYT4gb3IgJyArXHJcbiAgICAgICAgICAnPGEgaHJlZj1cIiMvdXNlci80MlwiPkJvYjwvYT7igJR0byBzZWUgYSB1cmwgcmVkaXJlY3QgaW4gYWN0aW9uLjwvcD4nXHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbn0pKCk7IixudWxsLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQ29mcmFkZXMnLCBDb2ZyYWRlcyk7XHJcblxyXG5cclxuICBmdW5jdGlvbiBDb2ZyYWRlcyhjb2ZyYWRlc1ByZXBTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgY29uc29sZS5sb2coY29mcmFkZXNQcmVwU2VydmljZS5xdWVyeSgpKTtcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmZpZygkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdjb2ZyYWRlcycsIHtcclxuICAgICAgICB1cmw6IFwiL2NvZnJhZGVzXCIsXHJcbiAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpeyAgXHJcbiAgICAgICAgICByZXR1cm4gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdjb2ZyYWRlcy9jb2ZyYWRlcy5odG1sJyk7IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0NvZnJhZGVzJyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBjb2ZyYWRlc1ByZXBTZXJ2aWNlOiBjb2ZyYWRlc1ByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvZnJhZGVzUHJlcFNlcnZpY2UoY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gY29mcmFkZXNTZXJ2aWNlLmdldENvZnJhZGVzKCk7XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQXBwQ3RybCcsIEFwcEN0cmwpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gQXBwQ3RybCgkbWRTaWRlbmF2KSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgdm0udG9nZ2xlU2lkZW5hdiA9IHRvZ2dsZVNpZGVuYXY7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHRvZ2dsZVNpZGVuYXYobWVudUlkKSB7XHJcbiAgICAgICRtZFNpZGVuYXYobWVudUlkKS50b2dnbGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmlsdGVyKCdyZW1vdmVOdWxscycsIHJlbW92ZU51bGxzKTtcclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlTnVsbHMoKXtcclxuICAgIHJldHVybiBmdW5jdGlvbihvYmope1xyXG4gICAgICB2YXIgaXNBcnJheSA9IG9iaiBpbnN0YW5jZW9mIEFycmF5O1xyXG4gICAgICBmb3IgKHZhciBrIGluIG9iail7XHJcbiAgICAgICAgaWYgKG9ialtrXT09PW51bGwpIGlzQXJyYXkgPyBvYmouc3BsaWNlKGssMSkgOiBkZWxldGUgb2JqW2tdO1xyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvYmpba109PVwib2JqZWN0XCIpIHJlbW92ZU51bGxzKG9ialtrXSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG9iajtcclxuICAgIH07XHJcbiAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5mYWN0b3J5KCdjb2ZyYWRlc1NlcnZpY2UnLCBjb2ZyYWRlc1NlcnZpY2UpO1xyXG5cclxuICBmdW5jdGlvbiBjb2ZyYWRlc1NlcnZpY2UoJHJlc291cmNlLCAkZmlsdGVyKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBnZXRDb2ZyYWRlczogZ2V0Q29mcmFkZXMsXHJcbiAgICAgIGdldENvZnJhZGVzQmFqYXM6IGdldENvZnJhZGVzQmFqYXNcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29mcmFkZXMoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvY29mcmFkZXMvOmlkLmpzb246anNvbicsIG51bGwsIHtcclxuICAgICAgICAncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTpmYWxzZX0sXHJcbiAgICAgICAgJ3NhdmUnOiAgIHttZXRob2Q6J1BPU1QnLCB0cmFuc2Zvcm1SZXF1ZXN0OiBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLnRvSnNvbigkZmlsdGVyKCdyZW1vdmVOdWxscycpKGRhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29mcmFkZXNCYWphcygpIHtcclxuICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovLzEyNy4wLjAuMTo1MDUwL2FwaS9jb2ZyYWRlc0JhamFzLzppZC5qc29uOmpzb24nLCBudWxsLCB7J3F1ZXJ5JzogIHttZXRob2Q6J0dFVCcsIGlzQXJyYXk6ZmFsc2V9fSk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcblxyXG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==