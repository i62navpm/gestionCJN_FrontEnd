!function(){"use strict";angular.module("app",["ui.router","ngResource","ngMaterial"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",template:'<p class="lead">Welcome to the UI-Router Demo</p><p>Use the menu above to navigate. Pay attention to the <code>$state</code> and <code>$stateParams</code> values below.</p><p>Click these links—<a href="#/c?id=1">Alice</a> or <a href="#/user/42">Bob</a>—to see a url redirect in action.</p>'})}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){}angular.module("app").config(e),e.$inject=["$mdThemingProvider"]}(),function(){"use strict";function e(e){e.state("cofrades",{url:"/cofrades",templateProvider:["$templateCache",function(e){return e.get("cofrades/list/cofrades.html")}],controller:"Cofrades",controllerAs:"vm",resolve:{cofradesPrepService:t}}).state("cofradesDetalle",{url:"/cofrades/:cofradeId",templateProvider:["$templateCache",function(e){return e.get("cofrades/detail/cofradeDetalle.html")}],controller:"CofradeDetalle",controllerAs:"vm",resolve:{getCofradePrepService:r}})}function t(e){return e.cofradesRest().query()}function r(e,t){return e.cofradesRest().get({id:t.cofradeId})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["cofradesService"],r.$inject=["cofradesService","$stateParams"]}(),function(){"use strict";function e(e,t){function r(t){e(t).toggle()}function o(e){t.go(e)}var n=this;n.toggleSidenav=r,n.navigateTo=o}angular.module("app").controller("AppCtrl",e),e.$inject=["$mdSidenav","$state"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){r.nextPage=e.next,r.cofrades=e.results})}var r=this;r.cofrades=null,r.nextPage=null,t()}angular.module("app").controller("Cofrades",e),e.$inject=["cofradesPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){console.log(e)})}t()}angular.module("app").controller("CofradeDetalle",e),e.$inject=["getCofradePrepService"]}(),function(){"use strict";function e(){return{restrict:"A",link:function(e,t,r){var o=t[0];t.bind("scroll",function(){o.scrollTop+o.offsetHeight>=o.scrollHeight-5&&e.$emit("scrollDown")})}}}angular.module("app").directive("scrolly",e)}(),function(){"use strict";function e(){return function(t){var r=t instanceof Array;for(var o in t)null===t[o]?r?t.splice(o,1):delete t[o]:"object"==typeof t[o]&&e(t[o]);return t}}angular.module("app").filter("removeNulls",e)}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/cofrades/:id.json:json",null,{query:{method:"GET",isArray:!1},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("removeNulls")(e))}}})}function o(){return e("http://127.0.0.1:5050/api/cofradesBajas/:id.json:json",null,{query:{method:"GET",isArray:!1}})}return{cofradesRest:r,cofradesBajasRest:o}}angular.module("app").factory("cofradesService",e),e.$inject=["$resource","$filter"]}(),function(){"use strict";function e(e,t,r){function o(){if(i.nextPage){var e={page:i.nextPage};i.buscar&&(e[i.filtro]=i.buscar),r.cofradesRest().query(e,function(e){i.nextPage=e.next,i.cofrades=i.cofrades.concat(e.results)})}}function n(){var e={};e[i.filtro]=i.buscar,r.cofradesRest().query(e,function(e){i.nextPage=e.next,i.cofrades=e.results})}function a(){i.buscar=null,i.typeInput="nombre"===i.filtro?"text":"number"}function c(e,r){t.go("cofradesDetalle",{cofradeId:e})}var i=this;i.filtro="nombre",i.typeInput="text",i.buscar=null,i.busqueda=n,i.radioChange=a,i.goToCofrade=c,e.$on("scrollDown",o)}angular.module("app").controller("ListaCofrades",e),e.$inject=["$rootScope","$state","cofradesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/cofrades.directive.html",scope:{cofrades:"=cofrades",nextPage:"=page"},controller:"ListaCofrades",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaCofrades",e)}();
//# sourceMappingURL=data:application/json;base64,