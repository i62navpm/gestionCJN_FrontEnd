!function(){"use strict";angular.module("app",["ui.router","ngResource","ngMaterial"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",template:'<p class="lead">Welcome to the UI-Router Demo</p><p>Use the menu above to navigate. Pay attention to the <code>$state</code> and <code>$stateParams</code> values below.</p><p>Click these links—<a href="#/c?id=1">Alice</a> or <a href="#/user/42">Bob</a>—to see a url redirect in action.</p>'})}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){}angular.module("app").config(e),e.$inject=["$mdThemingProvider"]}(),function(){"use strict";function e(e,t,r){function n(){return t.$promise.then(function(t){u.nextPage=t.next,u.cofrades=t.results,e.$on("scrollDown",o)})}function o(){if(u.nextPage){var e={page:u.nextPage};u.buscar&&(e[u.filtro]=u.buscar),r.cofradesRest().query(e,function(e){u.nextPage=e.next,u.cofrades=u.cofrades.concat(e.results)})}}function a(){var e={};e[u.filtro]=u.buscar,r.cofradesRest().query(e,function(e){console.log(e.next),u.nextPage=e.next,u.cofrades=e.results})}function c(){u.buscar=null,u.typeInput="nombre"===u.filtro?"text":"number"}var u=this;u.filtro="nombre",u.typeInput="text",u.buscar=null,u.nextPage=null,u.busqueda=a,u.radioChange=c,n()}angular.module("app").controller("Cofrades",e),e.$inject=["$rootScope","cofradesPrepService","cofradesService"]}(),function(){"use strict";function e(e){e.state("cofrades",{url:"/cofrades",templateProvider:["$templateCache",function(e){return e.get("cofrades/cofrades.html")}],controller:"Cofrades",controllerAs:"vm",resolve:{cofradesPrepService:t}})}function t(e){return e.cofradesRest().query()}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["cofradesService"]}(),function(){"use strict";function e(e,t){function r(t){e(t).toggle()}function n(e){t.go(e)}var o=this;o.toggleSidenav=r,o.navigateTo=n}angular.module("app").controller("AppCtrl",e),e.$inject=["$mdSidenav","$state"]}(),function(){"use strict";function e(){return{restrict:"A",link:function(e,t,r){var n=t[0];t.bind("scroll",function(){n.scrollTop+n.offsetHeight>=n.scrollHeight&&e.$emit("scrollDown")})}}}angular.module("app").directive("scrolly",e)}(),function(){"use strict";function e(){return function(t){var r=t instanceof Array;for(var n in t)null===t[n]?r?t.splice(n,1):delete t[n]:"object"==typeof t[n]&&e(t[n]);return t}}angular.module("app").filter("removeNulls",e)}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/cofrades/:id.json:json",null,{query:{method:"GET",isArray:!1},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("removeNulls")(e))}}})}function n(){return e("http://127.0.0.1:5050/api/cofradesBajas/:id.json:json",null,{query:{method:"GET",isArray:!1}})}return{cofradesRest:r,cofradesBajasRest:n}}angular.module("app").factory("cofradesService",e),e.$inject=["$resource","$filter"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAucm91dGVzLmpzIiwiYWxsLm1pbi5qcyIsImFwcC50aGVtZS5qcyIsImNvZnJhZGVzL2NvZnJhZGVzLmNvbnRyb2xsZXIuanMiLCJjb2ZyYWRlcy9jb2ZyYWRlcy5yb3V0ZXMuanMiLCJpbnRlcmZhei9hcHAuY29udHJvbGxlci5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9zY3JvbGx5LmRpcmVjdGl2ZS5qcyIsImNvbW1vbnMvZmlsdGVycy9yZW1vdmVOdWxscy5maWx0ZXIuanMiLCJjb21tb25zL3NlcnZpY2VzL2NvZnJhZGVzLnNlcnZpY2UuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZSIsIiRpbmplY3QiLCJ0aGVtZUFuZ3VsYXJNYXRlcmlhbCIsIiRtZFRoZW1pbmdQcm92aWRlciIsIkNvZnJhZGVzIiwiJHJvb3RTY29wZSIsImNvZnJhZGVzUHJlcFNlcnZpY2UiLCJjb2ZyYWRlc1NlcnZpY2UiLCJhY3RpdmF0ZSIsIiRwcm9taXNlIiwidGhlbiIsImRhdGEiLCJ2bSIsIm5leHRQYWdlIiwibmV4dCIsImNvZnJhZGVzIiwicmVzdWx0cyIsIiRvbiIsImdldE5leHRQYWdlIiwicGFyYW1ldGVycyIsInBhZ2UiLCJidXNjYXIiLCJmaWx0cm8iLCJjb2ZyYWRlc1Jlc3QiLCJxdWVyeSIsImNvbmNhdCIsImJ1c3F1ZWRhIiwiY29uc29sZSIsImxvZyIsInJhZGlvQ2hhbmdlIiwidHlwZUlucHV0IiwidGhpcyIsImNvbnRyb2xsZXIiLCJ0ZW1wbGF0ZVByb3ZpZGVyIiwiJHRlbXBsYXRlQ2FjaGUiLCJnZXQiLCJjb250cm9sbGVyQXMiLCJyZXNvbHZlIiwiQXBwQ3RybCIsIiRtZFNpZGVuYXYiLCIkc3RhdGUiLCJ0b2dnbGVTaWRlbmF2IiwibWVudUlkIiwidG9nZ2xlIiwibmF2aWdhdGVUbyIsInRvIiwiZ28iLCJzY3JvbGx5IiwicmVzdHJpY3QiLCJsaW5rIiwiZWxlbWVudCIsImF0dHJzIiwicmF3IiwiYmluZCIsInNjcm9sbFRvcCIsIm9mZnNldEhlaWdodCIsInNjcm9sbEhlaWdodCIsIiRlbWl0IiwiZGlyZWN0aXZlIiwicmVtb3ZlTnVsbHMiLCJvYmoiLCJpc0FycmF5IiwiQXJyYXkiLCJrIiwic3BsaWNlIiwiZmlsdGVyIiwiJHJlc291cmNlIiwiJGZpbHRlciIsIm1ldGhvZCIsInNhdmUiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaGVhZGVyc0dldHRlciIsInRvSnNvbiIsImNvZnJhZGVzQmFqYXNSZXN0IiwiZmFjdG9yeSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQUVBQSxTQUFBQyxPQUFBLE9BQ0EsWUFDQSxhQUNBLGtCQ05BLFdBQ0EsWUFNQSxTQUFBQyxHQUFBQyxFQUFBQyxHQUVBQSxFQUFBQyxVQUFBLEtBRUFGLEVBQ0FHLE1BQUEsUUFDQUMsSUFBQSxJQUNBQyxTQUFBLHNTQVhBUixRQUNBQyxPQUFBLE9BQ0FDLE9BQUFBLEdDMEJFQSxFQUFPTyxTQUFXLGlCQUFrQix5QkMvQnRDLFdBQ0EsWUFNQSxTQUFBQyxHQUFBQyxJQUpBWCxRQUNBQyxPQUFBLE9BQ0FDLE9BQUFRLEdEdUNFQSxFQUFxQkQsU0FBVyx5QkU1Q2xDLFdBQ0EsWUFNQSxTQUFBRyxHQUFBQyxFQUFBQyxFQUFBQyxHQVdBLFFBQUFDLEtBQ0EsTUFBQUYsR0FBQUcsU0FBQUMsS0FBQSxTQUFBQyxHQUNBQyxFQUFBQyxTQUFBRixFQUFBRyxLQUNBRixFQUFBRyxTQUFBSixFQUFBSyxRQUNBWCxFQUFBWSxJQUFBLGFBQUFDLEtBS0EsUUFBQUEsS0FDQSxHQUFBTixFQUFBQyxTQUFBLENBQ0EsR0FBQU0sSUFBQUMsS0FBQVIsRUFBQUMsU0FFQUQsR0FBQVMsU0FDQUYsRUFBQVAsRUFBQVUsUUFBQVYsRUFBQVMsUUFFQWQsRUFBQWdCLGVBQUFDLE1BQUFMLEVBQUEsU0FBQVIsR0FD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IHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICduZ1Jlc291cmNlJyxcclxuICAgICduZ01hdGVyaWFsJ1xyXG4gIF0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbmZpZyhjb25maWcpO1xyXG5cclxuICBmdW5jdGlvbiBjb25maWcoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG5cclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvXCIpO1xyXG5cclxuICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgIC5zdGF0ZShcImhvbWVcIiwge1xyXG4gICAgICAgIHVybDogXCIvXCIsXHJcbiAgICAgICAgdGVtcGxhdGU6ICc8cCBjbGFzcz1cImxlYWRcIj5XZWxjb21lIHRvIHRoZSBVSS1Sb3V0ZXIgRGVtbzwvcD4nICtcclxuICAgICAgICAgICc8cD5Vc2UgdGhlIG1lbnUgYWJvdmUgdG8gbmF2aWdhdGUuICcgK1xyXG4gICAgICAgICAgJ1BheSBhdHRlbnRpb24gdG8gdGhlIDxjb2RlPiRzdGF0ZTwvY29kZT4gYW5kIDxjb2RlPiRzdGF0ZVBhcmFtczwvY29kZT4gdmFsdWVzIGJlbG93LjwvcD4nICtcclxuICAgICAgICAgICc8cD5DbGljayB0aGVzZSBsaW5rc+KAlDxhIGhyZWY9XCIjL2M/aWQ9MVwiPkFsaWNlPC9hPiBvciAnICtcclxuICAgICAgICAgICc8YSBocmVmPVwiIy91c2VyLzQyXCI+Qm9iPC9hPuKAlHRvIHNlZSBhIHVybCByZWRpcmVjdCBpbiBhY3Rpb24uPC9wPidcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxufSkoKTsiLG51bGwsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKHRoZW1lQW5ndWxhck1hdGVyaWFsKTtcclxuXHJcbiAgZnVuY3Rpb24gdGhlbWVBbmd1bGFyTWF0ZXJpYWwoJG1kVGhlbWluZ1Byb3ZpZGVyKXtcclxuICAgIFxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0NvZnJhZGVzJywgQ29mcmFkZXMpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gQ29mcmFkZXMoJHJvb3RTY29wZSwgY29mcmFkZXNQcmVwU2VydmljZSwgY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5maWx0cm8gICA9ICdub21icmUnO1xyXG4gICAgdm0udHlwZUlucHV0ICAgPSAndGV4dCc7XHJcbiAgICB2bS5idXNjYXIgICA9IG51bGw7XHJcbiAgICB2bS5uZXh0UGFnZSA9IG51bGw7XHJcbiAgICB2bS5idXNxdWVkYSAgICA9IGJ1c3F1ZWRhO1xyXG4gICAgdm0ucmFkaW9DaGFuZ2UgPSByYWRpb0NoYW5nZTtcclxuICAgIGFjdGl2YXRlKCk7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICByZXR1cm4gY29mcmFkZXNQcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIHZtLm5leHRQYWdlID0gZGF0YS5uZXh0O1xyXG4gICAgICAgIHZtLmNvZnJhZGVzID0gZGF0YS5yZXN1bHRzO1xyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCdzY3JvbGxEb3duJywgZ2V0TmV4dFBhZ2UpO1xyXG4gICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXROZXh0UGFnZSgpIHtcclxuICAgICAgaWYgKHZtLm5leHRQYWdlKXtcclxuICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHtwYWdlOiB2bS5uZXh0UGFnZX07XHJcblxyXG4gICAgICAgIGlmICh2bS5idXNjYXIpXHJcbiAgICAgICAgICBwYXJhbWV0ZXJzW3ZtLmZpbHRyb10gPSB2bS5idXNjYXI7XHJcblxyXG4gICAgICAgIGNvZnJhZGVzU2VydmljZS5jb2ZyYWRlc1Jlc3QoKS5xdWVyeShwYXJhbWV0ZXJzLCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIHZtLm5leHRQYWdlID0gZGF0YS5uZXh0O1xyXG4gICAgICAgICAgdm0uY29mcmFkZXMgPSB2bS5jb2ZyYWRlcy5jb25jYXQoZGF0YS5yZXN1bHRzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJ1c3F1ZWRhKCkge1xyXG4gICAgICB2YXIgZmlsdHJvID0ge307XHJcbiAgICAgIGZpbHRyb1t2bS5maWx0cm9dID0gdm0uYnVzY2FyO1xyXG4gICAgICBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNSZXN0KCkucXVlcnkoZmlsdHJvLCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhLm5leHQpXHJcbiAgICAgICAgdm0ubmV4dFBhZ2UgPSBkYXRhLm5leHQ7XHJcbiAgICAgICAgdm0uY29mcmFkZXMgPSBkYXRhLnJlc3VsdHM7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJhZGlvQ2hhbmdlKCkge1xyXG4gICAgICB2bS5idXNjYXIgPSBudWxsO1xyXG4gICAgICB2bS50eXBlSW5wdXQgPSAodm0uZmlsdHJvID09PSAnbm9tYnJlJykgPyAndGV4dCc6ICdudW1iZXInO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmZpZygkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdjb2ZyYWRlcycsIHtcclxuICAgICAgICB1cmw6IFwiL2NvZnJhZGVzXCIsXHJcbiAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpeyAgXHJcbiAgICAgICAgICByZXR1cm4gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdjb2ZyYWRlcy9jb2ZyYWRlcy5odG1sJyk7IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0NvZnJhZGVzJyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBjb2ZyYWRlc1ByZXBTZXJ2aWNlOiBjb2ZyYWRlc1ByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvZnJhZGVzUHJlcFNlcnZpY2UoY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gY29mcmFkZXNTZXJ2aWNlLmNvZnJhZGVzUmVzdCgpLnF1ZXJ5KCk7XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQXBwQ3RybCcsIEFwcEN0cmwpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gQXBwQ3RybCgkbWRTaWRlbmF2LCAkc3RhdGUpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICB2bS50b2dnbGVTaWRlbmF2ID0gdG9nZ2xlU2lkZW5hdjtcclxuICAgIHZtLm5hdmlnYXRlVG8gICAgPSBuYXZpZ2F0ZVRvO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB0b2dnbGVTaWRlbmF2KG1lbnVJZCkge1xyXG4gICAgICAkbWRTaWRlbmF2KG1lbnVJZCkudG9nZ2xlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbmF2aWdhdGVUbyh0byl7XHJcbiAgICAgICRzdGF0ZS5nbyh0byk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgnc2Nyb2xseScsIHNjcm9sbHkpO1xyXG5cclxuICBmdW5jdGlvbiBzY3JvbGx5KCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgbGluazogZnVuY3Rpb24gKCRyb290U2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgdmFyIHJhdyA9IGVsZW1lbnRbMF07XHJcbiAgICAgICAgZWxlbWVudC5iaW5kKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBpZiAocmF3LnNjcm9sbFRvcCArIHJhdy5vZmZzZXRIZWlnaHQgPj0gcmF3LnNjcm9sbEhlaWdodCkge1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwic2Nyb2xsRG93blwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZpbHRlcigncmVtb3ZlTnVsbHMnLCByZW1vdmVOdWxscyk7XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZU51bGxzKCl7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKXtcclxuICAgICAgdmFyIGlzQXJyYXkgPSBvYmogaW5zdGFuY2VvZiBBcnJheTtcclxuICAgICAgZm9yICh2YXIgayBpbiBvYmope1xyXG4gICAgICAgIGlmIChvYmpba109PT1udWxsKSBpc0FycmF5ID8gb2JqLnNwbGljZShrLDEpIDogZGVsZXRlIG9ialtrXTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb2JqW2tdPT1cIm9iamVjdFwiKSByZW1vdmVOdWxscyhvYmpba10pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgnY29mcmFkZXNTZXJ2aWNlJywgY29mcmFkZXNTZXJ2aWNlKTtcclxuXHJcbiAgZnVuY3Rpb24gY29mcmFkZXNTZXJ2aWNlKCRyZXNvdXJjZSwgJGZpbHRlcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY29mcmFkZXNSZXN0OiBjb2ZyYWRlc1Jlc3QsXHJcbiAgICAgIGNvZnJhZGVzQmFqYXNSZXN0OiBjb2ZyYWRlc0JhamFzUmVzdFxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb2ZyYWRlc1Jlc3QoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvY29mcmFkZXMvOmlkLmpzb246anNvbicsIG51bGwsIHtcclxuICAgICAgICAncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTpmYWxzZX0sXHJcbiAgICAgICAgJ3NhdmUnOiAgIHttZXRob2Q6J1BPU1QnLCB0cmFuc2Zvcm1SZXF1ZXN0OiBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLnRvSnNvbigkZmlsdGVyKCdyZW1vdmVOdWxscycpKGRhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29mcmFkZXNCYWphc1Jlc3QoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvY29mcmFkZXNCYWphcy86aWQuanNvbjpqc29uJywgbnVsbCwgeydxdWVyeSc6ICB7bWV0aG9kOidHRVQnLCBpc0FycmF5OmZhbHNlfX0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG5cclxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=