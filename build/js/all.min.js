!function(){"use strict";function e(e){e.defaults.xsrfCookieName="csrftoken",e.defaults.xsrfHeaderName="X-CSRFToken"}angular.module("app",["ui.router","ngResource","ngMaterial","uiGmapgoogle-maps","ngMessages"]).config(e),e.$inject=["$httpProvider"]}(),function(){"use strict";function e(e){e.interceptors.push("myHttpInterceptor")}function t(e,t){var o=angular.element(document.querySelector(".m-app-loading"));return{request:function(e){return"POST"===e.method&&o.css("display","block"),e},requestError:function(t){return e.reject(t)},response:function(e){return o.css("display","none"),e},responseError:function(r){return 401===r.status&&t.get("$state").go("login"),o.css("display","none"),e.reject(r)}}}angular.module("app").factory("myHttpInterceptor",t).config(e),e.$inject=["$httpProvider"],t.$inject=["$q","$injector"]}(),function(){"use strict";function e(e){e.configure({libraries:"weather,geometry,visualization"})}angular.module("app").config(e),e.$inject=["uiGmapGoogleMapApiProvider"]}(),function(){"use strict";function e(e){e.months=["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],e.shortMonths=["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],e.days=["lunes","martes","miércoles","jueves","viernes","sábado","domingo"],e.shortDays=["lun","mar","mié","jue","vie","sáb","dom"],e.firstDayOfWeek=1,e.parseDate=function(e){return new Date(e)},e.formatDate=function(e){return new Date(e).toLocaleDateString()}}angular.module("app").config(e),e.$inject=["$mdDateLocaleProvider"]}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",templateProvider:["$templateCache",function(e){return e.get("interfaz/home.html")}]})}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){}angular.module("app").config(e),e.$inject=["$mdThemingProvider"]}(),function(){"use strict";function e(e){e.state("aspirantes",{url:"/aspirantes",templateProvider:["$templateCache",function(e){return e.get("aspirantes/list/aspirantes.html")}],controller:"Aspirantes",controllerAs:"vm",resolve:{aspirantesPrepService:t}}).state("aspirantesDetalle",{url:"/aspirantes/:aspiranteId",templateProvider:["$templateCache",function(e){return e.get("aspirantes/detail/aspiranteDetalle.html")}],controller:"AspiranteDetalle",controllerAs:"vm",resolve:{getAspirantePrepService:o}}).state("aspirantesCambios",{url:"/aspirantes/cambios/:aspiranteId",templateProvider:["$templateCache",function(e){return e.get("aspirantes/addModify/aspiranteAddModify.html")}],controller:"AspiranteAddModify",controllerAs:"vm",resolve:{getAspirantePrepService:o}})}function t(e){return e.aspirantesRest().query()}function o(e,t){return t.aspiranteId?e.aspirantesRest().get({id:t.aspiranteId}):!1}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["aspirantesService"],o.$inject=["aspirantesService","$stateParams"]}(),function(){"use strict";function e(e){e.state("autoridades",{url:"/autoridades",templateProvider:["$templateCache",function(e){return e.get("autoridades/list/autoridades.html")}],controller:"Autoridades",controllerAs:"vm",resolve:{autoridadesPrepService:t}}).state("autoridadesDetalle",{url:"/autoridades/:autoridadId",templateProvider:["$templateCache",function(e){return e.get("autoridades/detail/autoridadDetalle.html")}],controller:"AutoridadDetalle",controllerAs:"vm",resolve:{getAutoridadPrepService:o,getMapsPrepService:r}}).state("autoridadesCambios",{url:"/autoridades/cambios/:autoridadId",templateProvider:["$templateCache",function(e){return e.get("autoridades/addModify/autoridadAddModify.html")}],controller:"AutoridadAddModify",controllerAs:"vm",resolve:{getAutoridadPrepService:o}})}function t(e){return e.autoridadesRest().query()}function o(e,t){return t.autoridadId?e.autoridadesRest().get({id:t.autoridadId}):!1}function r(e,t,o){return t.$promise.then(function(t){var r=t.direccion.calle+" "+t.direccion.numero+" "+t.direccion.municipio+" "+t.direccion.provincia+" "+t.direccion.cp;return o.geoCodingAPI(r).then(function(t){if(t.data.results.length){var o=t.data.results[0].geometry.location;return e.then(function(e){return{coord:{latitude:o.lat,longitude:o.lng},marker:{latitude:o.lat,longitude:o.lng},zoom:17}})}})})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["autoridadesService"],o.$inject=["autoridadesService","$stateParams"],r.$inject=["uiGmapGoogleMapApi","getAutoridadPrepService","mapasService"]}(),function(){"use strict";function e(e){e.state("cofrades",{url:"/cofrades",templateProvider:["$templateCache",function(e){return e.get("cofrades/list/cofrades.html")}],controller:"Cofrades",controllerAs:"vm",resolve:{cofradesPrepService:t,cofradesBajasPrepService:o}}).state("cofradesDetalle",{url:"/cofrades/:cofradeId",templateProvider:["$templateCache",function(e){return e.get("cofrades/detail/cofradeDetalle.html")}],controller:"CofradeDetalle",controllerAs:"vm",resolve:{getCofradePrepService:r,getMapsPrepService:a,numerosLoteriaPrepService:n}}).state("cofradesCambios",{url:"/cofrades/cambios/:cofradeId",templateProvider:["$templateCache",function(e){return e.get("cofrades/addModify/cofradeAddModify.html")}],controller:"CofradeAddModify",controllerAs:"vm",resolve:{getCofradePrepService:r,numerosLoteriaPrepService:n}})}function t(e){return e.cofradesRest().query()}function o(e){return e.cofradesBajasRest().query()}function r(e,t){return t.cofradeId?e.cofradesRest().get({id:t.cofradeId}):!1}function n(e){return e.numerosLoteriaRest().query()}function a(e,t,o){return t.$promise.then(function(t){var r=t.datosPersonales.direccion.calle+" "+t.datosPersonales.direccion.numero+" "+t.datosPersonales.direccion.municipio+" "+t.datosPersonales.direccion.provincia+" "+t.datosPersonales.direccion.cp;return o.geoCodingAPI(r).then(function(t){if(t.data.results.length){var o=t.data.results[0].geometry.location;return e.then(function(e){return{coord:{latitude:o.lat,longitude:o.lng},marker:{latitude:o.lat,longitude:o.lng},zoom:17}})}})})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["cofradesService"],o.$inject=["cofradesService"],r.$inject=["cofradesService","$stateParams"],n.$inject=["numerosLoteriaService"],a.$inject=["uiGmapGoogleMapApi","getCofradePrepService","mapasService"]}(),function(){"use strict";function e(e){e.state("costaleros",{url:"/costaleros",templateProvider:["$templateCache",function(e){return e.get("costaleros/list/costaleros.html")}],controller:"Costaleros",controllerAs:"vm",resolve:{costalerosPrepService:t}}).state("costalerosDetalle",{url:"/costaleros/:costaleroId",templateProvider:["$templateCache",function(e){return e.get("costaleros/detail/costaleroDetalle.html")}],controller:"CostaleroDetalle",controllerAs:"vm",resolve:{getCostaleroPrepService:o}}).state("costalerosCambios",{url:"/costaleros/cambios/:costaleroId",templateProvider:["$templateCache",function(e){return e.get("costaleros/addModify/costaleroAddModify.html")}],controller:"CostaleroAddModify",controllerAs:"vm",resolve:{getCostaleroPrepService:o}})}function t(e){return e.costalerosRest().query()}function o(e,t){return t.costaleroId?e.costalerosRest().get({id:t.costaleroId}):!1}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["costalerosService"],o.$inject=["costalerosService","$stateParams"]}(),function(){"use strict";function e(e){e.state("directivos",{url:"/directivos",templateProvider:["$templateCache",function(e){return e.get("directivos/list/directivos.html")}],controller:"Directivos",controllerAs:"vm",resolve:{directivosPrepService:t}}).state("directivosDetalle",{url:"/directivos/:directivoId",templateProvider:["$templateCache",function(e){return e.get("directivos/detail/directivoDetalle.html")}],controller:"DirectivoDetalle",controllerAs:"vm",resolve:{getDirectivoPrepService:o}}).state("directivosCambios",{url:"/directivos/cambios/:directivoId",templateProvider:["$templateCache",function(e){return e.get("directivos/addModify/directivoAddModify.html")}],controller:"DirectivoAddModify",controllerAs:"vm",resolve:{getDirectivoPrepService:o}})}function t(e){return e.directivosRest().query()}function o(e,t){return t.directivoId?e.directivosRest().get({id:t.directivoId}):!1}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["directivosService"],o.$inject=["directivosService","$stateParams"]}(),function(){"use strict";function e(e){e.state("gastosBancarios",{url:"/gastosBancarios",templateProvider:["$templateCache",function(e){return e.get("gastosBancarios/modify/gastoBancarioModify.html")}],controller:"GastosBancarios",controllerAs:"vm",resolve:{gastosBancariosPrepService:t}})}function t(e){return e.gastosBancariosRest().query()}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["gastosBancariosService"]}(),function(){"use strict";function e(e,t){function o(t){e(t).toggle()}function r(t){e(t).close()}function n(e,o){r(o),t.go(e)}var a=this;a.toggleSidenav=o,a.closeSidenav=r,a.navigateTo=n}angular.module("app").controller("AppCtrl",e),e.$inject=["$mdSidenav","$state"]}(),function(){"use strict";function e(e,t,o,r,n){function a(){t({method:"POST",url:"/login/",data:o({csrfmiddlewaretoken:loginForm.csrfmiddlewaretoken.value,username:loginForm.username.value,password:loginForm.password.value,next:loginForm.next.value}),headers:{"Content-Type":"application/x-www-form-urlencoded"}}).success(function(t){"Login"===t&&n.go("home");var o=angular.element(document.querySelector("md-content[ui-view]"));o[0].innerHTML=t,r(o.contents())(e)})}var i=this;i.processForm=a}angular.module("app").controller("Login",e),e.$inject=["$scope","$http","$httpParamSerializer","$compile","$state"]}(),function(){"use strict";function e(e){e.state("login",{url:"/login",templateProvider:["$http","$location",function(e,t){return e.get("http://127.0.0.1:"+t.port()+"/login").then(function(e){return e.data})}],controller:"Login",controllerAs:"vm"})}angular.module("app").config(e),e.$inject=["$stateProvider"]}(),function(){"use strict";function e(e){e.state("numerosLoteria",{url:"/numerosLoteria",templateProvider:["$templateCache",function(e){return e.get("numerosLoteria/modify/numerosLoteriaModify.html")}],controller:"NumerosLoteria",controllerAs:"vm",resolve:{numerosLoteriaPrepService:t}})}function t(e){return e.numerosLoteriaRest().query()}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["numerosLoteriaService"]}(),function(){"use strict";function e(e){e.state("papeletasSitios",{url:"/papeletasSitios",templateProvider:["$templateCache",function(e){return e.get("papeletasSitios/list/papeletasSitios.html")}],controller:"PapeletasSitios",controllerAs:"vm",resolve:{papeletasSitiosPrepService:t}}).state("papeletasSitiosCambios",{url:"/papeletasSitios/cambios",templateProvider:["$templateCache",function(e){return e.get("papeletasSitios/addModify/papeletaSitioAddModify.html")}],controller:"PapeletaSitioAddModify",controllerAs:"vm"})}function t(e){return e.papeletasSitiosRest().query({anios:!0})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["papeletasSitiosService"]}(),function(){"use strict";function e(e){e.state("sectores",{url:"/sectores",templateProvider:["$templateCache",function(e){return e.get("sectores/list/sectores.html")}],controller:"Sectores",controllerAs:"vm",resolve:{sectoresPrepService:t}}).state("sectoresCambios",{url:"/sectores/cambios/:sectorId/:calle",templateProvider:["$templateCache",function(e){return e.get("sectores/addModify/sectorAddModify.html")}],controller:"SectorAddModify",controllerAs:"vm",resolve:{getSectorPrepService:o}})}function t(e){return e.sectoresRest().query()}function o(e,t){return t.sectorId?e.sectoresRest().get({id:t.sectorId}):!1}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["sectoresService"],o.$inject=["sectoresService","$stateParams"]}(),function(){"use strict";function e(e,t,o,r,n,a,i){function c(){n?n.$promise.then(s):l()}function s(e){return h.aspirante=e,!0}function l(){h.newCofrade=!0,h.aspirante={cofrade:null,fecha:(new Date).toLocaleDateString()}}function u(){window.history.back()}function d(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),i.cofradesRest().query(t).$promise.then(function(e){return e.results})}function f(e){h.aspirante.cofrade=e?e.id:null}function p(t){t?h.aspirante.cofrade?(h.aspirante.cofrade=h.aspirante.cofrade.id?h.aspirante.cofrade.id:h.aspirante.cofrade,a.aspirantesRest().save(h.aspirante,m,v)):(e.aspiranteForm.cofrade.$error.required=!0,g()):g()}function m(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),r.go("aspirantes")}function v(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.newCofrade=!1,h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,c()}angular.module("app").controller("AspiranteAddModify",e),e.$inject=["$scope","$document","$mdToast","$state","getAspirantePrepService","aspirantesService","cofradesService"]}(),function(){"use strict";function e(e,t){function o(){return t.$promise.then(function(e){n.aspirante=e})}function r(t,o){e.go("aspirantesCambios",{aspiranteId:t})}var n=this;n.modifyAspirante=r,o()}angular.module("app").controller("AspiranteDetalle",e),e.$inject=["$state","getAspirantePrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){o.aspirantes=e})}var o=this;o.aspirantes=null,t()}angular.module("app").controller("Aspirantes",e),e.$inject=["aspirantesPrepService"]}(),function(){"use strict";function e(e,t,o,r,n,a,i){function c(){n?n.$promise.then(s):l()}function s(e){return h.autoridad=e,h.calleSelected={calle:h.autoridad.direccion.calle,cp:h.autoridad.direccion.cp,provincia:h.autoridad.direccion.provincia,municipio:h.autoridad.direccion.municipio},!0}function l(){h.newCofrade=!0,h.autoridad={direccion:{}}}function u(){window.history.back()}function d(e){return i.getCalles(e).then(function(e){return e.data})}function f(e){e?(h.autoridad.direccion.calle=e.calle,h.autoridad.direccion.municipio=e.municipio,h.autoridad.direccion.cp=e.cp,h.autoridad.direccion.provincia=e.provincia):(h.autoridad.direccion.calle=null,h.autoridad.direccion.municipio=null,h.autoridad.direccion.cp=null,h.autoridad.direccion.provincia=null)}function p(e){e?(h.autoridad.direccion.calle=h.autoridad.direccion.calle?h.autoridad.direccion.calle:h.searchText,a.autoridadesRest().save(h.autoridad,m,v)):g()}function m(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),r.go("autoridades")}function v(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.newCofrade=!1,h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,c()}angular.module("app").controller("AutoridadAddModify",e),e.$inject=["$scope","$document","$mdToast","$state","getAutoridadPrepService","autoridadesService","cofradesService"]}(),function(){"use strict";function e(e,t,o){function r(){return t.$promise.then(function(e){a.autoridad=e,a.maps=o})}function n(t,o){e.go("autoridadesCambios",{autoridadId:t})}var a=this;a.modifyAutoridad=n,r()}angular.module("app").controller("AutoridadDetalle",e),e.$inject=["$state","getAutoridadPrepService","getMapsPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){o.autoridades=e})}var o=this;o.autoridades=null,t()}angular.module("app").controller("Autoridades",e),e.$inject=["autoridadesPrepService"]}(),function(){"use strict";function e(e,t,o,r,n,a,i,c){function s(){i.$promise.then(function(e){P.numerosLoteria=e[0]}),n?n.$promise.then(l):a.getRegistros().then(function(e){P.cofrade.numeroOrden=e.data.numeroOrden,P.cofrade.numeroCofrade=e.data.numeroCofrade})}function l(e){return P.cofrade=e,P.calleSelected={calle:P.cofrade.datosPersonales.direccion.calle,cp:P.cofrade.datosPersonales.direccion.cp,provincia:P.cofrade.datosPersonales.direccion.provincia,municipio:P.cofrade.datosPersonales.direccion.municipio},P.fechaNacimiento=P.cofrade.datosPersonales.fechaNacimiento,P.fechaInscripcion=P.cofrade.datosPersonales.fechaInscripcion,P.cofrade.datosFinancieros=P.cofrade.datosFinancieros||{cuenta:{},deuda:[]},P.cofrade.datosFinancieros.cuenta=P.cofrade.datosFinancieros.cuenta||{},P.cofrade.datosFinancieros.deuda=P.cofrade.datosFinancieros.deuda||[],!0}function u(){window.history.back()}function d(e){return a.getCalles(e).then(function(e){return e.data})}function f(e){e?(P.cofrade.datosPersonales.direccion.calle=e.calle,P.cofrade.datosPersonales.direccion.municipio=e.municipio,P.cofrade.datosPersonales.direccion.cp=e.cp,P.cofrade.datosPersonales.direccion.provincia=e.provincia,p(e.calle)):(P.cofrade.datosPersonales.direccion.calle=null,P.cofrade.datosPersonales.direccion.municipio=null,P.cofrade.datosPersonales.direccion.cp=null,P.cofrade.datosPersonales.direccion.provincia=null,P.sector=null,P.nuevaCalle=!0)}function p(e){c.sectoresRest().query({calle:e},function(e){P.sector=e[0].numeroSector,P.nuevaCalle=!1})}function m(){P.cofrade.datosFinancieros.cuenta.iban&&(P.cofrade.datosFinancieros.cuenta.cc=e("calcularCC")(P.cofrade.datosFinancieros.cuenta.iban))}function v(){P.cofrade.datosFinancieros.cuenta.cc&&(P.cofrade.datosFinancieros.cuenta.iban=e("calcularIban")(P.cofrade.datosFinancieros.cuenta.cc))}function g(e){function r(){s.save(P.cofrade,h,$)}function n(){c.sectoresRest().get({sector:P.sector},function(e){var n=e[0];n?(n.cofrade=n.cofrade.id,n.calles.push(P.searchText),n.$save(null,r,$)):o.show(o.simple().content("El sector "+P.sector+" no existe!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))})}if(e){var i={cuenta:{},deuda:[]};P.cofrade.datosPersonales.direccion.calle=P.searchText,JSON.stringify(P.cofrade.datosFinancieros)===JSON.stringify(i)&&delete P.cofrade.datosFinancieros;var s=a.cofradesRest();P.nuevaCalle?n():r()}else S()}function h(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),r.go("cofrades")}function $(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function S(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var P=this;P.nuevaCalle=!0,P.searchText="calle",P.cofrade={datosFinancieros:{cuenta:{},deuda:[]},datosPersonales:{direccion:{},sexo:"Hombre",fechaInscripcion:(new Date).toLocaleDateString(),fechaNacimiento:(new Date).toLocaleDateString()}},P.backState=u,P.querySearch=d,P.selectedItemChange=f,P.calcularCC=m,P.calcularIban=v,P.guardar=g,s()}angular.module("app").controller("CofradeAddModify",e),e.$inject=["$filter","$document","$mdToast","$state","getCofradePrepService","cofradesService","numerosLoteriaPrepService","sectoresService"]}(),function(){"use strict";function e(e,t,o,r,n){function a(){return n.$promise.then(function(e){c.numerosLoteria=e[0]}),o.$promise.then(function(e){c.cofrade=e,c.cofrade.datosFinancieros&&c.cofrade.datosFinancieros.cuenta&&(c.iban=t("parseIban")(c.cofrade.datosFinancieros.cuenta.iban),c.cc=t("parseCC")(c.cofrade.datosFinancieros.cuenta.cc)),c.maps=r})}function i(t,o){e.go("cofradesCambios",{cofradeId:t})}var c=this;c.cofrade=null,c.maps=null,c.modifyCofrade=i,a()}angular.module("app").controller("CofradeDetalle",e),e.$inject=["$state","$filter","getCofradePrepService","getMapsPrepService","numerosLoteriaPrepService"]}(),function(){"use strict";function e(e,t){function o(){return e.$promise.then(function(e){r.nextPage=e.next,r.cofrades=e.results}),t.$promise.then(function(e){r.nextPageBajas=e.next,r.cofradesBajas=e.results})}var r=this;r.cofrades=null,r.nextPage=null,r.cofradesBajas=null,r.nextPageBajas=null,r.selectedTab=0,o()}angular.module("app").controller("Cofrades",e),e.$inject=["cofradesPrepService","cofradesBajasPrepService"]}(),function(){"use strict";function e(){return function(e){e.$last&&e.$eval("vm.completed = true;")}}angular.module("app").directive("loadRepeat",e)}(),function(){"use strict";function e(){return{restrict:"A",link:function(e,t,o){var r=t[0];t.bind("scroll",function(){r.scrollTop+r.offsetHeight>=r.scrollHeight-5&&e.$emit("scrollDown")})}}}angular.module("app").directive("scrolly",e)}(),function(){"use strict";function e(){return function(e){e=e||"";for(var t="",o=0;o<e.length;o++)o>0&&o%4===0&&(t+=" "),t+=e[o];return t}}function t(){return function(e){e=e||"";var t="";return t=e.substr(0,4)+"-",t+=e.substr(4,4)+"-",t+=e.substr(8,2)+"-",t+=e.substr(10,10)}}function o(){return function(e){return e=e||"",e.substr(4,20)}}function r(){function e(e){for(var t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",o=[],r=0;r<e.length;r++){var n=t.indexOf(e[r]);o.push(0>n?"-":n)}return o.join("")}function t(e,t){for(var o=10,r=e.length,n=0,a=0;r>a;a+=o){var i=n+""+e.substr(a,o);n=i%t}return n}function o(e,t){for(e+="";e.length<t;)e="0"+e;return e}return function(r){var n="ES",a=r+e(n)+"00",i=t(a,97);return n+o(98-i,2)+r}}angular.module("app").filter("parseIban",e).filter("parseCC",t).filter("calcularIban",r).filter("calcularCC",o)}(),function(){"use strict";function e(){return function(e){return e.datosPersonales&&(e.datosPersonales.fechaNacimiento=new Date(e.datosPersonales.fechaNacimiento).toLocaleDateString(),e.datosPersonales.fechaInscripcion=new Date(e.datosPersonales.fechaInscripcion).toLocaleDateString()),e.fecha&&(e.fecha=new Date(e.fecha).toLocaleDateString()),e}}function t(){return function(e){var t=null;return e.datosPersonales?(t=e.datosPersonales.fechaNacimiento.split("/"),e.datosPersonales.fechaNacimiento=t[2]+"-"+t[1]+"-"+t[0],t=e.datosPersonales.fechaInscripcion.split("/"),e.datosPersonales.fechaInscripcion=t[2]+"-"+t[1]+"-"+t[0]):e.fecha?(t=e.fecha.split("/"),e.fecha=t[2]+"-"+t[1]+"-"+t[0]):e=new Date(e).toLocaleDateString(),e}}angular.module("app").filter("stringToDateFormat",e).filter("formatDates",t)}(),function(){"use strict";function e(){return function(t){var o=t instanceof Array;for(var r in t)null===t[r]?o?t.splice(r,1):delete t[r]:"object"==typeof t[r]&&e(t[r]);return t}}angular.module("app").filter("removeNulls",e)}(),function(){"use strict";function e(e,t,o){function r(){return e("http://127.0.0.1:"+t.port()+"/api/aspirantes/:id.json:json",null,{query:{method:"GET",isArray:!0},get:{method:"GET",transformResponse:function(e,t){return o("stringToDateFormat")(angular.fromJson(e))}},save:{method:"POST",transformRequest:function(e,t){return angular.toJson(o("formatDates")(o("removeNulls")(e)))}}})}return{aspirantesRest:r}}angular.module("app").factory("aspirantesService",e),e.$inject=["$resource","$location","$filter"]}(),function(){"use strict";function e(e,t,o){function r(){return e("http://127.0.0.1:"+t.port()+"/api/autoridades/:id.json:json",null,{query:{method:"GET",isArray:!0},save:{method:"POST",transformRequest:function(e,t){return angular.toJson(o("removeNulls")(e))}}})}return{autoridadesRest:r}}angular.module("app").factory("autoridadesService",e),e.$inject=["$resource","$location","$filter"]}(),function(){"use strict";function e(e,t,o,r){function n(){return e("http://127.0.0.1:"+t.port()+"/api/cofrades/:id.json:json",null,{query:{method:"GET",isArray:!1},get:{method:"GET",transformResponse:function(e,t){return r("stringToDateFormat")(angular.fromJson(e))}},save:{method:"POST",transformRequest:function(e,t){return angular.toJson(r("formatDates")(r("removeNulls")(e)))}}})}function a(){return e("http://127.0.0.1:"+t.port()+"/api/cofradesBajas/:id.json:json",null,{query:{method:"GET",isArray:!1}})}function i(e){return o.get("http://127.0.0.1:"+t.port()+"/api/calles/",{params:{calle:e}}).then(function(e){return angular.fromJson(e)})}function c(){return o.get("http://127.0.0.1:"+t.port()+"/api/registros/").then(function(e){return angular.fromJson(e)})}return{cofradesRest:n,cofradesBajasRest:a,getCalles:i,getRegistros:c}}angular.module("app").factory("cofradesService",e),e.$inject=["$resource","$location","$http","$filter"]}(),function(){"use strict";function e(e,t,o){function r(){return e("http://127.0.0.1:"+t.port()+"/api/costaleros/:id.json:json",null,{query:{method:"GET",isArray:!0},get:{method:"GET",transformResponse:function(e,t){return o("stringToDateFormat")(angular.fromJson(e))}},save:{method:"POST",transformRequest:function(e,t){return angular.toJson(o("formatDates")(o("removeNulls")(e)))}}})}return{costalerosRest:r}}angular.module("app").factory("costalerosService",e),e.$inject=["$resource","$location","$filter"]}(),function(){"use strict";function e(e,t,o){function r(){return e("http://127.0.0.1:"+t.port()+"/api/directivos/:id.json:json",null,{query:{method:"GET",isArray:!0},save:{method:"POST",transformRequest:function(e,t){return angular.toJson(o("removeNulls")(e))}}})}return{directivosRest:r}}angular.module("app").factory("directivosService",e),e.$inject=["$resource","$location","$filter"]}(),function(){"use strict";function e(e,t){function o(){return e("http://127.0.0.1:"+t.port()+"/api/gastosBancarios/:id.json:json")}return{gastosBancariosRest:o}}angular.module("app").factory("gastosBancariosService",e),e.$inject=["$resource","$location"]}(),function(){"use strict";function e(e){function t(t){return e.get("https://maps.googleapis.com/maps/api/geocode/json",{params:{address:t,key:"AIzaSyDC_OIDSl6curjCMCLyzn2yhMmg-er5knI"}}).then(function(e){return e})}return{geoCodingAPI:t}}angular.module("app").factory("mapasService",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,t){function o(){return e("http://127.0.0.1:"+t.port()+"/api/numerosLoteria/:id.json:json")}return{numerosLoteriaRest:o}}angular.module("app").factory("numerosLoteriaService",e),e.$inject=["$resource","$location"]}(),function(){"use strict";function e(e,t,o){function r(){return e("http://127.0.0.1:"+t.port()+"/api/papeletasSitios/:id.json:json",null,{query:{method:"GET",isArray:!0},save:{method:"POST",transformRequest:function(e,t){return angular.toJson(o("removeNulls")(e))}}})}return{papeletasSitiosRest:r}}angular.module("app").factory("papeletasSitiosService",e),e.$inject=["$resource","$location","$filter"]}(),function(){"use strict";function e(e,t){function o(){return e("http://127.0.0.1:"+t.port()+"/api/sectores/:id.json:json",null,{get:{method:"GET",isArray:!0}})}return{sectoresRest:o}}angular.module("app").factory("sectoresService",e),e.$inject=["$resource","$location"]}(),function(){"use strict";function e(e,t,o,r,n,a,i,c){function s(){a&&a.$promise.then(l)}function l(e){return h.costalero=e,h.cofradeSelected=h.costalero.cofrade,!0}function u(){window.history.back()}function d(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),c.cofradesRest().query(t).$promise.then(function(e){return e.results})}function f(e){h.costalero.cofrade=e?e.id:null}function p(t){t?(h.costalero.fecha=""===h.costalero.fecha?null:h.costalero.fecha,h.costalero.cofrade?i.costalerosRest().save(h.costalero,m,v):(e.costaleroForm.cofrade.$error.required=!0,g())):g()}function m(e){r.show(r.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),n.go("costaleros")}function v(e){r.show(r.simple().content("Error al guardar!!").position("top right").parent(o[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){r.show(r.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(o[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,s()}angular.module("app").controller("CostaleroAddModify",e),e.$inject=["$scope","$filter","$document","$mdToast","$state","getCostaleroPrepService","costalerosService","cofradesService"]}(),function(){"use strict";function e(e,t){function o(){return t.$promise.then(function(e){n.costalero=e})}function r(t,o){e.go("costalerosCambios",{costaleroId:t})}var n=this;n.modifyCostalero=r,o()}angular.module("app").controller("CostaleroDetalle",e),e.$inject=["$state","getCostaleroPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){o.costaleros=e})}var o=this;o.costaleros=null,t()}angular.module("app").controller("Costaleros",e),e.$inject=["costalerosPrepService"]}(),function(){"use strict";function e(e,t,o,r,n,a,i){function c(){n?n.$promise.then(s):l()}function s(e){return h.directivo=e,!0}function l(){h.newCofrade=!0,h.directivo={cofrade:null,fecha:(new Date).toLocaleDateString()}}function u(){window.history.back()}function d(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),i.cofradesRest().query(t).$promise.then(function(e){return e.results})}function f(e){h.directivo.cofrade=e?e.id:null}function p(t){t?h.directivo.cofrade?(h.directivo.cofrade=h.directivo.cofrade.id?h.directivo.cofrade.id:h.directivo.cofrade,a.directivosRest().save(h.directivo,m,v)):(e.directivoForm.cofrade.$error.required=!0,g()):g()}function m(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),r.go("directivos")}function v(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.newCofrade=!1,h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,c()}angular.module("app").controller("DirectivoAddModify",e),e.$inject=["$scope","$document","$mdToast","$state","getDirectivoPrepService","directivosService","cofradesService"]}(),function(){"use strict";function e(e,t){function o(){return t.$promise.then(function(e){n.directivo=e})}function r(t,o){e.go("directivosCambios",{directivoId:t})}var n=this;n.modifyDirectivo=r,o()}angular.module("app").controller("DirectivoDetalle",e),e.$inject=["$state","getDirectivoPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){o.directivos=e})}var o=this;o.directivos=null,t()}angular.module("app").controller("Directivos",e),e.$inject=["directivosPrepService"]}(),function(){"use strict";function e(e,t,o,r,n,a){function i(){n.$promise.then(c)}function c(e){return f.gastoBancario=e[0],!0}function s(e){e?a.gastosBancariosRest().save(f.gastoBancario,l,u):d()}function l(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),r.go("gastosBancarios")}function u(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function d(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var f=this;f.newCofrade=!1,f.guardar=s,i()}angular.module("app").controller("GastosBancarios",e),e.$inject=["$scope","$document","$mdToast","$state","gastosBancariosPrepService","gastosBancariosService"]}(),function(){"use strict";function e(e,t,o,r,n,a){function i(){n.$promise.then(c)}function c(e){return f.numerosLoteria=e[0],!0}function s(e){e?a.numerosLoteriaRest().save(f.numerosLoteria,l,u):d()}function l(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),r.go("numerosLoteria")}function u(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3));
}function d(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var f=this;f.newCofrade=!1,f.guardar=s,i()}angular.module("app").controller("NumerosLoteria",e),e.$inject=["$scope","$document","$mdToast","$state","numerosLoteriaPrepService","numerosLoteriaService"]}(),function(){"use strict";function e(e,t,o,r,n,a,i){function c(){v.newCofrade=!0,v.fecha=(new Date).toLocaleDateString(),v.papeletaSitio={cofrade:null}}function s(){window.history.back()}function l(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),i.cofradesRest().query(t).$promise.then(function(e){return e.results})}function u(e){v.papeletaSitio.cofrade=e?e.id:null}function d(o){o?v.papeletaSitio.cofrade?(v.papeletaSitio.fecha=v.fecha,t("formatDates")(v.papeletaSitio),a.papeletasSitiosRest().save({anio:new Date(v.papeletaSitio.fecha).getFullYear(),papeletas:[v.papeletaSitio]},f,p)):(e.papeletaSitioForm.cofrade.$error.required=!0,m()):m()}function f(e){r.show(r.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),n.go("papeletasSitios")}function p(e){r.show(r.simple().content("Error al guardar!!").position("top right").parent(o[0].querySelector("#toastBounds")).hideDelay(3e3))}function m(){r.show(r.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(o[0].querySelector("#toastBounds")).position("top right"))}var v=this;v.newCofrade=!1,v.backState=s,v.querySearch=l,v.selectedItemChange=u,v.guardar=d,c()}angular.module("app").controller("PapeletaSitioAddModify",e),e.$inject=["$scope","$filter","$document","$mdToast","$state","papeletasSitiosService","cofradesService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){o.papeletasSitios=e})}var o=this;o.papeletasSitios=null,t()}angular.module("app").controller("PapeletasSitios",e),e.$inject=["papeletasSitiosPrepService"]}(),function(){"use strict";function e(e,t,o,r,n,a,i,c,s){function l(){i?i.$promise.then(u):d()}function u(e){return C.sector=e[0],C.cofradeSelected=C.sector.cofrade,C.originSector=C.sector.numeroSector,"new"===a.calle?(C.newCalle=!0,C.indexCalle=C.sector.calles.length):C.indexCalle=C.sector.calles.indexOf(a.calle)>-1?C.sector.calles.indexOf(a.calle):null,!0}function d(){C.newEncargado=!0,C.sector={cofrade:null}}function f(){window.history.back()}function p(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),s.cofradesRest().query(t).$promise.then(function(e){return e.results})}function m(e){C.sector.cofrade=e?e.id:null}function v(t){t?C.sector.cofrade?C.sector.numeroSector===C.originSector||C.newEncargado?g():h():(e.sectorForm.cofrade.$error.required=!0,P()):P()}function g(){c.sectoresRest().save(C.sector,$,S)}function h(){c.sectoresRest().get({sector:C.sector.numeroSector}).$promise.then(function(e){return e[0]?(e[0].cofrade=e[0].cofrade.id,e[0].calles.push(C.sector.calles[C.indexCalle]),void e[0].$save(null,function(){C.sector.calles.splice(C.indexCalle,1),C.sector.numeroSector=C.originSector,g()},S)):void r.show(r.simple().content("No existe ese sector").position("top right").parent(o[0].querySelector("#toastBounds")).hideDelay(3e3))})}function $(e){r.show(r.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),n.go("sectores")}function S(e){r.show(r.simple().content("Error al guardar!!").position("top right").parent(o[0].querySelector("#toastBounds")).hideDelay(3e3))}function P(){r.show(r.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(o[0].querySelector("#toastBounds")).position("top right"))}var C=this;C.newEncargado=!1,C.newCalle=!1,C.indexCalle=null,C.backState=f,C.querySearch=p,C.selectedItemChange=m,C.guardar=v,l()}angular.module("app").controller("SectorAddModify",e),e.$inject=["$scope","$filter","$document","$mdToast","$state","$stateParams","getSectorPrepService","sectoresService","cofradesService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){o.sectores=e})}var o=this;o.sectores=null,t()}angular.module("app").controller("Sectores",e),e.$inject=["sectoresPrepService"]}(),function(){"use strict";function e(e){function t(t,o){e.go("aspirantesDetalle",{aspiranteId:t})}function o(t,o){o.stopPropagation(),e.go("aspirantesCambios",{aspiranteId:t})}var r=this;r.modifyAspirante=o,r.goToAspirante=t}angular.module("app").controller("ListaAspirantes",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/aspirantes/list/aspirantes.directive.html",scope:{aspirantes:"=aspirantes"},link:function(e,t){e.$watch("vm.aspirantes",function(t){t&&(e.vm.aspirantesShort=e.vm.aspirantes.map(function(e){var t={id:e.id,fecha:e.fecha};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaAspirantes",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaAspirantes",e)}(),function(){"use strict";function e(e,t,o){function r(e,o){o.stopPropagation();var r=t.confirm().title("Eliminar aspirante").content("¿Está seguro que desea eliminar este aspirante?<br>Perderá su antiguedad.").ariaLabel("Eliminar aspirante").targetEvent(o).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(r).then(function(){n(e)})}function n(t){var r=o.aspirantesRest().get({id:t},function(){r.$delete({id:t}).then(function(){"aspirantes"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("aspirantes")})})}var a=this;a.removeAspirante=r}angular.module("app").controller("RemoveAspirante",e),e.$inject=["$state","$mdDialog","aspirantesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/aspirantes/remove/removeAspirante.directive.html",scope:{aspiranteId:"=aspirante"},controller:"RemoveAspirante",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeAspirante",e)}(),function(){"use strict";function e(e){function t(t,o){e.go("autoridadesDetalle",{autoridadId:t})}function o(t,o){o.stopPropagation(),e.go("autoridadesCambios",{autoridadId:t})}var r=this;r.modifyAutoridad=o,r.goToAutoridad=t}angular.module("app").controller("ListaAutoridades",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/autoridades/list/autoridades.directive.html",scope:{autoridades:"=autoridades"},controller:"ListaAutoridades",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaAutoridades",e)}(),function(){"use strict";function e(e,t,o){function r(e,o){o.stopPropagation();var r=t.confirm().title("Eliminar autoridad").content("¿Está seguro que desea eliminar este autoridad?").ariaLabel("Eliminar autoridad").targetEvent(o).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(r).then(function(){n(e)})}function n(t){var r=o.autoridadesRest().get({id:t},function(){r.$delete({id:t}).then(function(){"autoridades"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("autoridades")})})}var a=this;a.removeAutoridad=r}angular.module("app").controller("RemoveAutoridad",e),e.$inject=["$state","$mdDialog","autoridadesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/autoridades/remove/removeAutoridad.directive.html",scope:{autoridadId:"=autoridad"},controller:"RemoveAutoridad",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeAutoridad",e)}(),function(){"use strict";function e(e,t,o,r){function n(){p.bajas?i():a()}function a(){if(p.nextPage){var e={page:p.nextPage};p.buscar&&(e[p.filtro]=p.buscar),r.cofradesRest().query(e,function(e){p.nextPage=e.next,p.cofrades=p.cofrades.concat(e.results)})}}function i(){if(p.nextPageBajas){var e={page:p.nextPageBajas};p.buscar&&(e[p.filtro]=p.buscar),r.cofradesBajasRest().query(e,function(e){p.nextPageBajas=e.next,p.cofradesBajas=p.cofradesBajas.concat(e.results)})}}function c(){p.filtro=isNaN(p.buscar)?"nombre":"numeroOrden",p.bajas?l():s()}function s(){var e={};e[p.filtro]=p.buscar,r.cofradesRest().query(e,function(e){p.nextPage=e.next,p.cofrades=e.results})}function l(){var e={};e[p.filtro]=p.buscar,r.cofradesBajasRest().query(e,function(e){p.nextPageBajas=e.next,p.cofradesBajas=e.results})}function u(e,t){o.go("cofradesDetalle",{cofradeId:e})}function d(e,t){t.stopPropagation(),o.go("cofradesCambios",{cofradeId:e})}function f(){p.search()}var p=this;p.filtro="nombre",p.buscar=null,p.search=c,p.goToCofrade=u,p.modifyCofrade=d,p.changeTab=f;var m=e.$on("scrollDown",n);t.$on("$destroy",function(){m(),m=null})}angular.module("app").controller("ListaCofrades",e),e.$inject=["$rootScope","$scope","$state","cofradesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/list/cofrades.directive.html",scope:{cofrades:"=cofrades",nextPage:"=page",cofradesBajas:"=cofradesBajas",nextPageBajas:"=pageBajas"},controller:"ListaCofrades",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaCofrades",e)}(),function(){"use strict";function e(e,t){function o(e,o){o.stopPropagation(),t.show({templateUrl:"./templates/directives/cofrades/remove/dialogTmpl/removeCofrade.tmpl.html",locals:{id:e},controller:"RemoveCofradeTmpl",controllerAs:"vm",bindToController:!0,targetEvent:o,clickOutsideToClose:!0}).then(function(){})}var r=this;r.removeCofrade=o}angular.module("app").controller("RemoveCofrade",e),e.$inject=["$state","$mdDialog"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/remove/removeCofrade.directive.html",scope:{cofradeId:"=cofrade"},controller:"RemoveCofrade",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeCofrade",e)}(),function(){"use strict";function e(e,t,o){function r(e,o){o.stopPropagation();var r=t.confirm().title("Restaurar cofrade").content("¿Está seguro que desea restaurar este cofrade?<br>Su número de Cofrade se calculará de nuevo.").ariaLabel("Restaurar cofrade").targetEvent(o).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(r).then(function(){n(e)})}function n(t){var r=o.cofradesRest().get({id:t},function(){r.baja=null,r.$save({updateNumeroCofrade:!0}).then(function(){"cofrades"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("cofrades")})})}var a=this;a.restoreCofrade=r}angular.module("app").controller("RestoreCofrade",e),e.$inject=["$state","$mdDialog","cofradesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/restore/restoreCofrade.directive.html",scope:{cofradeId:"=cofrade"},controller:"RestoreCofrade",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("restoreCofrade",e)}(),function(){"use strict";function e(e){function t(t,o){e.go("costalerosDetalle",{costaleroId:t})}function o(t,o){o.stopPropagation(),e.go("costalerosCambios",{costaleroId:t})}var r=this;r.modifyCostalero=o,r.goToCostalero=t}angular.module("app").controller("ListaCostaleros",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/costaleros/list/costaleros.directive.html",scope:{costaleros:"=costaleros"},link:function(e,t){e.$watch("vm.costaleros",function(t){t&&(e.vm.costalerosShort=e.vm.costaleros.map(function(e){var t={id:e.id,sitio:e.sitio};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaCostaleros",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaCostaleros",e)}(),function(){"use strict";function e(e,t,o){function r(e,o){o.stopPropagation();var r=t.confirm().title("Eliminar costalero").content("¿Está seguro que desea eliminar este costalero?<br>Dejará su sitio libre.").ariaLabel("Eliminar costalero").targetEvent(o).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(r).then(function(){n(e)})}function n(t){var r=o.costalerosRest().get({id:t},function(){r.cofrade=null,r.talla=null,r.fecha=null,r.$save().then(function(){"costaleros"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("costaleros")})})}var a=this;a.removeCostalero=r}angular.module("app").controller("RemoveCostalero",e),e.$inject=["$state","$mdDialog","costalerosService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/costaleros/remove/removeCostalero.directive.html",scope:{costaleroId:"=costalero"},controller:"RemoveCostalero",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeCostalero",e)}(),function(){"use strict";function e(e){function t(t,o){e.go("directivosDetalle",{directivoId:t})}function o(t,o){o.stopPropagation(),e.go("directivosCambios",{directivoId:t})}var r=this;r.modifyDirectivo=o,r.goToDirectivo=t}angular.module("app").controller("ListaDirectivos",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/directivos/list/directivos.directive.html",scope:{directivos:"=directivos"},link:function(e,t){e.$watch("vm.directivos",function(t){t&&(e.vm.directivosShort=e.vm.directivos.map(function(e){var t={id:e.id,posicion:e.posicion};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaDirectivos",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaDirectivos",e)}(),function(){"use strict";function e(e,t,o){function r(e,o){o.stopPropagation();var r=t.confirm().title("Eliminar directivo").content("¿Está seguro que desea eliminar este directivo?").ariaLabel("Eliminar directivo").targetEvent(o).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(r).then(function(){n(e)})}function n(t){var r=o.directivosRest().get({id:t},function(){r.$delete({id:t}).then(function(){"directivos"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("directivos")})})}var a=this;a.removeDirectivo=r}angular.module("app").controller("RemoveDirectivo",e),e.$inject=["$state","$mdDialog","directivosService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/directivos/remove/removeDirectivo.directive.html",scope:{directivoId:"=directivo"},controller:"RemoveDirectivo",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeDirectivo",e)}(),function(){"use strict";function e(e,t){function o(){t.papeletasSitiosRest().query({anio:r.anio},function(e){r.papeletasSitio=e[0]})}var r=this;r.anio=null,r.getAnio=o}angular.module("app").controller("ListaPapeletasSitios",e),e.$inject=["$state","papeletasSitiosService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/papeletasSitios/list/papeletasSitios.directive.html",scope:{anios:"=papeletas"},controller:"ListaPapeletasSitios",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaPapeletasSitios",e)}(),function(){"use strict";function e(e,t,o){function r(e,o){o.stopPropagation();var r=t.confirm().title("Eliminar papeleta sitio").content("¿Está seguro que desea eliminar esta papeleta de sitio?").ariaLabel("Eliminar papeletaSitio").targetEvent(o).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(r).then(function(){n(e)})}function n(t){o.papeletasSitiosRest().save({anio:t.anio,papeletas:[t.papeleta],remove:!0},function(){"papeletasSitios"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("papeletasSitios")})}var a=this;a.removePapeletaSitio=r}angular.module("app").controller("RemovePapeletaSitio",e),e.$inject=["$state","$mdDialog","papeletasSitiosService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/papeletasSitios/remove/removePapeletaSitio.directive.html",scope:{papeletaSitio:"=papeleta"},controller:"RemovePapeletaSitio",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removePapeletaSitio",e)}(),function(){"use strict";function e(e){function t(e,t){e="callesSector"+e,angular.element(document.getElementById(e)).toggleClass("ocultar")}function o(t,o){o.stopPropagation(),e.go("sectoresCambios",{sectorId:t})}function r(t,o,r){r.stopPropagation(),e.go("sectoresCambios",{sectorId:t,calle:o})}function n(t,o){o.stopPropagation(),e.go("sectoresCambios",{sectorId:t,calle:"new"})}var a=this;a.modifySector=o,a.modifyCalle=r,a.addCalle=n,a.showCalles=t}angular.module("app").controller("ListaSectores",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/sectores/list/sectores.directive.html",scope:{sectores:"=sectores"},link:function(e,t){e.$watch("vm.sectores",function(t){t&&(e.vm.sectoresShort=e.vm.sectores.map(function(e){var t={id:e.id,numeroSector:e.numeroSector,calles:e.calles};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaSectores",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaSectores",e)}(),function(){"use strict";function e(e,t,o,r){function n(e,o){o.stopPropagation();var r=t.confirm().title("Eliminar sector").content("¿Está seguro que desea eliminar este sector?").ariaLabel("Eliminar sector").targetEvent(o).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(r).then(function(){a(e)})}function a(t){var n=r.sectoresRest().get({id:t},function(){0!==n[0].calles.length?o.show(o.simple().content("No se puede eliminar un sector con calles asignadas").position("top right").hideDelay(3e3)):n[0].$delete({id:t}).then(function(){"sectores"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("sectores")})})}var i=this;i.removeSector=n}angular.module("app").controller("RemoveSector",e),e.$inject=["$state","$mdDialog","$mdToast","sectoresService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/sectores/remove/removeSector.directive.html",scope:{sectorId:"=sector"},controller:"RemoveSector",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeSector",e)}(),function(){"use strict";function e(e,t,o){function r(){t.cancel()}function n(t){var r=o.cofradesRest().get({id:t},function(){r.baja={motivo:a.motivoBaja,fechaBaja:(new Date).toLocaleDateString()},r.numeroCofrade=null,r.$save({updateNumeroCofrade:!0}).then(function(){a.closeDialog(),"cofrades"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("cofrades")})})}var a=this;a.closeDialog=r,a.removeEndCofrade=n}angular.module("app").controller("RemoveCofradeTmpl",e),e.$inject=["$state","$mdDialog","cofradesService"]}();
//# sourceMappingURL=data:application/json;base64,
