!function(){"use strict";angular.module("app",["ui.router","ngResource","ngMaterial","uiGmapgoogle-maps"])}(),function(){"use strict";function e(e){e.configure({libraries:"weather,geometry,visualization"})}angular.module("app").config(e),e.$inject=["uiGmapGoogleMapApiProvider"]}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",template:'<p class="lead">Welcome to the UI-Router Demo</p><p>Use the menu above to navigate. Pay attention to the <code>$state</code> and <code>$stateParams</code> values below.</p><p>Click these links—<a href="#/c?id=1">Alice</a> or <a href="#/user/42">Bob</a>—to see a url redirect in action.</p>'})}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){}angular.module("app").config(e),e.$inject=["$mdThemingProvider"]}(),function(){"use strict";function e(e){e.state("cofrades",{url:"/cofrades",templateProvider:["$templateCache",function(e){return e.get("cofrades/list/cofrades.html")}],controller:"Cofrades",controllerAs:"vm",resolve:{cofradesPrepService:t}}).state("cofradesDetalle",{url:"/cofrades/:cofradeId",templateProvider:["$templateCache",function(e){return e.get("cofrades/detail/cofradeDetalle.html")}],controller:"CofradeDetalle",controllerAs:"vm",resolve:{getCofradePrepService:r}})}function t(e){return e.cofradesRest().query()}function r(e,t){return e.cofradesRest().get({id:t.cofradeId})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["cofradesService"],r.$inject=["cofradesService","$stateParams"]}(),function(){"use strict";function e(e,t){function r(t){e(t).toggle()}function o(e){t.go(e)}var n=this;n.toggleSidenav=r,n.navigateTo=o}angular.module("app").controller("AppCtrl",e),e.$inject=["$mdSidenav","$state"]}(),function(){"use strict";function e(e,t,r){function o(){return t.$promise.then(function(t){n.cofrade=t;var o=n.cofrade.datosPersonales.direccion.calle+" "+n.cofrade.datosPersonales.direccion.numero+" "+n.cofrade.datosPersonales.direccion.municipio+" "+n.cofrade.datosPersonales.direccion.provincia+" "+n.cofrade.datosPersonales.direccion.cp;r.geoCodingAPI(o).then(function(t){if(t.data.results.length){var r=t.data.results[0].geometry.location;e.then(function(e){n.maps={coord:{latitude:r.lat,longitude:r.lng},zoom:17}})}})})}var n=this;n.cofrade=null,o()}angular.module("app").controller("CofradeDetalle",e),e.$inject=["uiGmapGoogleMapApi","getCofradePrepService","mapasService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){r.nextPage=e.next,r.cofrades=e.results})}var r=this;r.cofrades=null,r.nextPage=null,t()}angular.module("app").controller("Cofrades",e),e.$inject=["cofradesPrepService"]}(),function(){"use strict";function e(){return{restrict:"A",link:function(e,t,r){var o=t[0];t.bind("scroll",function(){o.scrollTop+o.offsetHeight>=o.scrollHeight-5&&e.$emit("scrollDown")})}}}angular.module("app").directive("scrolly",e)}(),function(){"use strict";function e(){return function(t){var r=t instanceof Array;for(var o in t)null===t[o]?r?t.splice(o,1):delete t[o]:"object"==typeof t[o]&&e(t[o]);return t}}angular.module("app").filter("removeNulls",e)}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/cofrades/:id.json:json",null,{query:{method:"GET",isArray:!1},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("removeNulls")(e))}}})}function o(){return e("http://127.0.0.1:5050/api/cofradesBajas/:id.json:json",null,{query:{method:"GET",isArray:!1}})}return{cofradesRest:r,cofradesBajasRest:o}}angular.module("app").factory("cofradesService",e),e.$inject=["$resource","$filter"]}(),function(){"use strict";function e(e){function t(t){return e.get("https://maps.googleapis.com/maps/api/geocode/json",{params:{address:t,key:"AIzaSyDC_OIDSl6curjCMCLyzn2yhMmg-er5knI"}}).then(function(e){return e})}return{geoCodingAPI:t}}angular.module("app").factory("mapasService",e),e.$inject=["$http"]}(),function(){"use strict";function e(e,t,r){function o(){if(i.nextPage){var e={page:i.nextPage};i.buscar&&(e[i.filtro]=i.buscar),r.cofradesRest().query(e,function(e){i.nextPage=e.next,i.cofrades=i.cofrades.concat(e.results)})}}function n(){var e={};e[i.filtro]=i.buscar,r.cofradesRest().query(e,function(e){i.nextPage=e.next,i.cofrades=e.results})}function a(){i.buscar=null,i.typeInput="nombre"===i.filtro?"text":"number"}function c(e,r){t.go("cofradesDetalle",{cofradeId:e})}var i=this;i.filtro="nombre",i.typeInput="text",i.buscar=null,i.busqueda=n,i.radioChange=a,i.goToCofrade=c,e.$on("scrollDown",o)}angular.module("app").controller("ListaCofrades",e),e.$inject=["$rootScope","$state","cofradesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/cofrades.directive.html",scope:{cofrades:"=cofrades",nextPage:"=page"},controller:"ListaCofrades",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaCofrades",e)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5pbml0Lm1vZHVsZS5qcyIsImFwcC5tYXAuanMiLCJhbGwubWluLmpzIiwiYXBwLnJvdXRlcy5qcyIsImFwcC50aGVtZS5qcyIsImNvZnJhZGVzL2NvZnJhZGVzLnJvdXRlcy5qcyIsImludGVyZmF6L2FwcC5jb250cm9sbGVyLmpzIiwiY29mcmFkZXMvZGV0YWlsL2NvZnJhZGVEZXRhbGxlLmNvbnRyb2xsZXIuanMiLCJjb2ZyYWRlcy9saXN0L2NvZnJhZGVzLmNvbnRyb2xsZXIuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvc2Nyb2xseS5kaXJlY3RpdmUuanMiLCJjb21tb25zL2ZpbHRlcnMvcmVtb3ZlTnVsbHMuZmlsdGVyLmpzIiwiY29tbW9ucy9zZXJ2aWNlcy9jb2ZyYWRlcy5zZXJ2aWNlLmpzIiwiY29tbW9ucy9zZXJ2aWNlcy9tYXBhcy5zZXJ2aWNlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2NvZnJhZGVzL2NvZnJhZGVzLmNvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2NvZnJhZGVzL2NvZnJhZGVzLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZ29vZ2xlTWFwQVBJIiwidWlHbWFwR29vZ2xlTWFwQXBpUHJvdmlkZXIiLCJjb25maWd1cmUiLCJsaWJyYXJpZXMiLCJjb25maWciLCIkaW5qZWN0IiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJzdGF0ZSIsInVybCIsInRlbXBsYXRlIiwidGhlbWVBbmd1bGFyTWF0ZXJpYWwiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ0ZW1wbGF0ZVByb3ZpZGVyIiwiJHRlbXBsYXRlQ2FjaGUiLCJnZXQiLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwicmVzb2x2ZSIsImNvZnJhZGVzUHJlcFNlcnZpY2UiLCJnZXRDb2ZyYWRlUHJlcFNlcnZpY2UiLCJjb2ZyYWRlc1NlcnZpY2UiLCJjb2ZyYWRlc1Jlc3QiLCJxdWVyeSIsIiRzdGF0ZVBhcmFtcyIsImlkIiwiY29mcmFkZUlkIiwiQXBwQ3RybCIsIiRtZFNpZGVuYXYiLCIkc3RhdGUiLCJ0b2dnbGVTaWRlbmF2IiwibWVudUlkIiwidG9nZ2xlIiwibmF2aWdhdGVUbyIsInRvIiwiZ28iLCJ2bSIsInRoaXMiLCJDb2ZyYWRlRGV0YWxsZSIsInVpR21hcEdvb2dsZU1hcEFwaSIsIm1hcGFzU2VydmljZSIsImFjdGl2YXRlIiwiJHByb21pc2UiLCJ0aGVuIiwiZGF0YSIsImNvZnJhZGUiLCJhZGRyZXNzIiwiZGF0b3NQZXJzb25hbGVzIiwiZGlyZWNjaW9uIiwiY2FsbGUiLCJudW1lcm8iLCJtdW5pY2lwaW8iLCJwcm92aW5jaWEiLCJjcCIsImdlb0NvZGluZ0FQSSIsInJlc3BvbnNlIiwicmVzdWx0cyIsImxlbmd0aCIsImNvb3JkaW5hdGVzIiwiZ2VvbWV0cnkiLCJsb2NhdGlvbiIsIm1hcHMiLCJjb29yZCIsImxhdGl0dWRlIiwibGF0IiwibG9uZ2l0dWRlIiwibG5nIiwiem9vbSIsIkNvZnJhZGVzIiwibmV4dFBhZ2UiLCJuZXh0IiwiY29mcmFkZXMiLCJzY3JvbGx5IiwicmVzdHJpY3QiLCJsaW5rIiwiJHJvb3RTY29wZSIsImVsZW1lbnQiLCJhdHRycyIsInJhdyIsImJpbmQiLCJzY3JvbGxUb3AiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCIkZW1pdCIsImRpcmVjdGl2ZSIsInJlbW92ZU51bGxzIiwib2JqIiwiaXNBcnJheSIsIkFycmF5IiwiayIsInNwbGljZSIsImZpbHRlciIsIiRyZXNvdXJjZSIsIiRmaWx0ZXIiLCJtZXRob2QiLCJzYXZlIiwidHJhbnNmb3JtUmVxdWVzdCIsImhlYWRlcnNHZXR0ZXIiLCJ0b0pzb24iLCJjb2ZyYWRlc0JhamFzUmVzdCIsImZhY3RvcnkiLCIkaHR0cCIsInBhcmFtcyIsImtleSIsIkxpc3RhQ29mcmFkZXMiLCJnZXROZXh0UGFnZSIsInBhcmFtZXRlcnMiLCJwYWdlIiwiYnVzY2FyIiwiZmlsdHJvIiwiY29uY2F0IiwiYnVzcXVlZGEiLCJyYWRpb0NoYW5nZSIsInR5cGVJbnB1dCIsImdvVG9Db2ZyYWRlIiwiZXZlbnQiLCIkb24iLCJsaXN0YUNvZnJhZGVzIiwidGVtcGxhdGVVcmwiLCJzY29wZSIsImJpbmRUb0NvbnRyb2xsZXIiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0EsWUFFQUEsU0FBQUMsT0FBQSxPQUNBLFlBQ0EsYUFDQSxhQUNBLHlCQ1BBLFdBQ0EsWUFNQSxTQUFBQyxHQUFBQyxHQUNBQSxFQUFBQyxXQUNBQyxVQUFBLG1DQU5BTCxRQUNBQyxPQUFBLE9BQ0FLLE9BQUFKLEdDa0JFQSxFQUFhSyxTQUFXLGlDQ3ZCMUIsV0FDQSxZQU1BLFNBQUFELEdBQUFFLEVBQUFDLEdBRUFBLEVBQUFDLFVBQUEsS0FFQUYsRUFDQUcsTUFBQSxRQUNBQyxJQUFBLElBQ0FDLFNBQUEsc1NBWEFiLFFBQ0FDLE9BQUEsT0FDQUssT0FBQUEsR0QwQ0VBLEVBQU9DLFNBQVcsaUJBQWtCLHlCRS9DdEMsV0FDQSxZQU1BLFNBQUFPLEdBQUFDLElBSkFmLFFBQ0FDLE9BQUEsT0FDQUssT0FBQVEsR0Z1REVBLEVBQXFCUCxTQUFXLHlCRzVEbEMsV0FDQSxZQU1BLFNBQUFELEdBQUFFLEdBQ0FBLEVBQ0FHLE1BQUEsWUFDQUMsSUFBQSxZQUNBSSxrQkFBQSxpQkFBQSxTQUFBQyxHQUNBLE1BQUFBLEdBQUFDLElBQUEsaUNBRUFDLFdBQUEsV0FDQUMsYUFBQSxLQUNBQyxTQUNBQyxvQkFBQUEsS0FHQVgsTUFBQSxtQkFDQUMsSUFBQSx1QkFDQUksa0JBQUEsaUJBQUEsU0FBQUMsR0FDQSxNQUFBQSxHQUFBQyxJQUFBLHlDQUVBQyxXQUFBLGlCQUNBQyxhQUFBLEtBQ0FDLFNBQ0FFLHNCQUFBQSxLQUtBLFFBQUFELEdBQUFFLEdBQ0EsTUFBQUEsR0FBQUMsZUFBQUMsUUFHQSxRQUFBSCxHQUFBQyxFQUFBRyxHQUNBLE1BQUFILEdBQUFDLGVBQUFQLEtBQUFVLEdBQUFELEVBQUFFLFlBbkNBN0Is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QUFBVCxVQUFBRCxJQXpDQSxHQUFBVyxHQUFBQyxJQUVBRCxHQUFBeUUsT0FBQSxTQUNBekUsRUFBQTZFLFVBQUEsT0FDQTdFLEVBQUF3RSxPQUFBLEtBRUF4RSxFQUFBMkUsU0FBQUEsRUFDQTNFLEVBQUE0RSxZQUFBQSxFQUNBNUUsRUFBQThFLFlBQUFBLEVBRUF2QyxFQUFBeUMsSUFBQSxhQUFBWCxHQWZBNUcsUUFDQUMsT0FBQSxPQUNBa0IsV0FBQSxnQkFBQXdGLEdYdVZFQSxFQUFjcEcsU0FBVyxhQUFjLFNBQVUsc0JZNVZuRCxXQUNBLFlBT0EsU0FBQWlILEtBQ0EsT0FDQTVDLFNBQUEsSUFDQTZDLFlBQUEsMERBQ0FDLE9BQ0FoRCxTQUFBLFlBQ0FGLFNBQUEsU0FFQXJELFdBQUEsZ0JBQ0FDLGFBQUEsS0FDQXVHLGtCQUFBLEdBZkEzSCxRQUNBQyxPQUFBLE9BQ0FzRixVQUFBLGdCQUFBaUMiLCJmaWxlIjoiYWxsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICduZ1Jlc291cmNlJyxcclxuICAgICduZ01hdGVyaWFsJyxcclxuICAgICd1aUdtYXBnb29nbGUtbWFwcydcclxuICBdKTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoZ29vZ2xlTWFwQVBJKTtcclxuXHJcbiAgZnVuY3Rpb24gZ29vZ2xlTWFwQVBJKHVpR21hcEdvb2dsZU1hcEFwaVByb3ZpZGVyKXtcclxuICAgIHVpR21hcEdvb2dsZU1hcEFwaVByb3ZpZGVyLmNvbmZpZ3VyZSh7XHJcbiAgICAgICAgbGlicmFyaWVzOiAnd2VhdGhlcixnZW9tZXRyeSx2aXN1YWxpemF0aW9uJ1xyXG4gICAgfSk7ICAgIFxyXG4gIH1cclxuXHJcbn0pKCk7IixudWxsLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbmZpZyhjb25maWcpO1xyXG5cclxuICBmdW5jdGlvbiBjb25maWcoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG5cclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvXCIpO1xyXG5cclxuICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgIC5zdGF0ZShcImhvbWVcIiwge1xyXG4gICAgICAgIHVybDogXCIvXCIsXHJcbiAgICAgICAgdGVtcGxhdGU6ICc8cCBjbGFzcz1cImxlYWRcIj5XZWxjb21lIHRvIHRoZSBVSS1Sb3V0ZXIgRGVtbzwvcD4nICtcclxuICAgICAgICAgICc8cD5Vc2UgdGhlIG1lbnUgYWJvdmUgdG8gbmF2aWdhdGUuICcgK1xyXG4gICAgICAgICAgJ1BheSBhdHRlbnRpb24gdG8gdGhlIDxjb2RlPiRzdGF0ZTwvY29kZT4gYW5kIDxjb2RlPiRzdGF0ZVBhcmFtczwvY29kZT4gdmFsdWVzIGJlbG93LjwvcD4nICtcclxuICAgICAgICAgICc8cD5DbGljayB0aGVzZSBsaW5rc+KAlDxhIGhyZWY9XCIjL2M/aWQ9MVwiPkFsaWNlPC9hPiBvciAnICtcclxuICAgICAgICAgICc8YSBocmVmPVwiIy91c2VyLzQyXCI+Qm9iPC9hPuKAlHRvIHNlZSBhIHVybCByZWRpcmVjdCBpbiBhY3Rpb24uPC9wPidcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbmZpZyh0aGVtZUFuZ3VsYXJNYXRlcmlhbCk7XHJcblxyXG4gIGZ1bmN0aW9uIHRoZW1lQW5ndWxhck1hdGVyaWFsKCRtZFRoZW1pbmdQcm92aWRlcil7XHJcbiAgICBcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmZpZygkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdjb2ZyYWRlcycsIHtcclxuICAgICAgICB1cmw6IFwiL2NvZnJhZGVzXCIsXHJcbiAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpeyAgXHJcbiAgICAgICAgICByZXR1cm4gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdjb2ZyYWRlcy9saXN0L2NvZnJhZGVzLmh0bWwnKTsgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiAnQ29mcmFkZXMnLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGNvZnJhZGVzUHJlcFNlcnZpY2U6IGNvZnJhZGVzUHJlcFNlcnZpY2VcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdGF0ZSgnY29mcmFkZXNEZXRhbGxlJywge1xyXG4gICAgICAgIHVybDogXCIvY29mcmFkZXMvOmNvZnJhZGVJZFwiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnY29mcmFkZXMvZGV0YWlsL2NvZnJhZGVEZXRhbGxlLmh0bWwnKTsgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiAnQ29mcmFkZURldGFsbGUnLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGdldENvZnJhZGVQcmVwU2VydmljZTogZ2V0Q29mcmFkZVByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvZnJhZGVzUHJlcFNlcnZpY2UoY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gY29mcmFkZXNTZXJ2aWNlLmNvZnJhZGVzUmVzdCgpLnF1ZXJ5KCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRDb2ZyYWRlUHJlcFNlcnZpY2UoY29mcmFkZXNTZXJ2aWNlLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgIHJldHVybiBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNSZXN0KCkuZ2V0KHtpZDogJHN0YXRlUGFyYW1zLmNvZnJhZGVJZH0pO1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0FwcEN0cmwnLCBBcHBDdHJsKTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIEFwcEN0cmwoJG1kU2lkZW5hdiwgJHN0YXRlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgdm0udG9nZ2xlU2lkZW5hdiA9IHRvZ2dsZVNpZGVuYXY7XHJcbiAgICB2bS5uYXZpZ2F0ZVRvICAgID0gbmF2aWdhdGVUbztcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gdG9nZ2xlU2lkZW5hdihtZW51SWQpIHtcclxuICAgICAgJG1kU2lkZW5hdihtZW51SWQpLnRvZ2dsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5hdmlnYXRlVG8odG8pe1xyXG4gICAgICAkc3RhdGUuZ28odG8pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0NvZnJhZGVEZXRhbGxlJywgQ29mcmFkZURldGFsbGUpO1xyXG5cclxuICBmdW5jdGlvbiBDb2ZyYWRlRGV0YWxsZSh1aUdtYXBHb29nbGVNYXBBcGksIGdldENvZnJhZGVQcmVwU2VydmljZSwgbWFwYXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLmNvZnJhZGUgPSBudWxsO1xyXG4gICAgXHJcbiAgICBhY3RpdmF0ZSgpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgcmV0dXJuIGdldENvZnJhZGVQcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIHZtLmNvZnJhZGUgPSBkYXRhO1xyXG4gICAgICAgIHZhciBhZGRyZXNzID0gdm0uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuZGlyZWNjaW9uLmNhbGxlICAgICArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5kaXJlY2Npb24ubnVtZXJvICAgICsgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgIHZtLmNvZnJhZGUuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5tdW5pY2lwaW8gKyAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgdm0uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuZGlyZWNjaW9uLnByb3ZpbmNpYSArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5kaXJlY2Npb24uY3A7XHJcblxyXG4gICAgICAgIG1hcGFzU2VydmljZS5nZW9Db2RpbmdBUEkoYWRkcmVzcykuXHJcbiAgICAgICAgICB0aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVzdWx0cy5sZW5ndGgpe1xyXG4gICAgICAgICAgICAgIHZhciBjb29yZGluYXRlcyA9IHJlc3BvbnNlLmRhdGEucmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgdWlHbWFwR29vZ2xlTWFwQXBpLnRoZW4oZnVuY3Rpb24obWFwcykge1xyXG4gICAgICAgICAgICAgICAgdm0ubWFwcyA9IHtjb29yZDogeyBsYXRpdHVkZTogY29vcmRpbmF0ZXMubGF0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlOiBjb29yZGluYXRlcy5sbmcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogMTcgfTtcclxuXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQ29mcmFkZXMnLCBDb2ZyYWRlcyk7XHJcblxyXG4gIGZ1bmN0aW9uIENvZnJhZGVzKGNvZnJhZGVzUHJlcFNlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLmNvZnJhZGVzID0gbnVsbDtcclxuICAgIHZtLm5leHRQYWdlID0gbnVsbDtcclxuXHJcbiAgICBhY3RpdmF0ZSgpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgcmV0dXJuIGNvZnJhZGVzUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5uZXh0UGFnZSA9IGRhdGEubmV4dDtcclxuICAgICAgICB2bS5jb2ZyYWRlcyA9IGRhdGEucmVzdWx0cztcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ3Njcm9sbHknLCBzY3JvbGx5KTtcclxuXHJcbiAgZnVuY3Rpb24gc2Nyb2xseSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgIGxpbms6IGZ1bmN0aW9uICgkcm9vdFNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgIHZhciByYXcgPSBlbGVtZW50WzBdO1xyXG4gICAgICAgIGVsZW1lbnQuYmluZCgnc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKHJhdy5zY3JvbGxUb3AgKyByYXcub2Zmc2V0SGVpZ2h0ID49IHJhdy5zY3JvbGxIZWlnaHQtNSkge1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KFwic2Nyb2xsRG93blwiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZpbHRlcigncmVtb3ZlTnVsbHMnLCByZW1vdmVOdWxscyk7XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZU51bGxzKCl7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKXtcclxuICAgICAgdmFyIGlzQXJyYXkgPSBvYmogaW5zdGFuY2VvZiBBcnJheTtcclxuICAgICAgZm9yICh2YXIgayBpbiBvYmope1xyXG4gICAgICAgIGlmIChvYmpba109PT1udWxsKSBpc0FycmF5ID8gb2JqLnNwbGljZShrLDEpIDogZGVsZXRlIG9ialtrXTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygb2JqW2tdPT1cIm9iamVjdFwiKSByZW1vdmVOdWxscyhvYmpba10pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgnY29mcmFkZXNTZXJ2aWNlJywgY29mcmFkZXNTZXJ2aWNlKTtcclxuXHJcbiAgZnVuY3Rpb24gY29mcmFkZXNTZXJ2aWNlKCRyZXNvdXJjZSwgJGZpbHRlcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY29mcmFkZXNSZXN0OiBjb2ZyYWRlc1Jlc3QsXHJcbiAgICAgIGNvZnJhZGVzQmFqYXNSZXN0OiBjb2ZyYWRlc0JhamFzUmVzdFxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb2ZyYWRlc1Jlc3QoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvY29mcmFkZXMvOmlkLmpzb246anNvbicsIG51bGwsIHtcclxuICAgICAgICAncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTpmYWxzZX0sXHJcbiAgICAgICAgJ3NhdmUnOiAgIHttZXRob2Q6J1BPU1QnLCB0cmFuc2Zvcm1SZXF1ZXN0OiBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLnRvSnNvbigkZmlsdGVyKCdyZW1vdmVOdWxscycpKGRhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29mcmFkZXNCYWphc1Jlc3QoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvY29mcmFkZXNCYWphcy86aWQuanNvbjpqc29uJywgbnVsbCwgeydxdWVyeSc6ICB7bWV0aG9kOidHRVQnLCBpc0FycmF5OmZhbHNlfX0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ21hcGFzU2VydmljZScsIG1hcGFzU2VydmljZSk7XHJcblxyXG4gIGZ1bmN0aW9uIG1hcGFzU2VydmljZSgkaHR0cCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZ2VvQ29kaW5nQVBJOiBnZW9Db2RpbmdBUElcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gZ2VvQ29kaW5nQVBJKGFkZHJlc3MpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbicsIHtwYXJhbXM6IHthZGRyZXNzOiBhZGRyZXNzLCBrZXk6IFwiQUl6YVN5RENfT0lEU2w2Y3VyakNNQ0x5em4yeWhNbWctZXI1a25JXCJ9fSkuXHJcbiAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgICAgfSk7XHJcbiAgICB9ICAgIFxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdMaXN0YUNvZnJhZGVzJywgTGlzdGFDb2ZyYWRlcyk7XHJcblxyXG4gIGZ1bmN0aW9uIExpc3RhQ29mcmFkZXMoJHJvb3RTY29wZSwgJHN0YXRlLCBjb2ZyYWRlc1NlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLmZpbHRybyAgICA9ICdub21icmUnO1xyXG4gICAgdm0udHlwZUlucHV0ID0gJ3RleHQnO1xyXG4gICAgdm0uYnVzY2FyICAgID0gbnVsbDtcclxuXHJcbiAgICB2bS5idXNxdWVkYSAgICAgPSBidXNxdWVkYTtcclxuICAgIHZtLnJhZGlvQ2hhbmdlICA9IHJhZGlvQ2hhbmdlO1xyXG4gICAgdm0uZ29Ub0NvZnJhZGUgPSBnb1RvQ29mcmFkZTtcclxuXHJcbiAgICAkcm9vdFNjb3BlLiRvbignc2Nyb2xsRG93bicsIGdldE5leHRQYWdlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXROZXh0UGFnZSgpIHtcclxuICAgICAgaWYgKHZtLm5leHRQYWdlKXtcclxuICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHtwYWdlOiB2bS5uZXh0UGFnZX07XHJcblxyXG4gICAgICAgIGlmICh2bS5idXNjYXIpXHJcbiAgICAgICAgICBwYXJhbWV0ZXJzW3ZtLmZpbHRyb10gPSB2bS5idXNjYXI7XHJcblxyXG4gICAgICAgIGNvZnJhZGVzU2VydmljZS5jb2ZyYWRlc1Jlc3QoKS5xdWVyeShwYXJhbWV0ZXJzLCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIHZtLm5leHRQYWdlID0gZGF0YS5uZXh0O1xyXG4gICAgICAgICAgdm0uY29mcmFkZXMgPSB2bS5jb2ZyYWRlcy5jb25jYXQoZGF0YS5yZXN1bHRzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJ1c3F1ZWRhKCkge1xyXG4gICAgICB2YXIgZmlsdHJvID0ge307XHJcbiAgICAgIGZpbHRyb1t2bS5maWx0cm9dID0gdm0uYnVzY2FyO1xyXG4gICAgICBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNSZXN0KCkucXVlcnkoZmlsdHJvLCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5uZXh0UGFnZSA9IGRhdGEubmV4dDtcclxuICAgICAgICB2bS5jb2ZyYWRlcyA9IGRhdGEucmVzdWx0cztcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmFkaW9DaGFuZ2UoKSB7XHJcbiAgICAgIHZtLmJ1c2NhciA9IG51bGw7XHJcbiAgICAgIHZtLnR5cGVJbnB1dCA9ICh2bS5maWx0cm8gPT09ICdub21icmUnKSA/ICd0ZXh0JzogJ251bWJlcic7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ29Ub0NvZnJhZGUoaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdjb2ZyYWRlc0RldGFsbGUnLCB7Y29mcmFkZUlkOiBpZH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdsaXN0YUNvZnJhZGVzJywgbGlzdGFDb2ZyYWRlcyk7XHJcblxyXG5cclxuICBmdW5jdGlvbiBsaXN0YUNvZnJhZGVzKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9kaXJlY3RpdmVzL2NvZnJhZGVzL2NvZnJhZGVzLmRpcmVjdGl2ZS5odG1sJyxcclxuICAgICAgc2NvcGU6IHtcclxuICAgICAgICBjb2ZyYWRlczogJz1jb2ZyYWRlcycsXHJcbiAgICAgICAgbmV4dFBhZ2U6ICc9cGFnZSdcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjogJ0xpc3RhQ29mcmFkZXMnLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=