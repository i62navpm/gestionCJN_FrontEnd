!function(){"use strict";angular.module("app",["ui.router","ngResource","ngMaterial","uiGmapgoogle-maps","ngMessages"])}(),function(){"use strict";function e(e){e.interceptors.push("myHttpInterceptor")}function t(e){var t=angular.element(document.querySelector(".m-app-loading"));return{request:function(e){return"POST"===e.method&&t.css("display","block"),e},requestError:function(t){return e.reject(t)},response:function(e){return t.css("display","none"),e},responseError:function(r){return t.css("display","none"),e.reject(r)}}}angular.module("app").factory("myHttpInterceptor",t).config(e),e.$inject=["$httpProvider"],t.$inject=["$q"]}(),function(){"use strict";function e(e){e.configure({libraries:"weather,geometry,visualization"})}angular.module("app").config(e),e.$inject=["uiGmapGoogleMapApiProvider"]}(),function(){"use strict";function e(e){e.months=["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],e.shortMonths=["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],e.days=["lunes","martes","miércoles","jueves","viernes","sábado","domingo"],e.shortDays=["lun","mar","mié","jue","vie","sáb","dom"],e.firstDayOfWeek=1,e.parseDate=function(e){return new Date(e)},e.formatDate=function(e){return new Date(e).toLocaleDateString()}}angular.module("app").config(e),e.$inject=["$mdDateLocaleProvider"]}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",template:'<p class="lead">Welcome to the UI-Router Demo</p><p>Use the menu above to navigate. Pay attention to the <code>$state</code> and <code>$stateParams</code> values below.</p><p>Click these links—<a href="#/c?id=1">Alice</a> or <a href="#/user/42">Bob</a>—to see a url redirect in action.</p>'})}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){}angular.module("app").config(e),e.$inject=["$mdThemingProvider"]}(),function(){"use strict";function e(e){e.state("aspirantes",{url:"/aspirantes",templateProvider:["$templateCache",function(e){return e.get("aspirantes/list/aspirantes.html")}],controller:"Aspirantes",controllerAs:"vm",resolve:{aspirantesPrepService:t}}).state("aspirantesDetalle",{url:"/aspirantes/:aspiranteId",templateProvider:["$templateCache",function(e){return e.get("aspirantes/detail/aspiranteDetalle.html")}],controller:"AspiranteDetalle",controllerAs:"vm",resolve:{getAspirantePrepService:r}}).state("aspirantesCambios",{url:"/aspirantes/cambios/:aspiranteId",templateProvider:["$templateCache",function(e){return e.get("aspirantes/addModify/aspiranteAddModify.html")}],controller:"AspiranteAddModify",controllerAs:"vm",resolve:{getAspirantePrepService:r}})}function t(e){return e.aspirantesRest().query()}function r(e,t){return t.aspiranteId?e.aspirantesRest().get({id:t.aspiranteId}):!1}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["aspirantesService"],r.$inject=["aspirantesService","$stateParams"]}(),function(){"use strict";function e(e){e.state("autoridades",{url:"/autoridades",templateProvider:["$templateCache",function(e){return e.get("autoridades/list/autoridades.html")}],controller:"Autoridades",controllerAs:"vm",resolve:{autoridadesPrepService:t}}).state("autoridadesDetalle",{url:"/autoridades/:autoridadId",templateProvider:["$templateCache",function(e){return e.get("autoridades/detail/autoridadDetalle.html")}],controller:"AutoridadDetalle",controllerAs:"vm",resolve:{getAutoridadPrepService:r,getMapsPrepService:o}}).state("autoridadesCambios",{url:"/autoridades/cambios/:autoridadId",templateProvider:["$templateCache",function(e){return e.get("autoridades/addModify/autoridadAddModify.html")}],controller:"AutoridadAddModify",controllerAs:"vm",resolve:{getAutoridadPrepService:r}})}function t(e){return e.autoridadesRest().query()}function r(e,t){return t.autoridadId?e.autoridadesRest().get({id:t.autoridadId}):!1}function o(e,t,r){return t.$promise.then(function(t){var o=t.direccion.calle+" "+t.direccion.numero+" "+t.direccion.municipio+" "+t.direccion.provincia+" "+t.direccion.cp;return r.geoCodingAPI(o).then(function(t){if(t.data.results.length){var r=t.data.results[0].geometry.location;return e.then(function(e){return{coord:{latitude:r.lat,longitude:r.lng},marker:{latitude:r.lat,longitude:r.lng},zoom:17}})}})})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["autoridadesService"],r.$inject=["autoridadesService","$stateParams"],o.$inject=["uiGmapGoogleMapApi","getAutoridadPrepService","mapasService"]}(),function(){"use strict";function e(e){e.state("cofrades",{url:"/cofrades",templateProvider:["$templateCache",function(e){return e.get("cofrades/list/cofrades.html")}],controller:"Cofrades",controllerAs:"vm",resolve:{cofradesPrepService:t,cofradesBajasPrepService:r}}).state("cofradesDetalle",{url:"/cofrades/:cofradeId",templateProvider:["$templateCache",function(e){return e.get("cofrades/detail/cofradeDetalle.html")}],controller:"CofradeDetalle",controllerAs:"vm",resolve:{getCofradePrepService:o,getMapsPrepService:n}}).state("cofradesCambios",{url:"/cofrades/cambios/:cofradeId",templateProvider:["$templateCache",function(e){return e.get("cofrades/addModify/cofradeAddModify.html")}],controller:"CofradeAddModify",controllerAs:"vm",resolve:{getCofradePrepService:o}})}function t(e){return e.cofradesRest().query()}function r(e){return e.cofradesBajasRest().query()}function o(e,t){return t.cofradeId?e.cofradesRest().get({id:t.cofradeId}):!1}function n(e,t,r){return t.$promise.then(function(t){var o=t.datosPersonales.direccion.calle+" "+t.datosPersonales.direccion.numero+" "+t.datosPersonales.direccion.municipio+" "+t.datosPersonales.direccion.provincia+" "+t.datosPersonales.direccion.cp;return r.geoCodingAPI(o).then(function(t){if(t.data.results.length){var r=t.data.results[0].geometry.location;return e.then(function(e){return{coord:{latitude:r.lat,longitude:r.lng},marker:{latitude:r.lat,longitude:r.lng},zoom:17}})}})})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["cofradesService"],r.$inject=["cofradesService"],o.$inject=["cofradesService","$stateParams"],n.$inject=["uiGmapGoogleMapApi","getCofradePrepService","mapasService"]}(),function(){"use strict";function e(e){e.state("costaleros",{url:"/costaleros",templateProvider:["$templateCache",function(e){return e.get("costaleros/list/costaleros.html")}],controller:"Costaleros",controllerAs:"vm",resolve:{costalerosPrepService:t}}).state("costalerosDetalle",{url:"/costaleros/:costaleroId",templateProvider:["$templateCache",function(e){return e.get("costaleros/detail/costaleroDetalle.html")}],controller:"CostaleroDetalle",controllerAs:"vm",resolve:{getCostaleroPrepService:r}}).state("costalerosCambios",{url:"/costaleros/cambios/:costaleroId",templateProvider:["$templateCache",function(e){return e.get("costaleros/addModify/costaleroAddModify.html")}],controller:"CostaleroAddModify",controllerAs:"vm",resolve:{getCostaleroPrepService:r}})}function t(e){return e.costalerosRest().query()}function r(e,t){return t.costaleroId?e.costalerosRest().get({id:t.costaleroId}):!1}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["costalerosService"],r.$inject=["costalerosService","$stateParams"]}(),function(){"use strict";function e(e){e.state("directivos",{url:"/directivos",templateProvider:["$templateCache",function(e){return e.get("directivos/list/directivos.html")}],controller:"Directivos",controllerAs:"vm",resolve:{directivosPrepService:t}}).state("directivosDetalle",{url:"/directivos/:directivoId",templateProvider:["$templateCache",function(e){return e.get("directivos/detail/directivoDetalle.html")}],controller:"DirectivoDetalle",controllerAs:"vm",resolve:{getDirectivoPrepService:r}}).state("directivosCambios",{url:"/directivos/cambios/:directivoId",templateProvider:["$templateCache",function(e){return e.get("directivos/addModify/directivoAddModify.html")}],controller:"DirectivoAddModify",controllerAs:"vm",resolve:{getDirectivoPrepService:r}})}function t(e){return e.directivosRest().query()}function r(e,t){return t.directivoId?e.directivosRest().get({id:t.directivoId}):!1}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["directivosService"],r.$inject=["directivosService","$stateParams"]}(),function(){"use strict";function e(e,t){function r(t){e(t).toggle()}function o(e,o){r(o),t.go(e)}var n=this;n.toggleSidenav=r,n.navigateTo=o}angular.module("app").controller("AppCtrl",e),e.$inject=["$mdSidenav","$state"]}(),function(){"use strict";function e(e){e.state("sectores",{url:"/sectores",templateProvider:["$templateCache",function(e){return e.get("sectores/list/sectores.html")}],controller:"Sectores",controllerAs:"vm",resolve:{sectoresPrepService:t}}).state("sectoresDetalle",{url:"/sectores/:sectorId",templateProvider:["$templateCache",function(e){return e.get("sectores/detail/sectorDetalle.html")}],controller:"SectorDetalle",controllerAs:"vm",resolve:{getSectorPrepService:r,getMapsPrepService:o}}).state("sectoresCambios",{url:"/sectores/cambios/:sectorId/:calle",templateProvider:["$templateCache",function(e){return e.get("sectores/addModify/sectorAddModify.html")}],controller:"SectorAddModify",controllerAs:"vm",resolve:{getSectorPrepService:r}})}function t(e){return e.sectoresRest().query()}function r(e,t){return t.sectorId?e.sectoresRest().get({id:t.sectorId}):!1}function o(e,t,r){return t.$promise.then(function(t){var o=t.direccion.calle+" "+t.direccion.numero+" "+t.direccion.municipio+" "+t.direccion.provincia+" "+t.direccion.cp;return r.geoCodingAPI(o).then(function(t){if(t.data.results.length){var r=t.data.results[0].geometry.location;return e.then(function(e){return{coord:{latitude:r.lat,longitude:r.lng},marker:{latitude:r.lat,longitude:r.lng},zoom:17}})}})})}angular.module("app").config(e),e.$inject=["$stateProvider"],t.$inject=["sectoresService"],r.$inject=["sectoresService","$stateParams"],o.$inject=["uiGmapGoogleMapApi","getSectorPrepService","mapasService"]}(),function(){"use strict";function e(e,t,r,o,n,a,i){function c(){n?n.$promise.then(s):l()}function s(e){return h.aspirante=e,!0}function l(){h.newCofrade=!0,h.aspirante={cofrade:null,fecha:(new Date).toLocaleDateString()}}function u(){window.history.back()}function d(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),i.cofradesRest().query(t).$promise.then(function(e){return e.results})}function f(e){h.aspirante.cofrade=e?e.id:null}function p(t){t?h.aspirante.cofrade?(h.aspirante.cofrade=h.aspirante.cofrade.id?h.aspirante.cofrade.id:h.aspirante.cofrade,a.aspirantesRest().save(h.aspirante,m,v)):(e.aspiranteForm.cofrade.$error.required=!0,g()):g()}function m(e){r.show(r.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),o.go("aspirantes")}function v(e){r.show(r.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){r.show(r.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.newCofrade=!1,h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,c()}angular.module("app").controller("AspiranteAddModify",e),e.$inject=["$scope","$document","$mdToast","$state","getAspirantePrepService","aspirantesService","cofradesService"]}(),function(){"use strict";function e(e,t){function r(){return t.$promise.then(function(e){n.aspirante=e})}function o(t,r){e.go("aspirantesCambios",{aspiranteId:t})}var n=this;n.modifyAspirante=o,r()}angular.module("app").controller("AspiranteDetalle",e),e.$inject=["$state","getAspirantePrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){r.aspirantes=e})}var r=this;r.aspirantes=null,t()}angular.module("app").controller("Aspirantes",e),e.$inject=["aspirantesPrepService"]}(),function(){"use strict";function e(e,t,r,o,n,a,i){function c(){n?n.$promise.then(s):l()}function s(e){return h.autoridad=e,h.calleSelected={calle:h.autoridad.direccion.calle,cp:h.autoridad.direccion.cp,provincia:h.autoridad.direccion.provincia,municipio:h.autoridad.direccion.municipio},!0}function l(){h.newCofrade=!0,h.autoridad={direccion:{}}}function u(){window.history.back()}function d(e){return i.getCalles(e).then(function(e){return e.data})}function f(e){e?(h.autoridad.direccion.calle=e.calle,h.autoridad.direccion.municipio=e.municipio,h.autoridad.direccion.cp=e.cp,h.autoridad.direccion.provincia=e.provincia):(h.autoridad.direccion.calle=null,h.autoridad.direccion.municipio=null,h.autoridad.direccion.cp=null,h.autoridad.direccion.provincia=null)}function p(e){e?(h.autoridad.direccion.calle=h.autoridad.direccion.calle?h.autoridad.direccion.calle:h.searchText,a.autoridadesRest().save(h.autoridad,m,v)):g()}function m(e){r.show(r.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),o.go("autoridades")}function v(e){r.show(r.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){r.show(r.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.newCofrade=!1,h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,c()}angular.module("app").controller("AutoridadAddModify",e),e.$inject=["$scope","$document","$mdToast","$state","getAutoridadPrepService","autoridadesService","cofradesService"]}(),function(){"use strict";function e(e,t,r){function o(){return t.$promise.then(function(e){a.autoridad=e,a.maps=r})}function n(t,r){e.go("autoridadesCambios",{autoridadId:t})}var a=this;a.modifyAutoridad=n,o()}angular.module("app").controller("AutoridadDetalle",e),e.$inject=["$state","getAutoridadPrepService","getMapsPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){r.autoridades=e})}var r=this;r.autoridades=null,t()}angular.module("app").controller("Autoridades",e),e.$inject=["autoridadesPrepService"]}(),function(){"use strict";function e(e,t,r,o,n,a,i){function c(){n?n.$promise.then(s):a.getRegistros().then(function(e){S.cofrade.numeroOrden=e.data.numeroOrden,S.cofrade.numeroCofrade=e.data.numeroCofrade})}function s(e){return S.cofrade=e,S.calleSelected={calle:S.cofrade.datosPersonales.direccion.calle,cp:S.cofrade.datosPersonales.direccion.cp,provincia:S.cofrade.datosPersonales.direccion.provincia,municipio:S.cofrade.datosPersonales.direccion.municipio},S.fechaNacimiento=S.cofrade.datosPersonales.fechaNacimiento,S.fechaInscripcion=S.cofrade.datosPersonales.fechaInscripcion,S.cofrade.datosFinancieros=S.cofrade.datosFinancieros||{cuenta:{},deuda:[]},S.cofrade.datosFinancieros.cuenta=S.cofrade.datosFinancieros.cuenta||{},S.cofrade.datosFinancieros.deuda=S.cofrade.datosFinancieros.deuda||[],!0}function l(){window.history.back()}function u(e){return a.getCalles(e).then(function(e){return e.data})}function d(e){e?(S.cofrade.datosPersonales.direccion.calle=e.calle,S.cofrade.datosPersonales.direccion.municipio=e.municipio,S.cofrade.datosPersonales.direccion.cp=e.cp,S.cofrade.datosPersonales.direccion.provincia=e.provincia,f(e.calle)):(S.cofrade.datosPersonales.direccion.calle=null,S.cofrade.datosPersonales.direccion.municipio=null,S.cofrade.datosPersonales.direccion.cp=null,S.cofrade.datosPersonales.direccion.provincia=null,S.sector=null,S.nuevaCalle=!0)}function f(e){i.sectoresRest().query({calle:e},function(e){S.sector=e[0].numeroSector,S.nuevaCalle=!1})}function p(){S.cofrade.datosFinancieros.cuenta.iban&&(S.cofrade.datosFinancieros.cuenta.cc=e("calcularCC")(S.cofrade.datosFinancieros.cuenta.iban))}function m(){S.cofrade.datosFinancieros.cuenta.cc&&(S.cofrade.datosFinancieros.cuenta.iban=e("calcularIban")(S.cofrade.datosFinancieros.cuenta.cc))}function v(e){function o(){s.save(S.cofrade,g,h)}function n(){i.sectoresRest().get({sector:S.sector},function(e){var n=e[0];n?(n.cofrade=n.cofrade.id,n.calles.push(S.searchText),n.$save(null,o,h)):r.show(r.simple().content("El sector "+S.sector+" no existe!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))})}if(e){var c={cuenta:{},deuda:[]};S.cofrade.datosPersonales.direccion.calle=S.searchText,JSON.stringify(S.cofrade.datosFinancieros)===JSON.stringify(c)&&delete S.cofrade.datosFinancieros;var s=a.cofradesRest();S.nuevaCalle?n():o()}else $()}function g(e){r.show(r.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),o.go("cofrades")}function h(e){r.show(r.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function $(){r.show(r.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var S=this;S.nuevaCalle=!0,S.cofrade={datosFinancieros:{cuenta:{},deuda:[]},datosPersonales:{direccion:{},sexo:"Hombre",fechaInscripcion:(new Date).toLocaleDateString(),fechaNacimiento:(new Date).toLocaleDateString()}},S.backState=l,S.querySearch=u,S.selectedItemChange=d,S.calcularCC=p,S.calcularIban=m,S.guardar=v,c()}angular.module("app").controller("CofradeAddModify",e),e.$inject=["$filter","$document","$mdToast","$state","getCofradePrepService","cofradesService","sectoresService"]}(),function(){"use strict";function e(e,t,r,o){function n(){return r.$promise.then(function(e){i.cofrade=e,i.cofrade.datosFinancieros&&i.cofrade.datosFinancieros.cuenta&&(i.iban=t("parseIban")(i.cofrade.datosFinancieros.cuenta.iban),i.cc=t("parseCC")(i.cofrade.datosFinancieros.cuenta.cc)),i.maps=o})}function a(t,r){e.go("cofradesCambios",{cofradeId:t})}var i=this;i.cofrade=null,i.maps=null,i.modifyCofrade=a,n()}angular.module("app").controller("CofradeDetalle",e),e.$inject=["$state","$filter","getCofradePrepService","getMapsPrepService"]}(),function(){"use strict";function e(e,t){function r(){return e.$promise.then(function(e){o.nextPage=e.next,o.cofrades=e.results}),t.$promise.then(function(e){o.nextPageBajas=e.next,o.cofradesBajas=e.results})}var o=this;o.cofrades=null,o.nextPage=null,o.cofradesBajas=null,o.nextPageBajas=null,o.selectedTab=0,r()}angular.module("app").controller("Cofrades",e),e.$inject=["cofradesPrepService","cofradesBajasPrepService"]}(),function(){"use strict";function e(){return{restrict:"A",link:function(e,t,r){var o=t[0];t.bind("scroll",function(){o.scrollTop+o.offsetHeight>=o.scrollHeight-5&&e.$emit("scrollDown")})}}}angular.module("app").directive("scrolly",e)}(),function(){"use strict";function e(){return function(e){e=e||"";for(var t="",r=0;r<e.length;r++)r>0&&r%4===0&&(t+=" "),t+=e[r];return t}}function t(){return function(e){e=e||"";var t="";return t=e.substr(0,4)+"-",t+=e.substr(4,4)+"-",t+=e.substr(8,2)+"-",t+=e.substr(10,10)}}function r(){return function(e){return e=e||"",e.substr(4,20)}}function o(){function e(e){for(var t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",r=[],o=0;o<e.length;o++){var n=t.indexOf(e[o]);r.push(0>n?"-":n)}return r.join("")}function t(e,t){for(var r=10,o=e.length,n=0,a=0;o>a;a+=r){var i=n+""+e.substr(a,r);n=i%t}return n}function r(e,t){for(e+="";e.length<t;)e="0"+e;return e}return function(o){var n="ES",a=o+e(n)+"00",i=t(a,97);return n+r(98-i,2)+o}}angular.module("app").filter("parseIban",e).filter("parseCC",t).filter("calcularIban",o).filter("calcularCC",r)}(),function(){"use strict";function e(){return function(e){return e.datosPersonales&&(e.datosPersonales.fechaNacimiento=new Date(e.datosPersonales.fechaNacimiento).toLocaleDateString(),e.datosPersonales.fechaInscripcion=new Date(e.datosPersonales.fechaInscripcion).toLocaleDateString()),e.fecha&&(e.fecha=new Date(e.fecha).toLocaleDateString()),e}}function t(){return function(e){var t=null;return e.datosPersonales?(t=e.datosPersonales.fechaNacimiento.split("/"),e.datosPersonales.fechaNacimiento=t[2]+"-"+t[1]+"-"+t[0],t=e.datosPersonales.fechaInscripcion.split("/"),e.datosPersonales.fechaInscripcion=t[2]+"-"+t[1]+"-"+t[0]):e.fecha?(t=e.fecha.split("/"),e.fecha=t[2]+"-"+t[1]+"-"+t[0]):e=new Date(e).toLocaleDateString(),e}}angular.module("app").filter("stringToDateFormat",e).filter("formatDates",t)}(),function(){"use strict";function e(){return function(t){var r=t instanceof Array;for(var o in t)null===t[o]?r?t.splice(o,1):delete t[o]:"object"==typeof t[o]&&e(t[o]);return t}}angular.module("app").filter("removeNulls",e)}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/aspirantes/:id.json:json",null,{query:{method:"GET",isArray:!0},get:{method:"GET",transformResponse:function(e,r){return t("stringToDateFormat")(angular.fromJson(e))}},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("formatDates")(t("removeNulls")(e)))}}})}return{aspirantesRest:r}}angular.module("app").factory("aspirantesService",e),e.$inject=["$resource","$filter"]}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/autoridades/:id.json:json",null,{query:{method:"GET",isArray:!0},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("removeNulls")(e))}}})}return{autoridadesRest:r}}angular.module("app").factory("autoridadesService",e),e.$inject=["$resource","$filter"]}(),function(){"use strict";function e(e,t,r){function o(){return e("http://127.0.0.1:5050/api/cofrades/:id.json:json",null,{query:{method:"GET",isArray:!1},get:{method:"GET",transformResponse:function(e,t){return r("stringToDateFormat")(angular.fromJson(e))}},save:{method:"POST",transformRequest:function(e,t){return angular.toJson(r("formatDates")(r("removeNulls")(e)))}}})}function n(){return e("http://127.0.0.1:5050/api/cofradesBajas/:id.json:json",null,{query:{method:"GET",isArray:!1}})}function a(e){return t.get("http://127.0.0.1:5050/api/calles/",{params:{calle:e}}).then(function(e){return angular.fromJson(e)})}function i(){return t.get("http://127.0.0.1:5050/api/registros/").then(function(e){return angular.fromJson(e)})}return{cofradesRest:o,cofradesBajasRest:n,getCalles:a,getRegistros:i}}angular.module("app").factory("cofradesService",e),e.$inject=["$resource","$http","$filter"]}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/costaleros/:id.json:json",null,{query:{method:"GET",isArray:!0},get:{method:"GET",transformResponse:function(e,r){return t("stringToDateFormat")(angular.fromJson(e))}},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("formatDates")(t("removeNulls")(e)))}}})}return{costalerosRest:r}}angular.module("app").factory("costalerosService",e),e.$inject=["$resource","$filter"]}(),function(){"use strict";function e(e,t){function r(){return e("http://127.0.0.1:5050/api/directivos/:id.json:json",null,{query:{method:"GET",isArray:!0},save:{method:"POST",transformRequest:function(e,r){return angular.toJson(t("removeNulls")(e))}}})}return{directivosRest:r}}angular.module("app").factory("directivosService",e),e.$inject=["$resource","$filter"]}(),function(){"use strict";function e(e){function t(t){return e.get("https://maps.googleapis.com/maps/api/geocode/json",{params:{address:t,key:"AIzaSyDC_OIDSl6curjCMCLyzn2yhMmg-er5knI"}}).then(function(e){return e})}return{geoCodingAPI:t}}angular.module("app").factory("mapasService",e),e.$inject=["$http"]}(),function(){"use strict";function e(e){function t(){return e("http://127.0.0.1:5050/api/sectores/:id.json:json",null,{get:{method:"GET",isArray:!0}})}return{sectoresRest:t}}angular.module("app").factory("sectoresService",e),e.$inject=["$resource"]}(),function(){"use strict";function e(e,t,r,o,n,a,i,c){function s(){a&&a.$promise.then(l)}function l(e){return h.costalero=e,h.cofradeSelected=h.costalero.cofrade,!0}function u(){window.history.back()}function d(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),c.cofradesRest().query(t).$promise.then(function(e){return e.results})}function f(e){h.costalero.cofrade=e?e.id:null}function p(t){t?(h.costalero.fecha=""===h.costalero.fecha?null:h.costalero.fecha,h.costalero.cofrade?i.costalerosRest().save(h.costalero,m,v):(e.costaleroForm.cofrade.$error.required=!0,g())):g()}function m(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),n.go("costaleros")}function v(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(r[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(r[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,s()}angular.module("app").controller("CostaleroAddModify",e),e.$inject=["$scope","$filter","$document","$mdToast","$state","getCostaleroPrepService","costalerosService","cofradesService"]}(),function(){"use strict";function e(e,t){function r(){return t.$promise.then(function(e){n.costalero=e})}function o(t,r){e.go("costalerosCambios",{costaleroId:t})}var n=this;n.modifyCostalero=o,r()}angular.module("app").controller("CostaleroDetalle",e),e.$inject=["$state","getCostaleroPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){r.costaleros=e})}var r=this;r.costaleros=null,t()}angular.module("app").controller("Costaleros",e),e.$inject=["costalerosPrepService"]}(),function(){"use strict";function e(e,t,r,o,n,a,i){function c(){n?n.$promise.then(s):l()}function s(e){return h.directivo=e,!0}function l(){h.newCofrade=!0,h.directivo={cofrade:null,fecha:(new Date).toLocaleDateString()}}function u(){window.history.back()}function d(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),i.cofradesRest().query(t).$promise.then(function(e){return e.results})}function f(e){h.directivo.cofrade=e?e.id:null}function p(t){t?h.directivo.cofrade?(h.directivo.cofrade=h.directivo.cofrade.id?h.directivo.cofrade.id:h.directivo.cofrade,a.directivosRest().save(h.directivo,m,v)):(e.directivoForm.cofrade.$error.required=!0,g()):g()}function m(e){r.show(r.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),o.go("directivos")}function v(e){r.show(r.simple().content("Error al guardar!!").position("top right").parent(t[0].querySelector("#toastBounds")).hideDelay(3e3))}function g(){r.show(r.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(t[0].querySelector("#toastBounds")).position("top right"))}var h=this;h.newCofrade=!1,h.backState=u,h.querySearch=d,h.selectedItemChange=f,h.guardar=p,c()}angular.module("app").controller("DirectivoAddModify",e),e.$inject=["$scope","$document","$mdToast","$state","getDirectivoPrepService","directivosService","cofradesService"]}(),function(){"use strict";function e(e,t){function r(){return t.$promise.then(function(e){n.directivo=e})}function o(t,r){e.go("directivosCambios",{directivoId:t})}var n=this;n.modifyDirectivo=o,r()}angular.module("app").controller("DirectivoDetalle",e),e.$inject=["$state","getDirectivoPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){r.directivos=e})}var r=this;r.directivos=null,t()}angular.module("app").controller("Directivos",e),e.$inject=["directivosPrepService"]}(),function(){"use strict";function e(e,t,r,o,n,a,i,c,s){function l(){i?i.$promise.then(u):d()}function u(e){return P.sector=e[0],P.cofradeSelected=P.sector.cofrade,P.originSector=P.sector.numeroSector,"new"===a.calle?(P.newCalle=!0,P.indexCalle=P.sector.calles.length):P.indexCalle=P.sector.calles.indexOf(a.calle)>-1?P.sector.calles.indexOf(a.calle):null,!0}function d(){P.newEncargado=!0,P.sector={cofrade:null}}function f(){window.history.back()}function p(e){var t={};return isNaN(e)?t.nombre=e:isNaN(e)||(t.numeroOrden=e),s.cofradesRest().query(t).$promise.then(function(e){return e.results})}function m(e){P.sector.cofrade=e?e.id:null}function v(t){t?P.sector.cofrade?P.sector.numeroSector===P.originSector||P.newEncargado?g():h():(e.sectorForm.cofrade.$error.required=!0,C()):C()}function g(){c.sectoresRest().save(P.sector,$,S)}function h(){c.sectoresRest().get({sector:P.sector.numeroSector}).$promise.then(function(e){return e[0]?(e[0].cofrade=e[0].cofrade.id,e[0].calles.push(P.sector.calles[P.indexCalle]),void e[0].$save(null,function(){P.sector.calles.splice(P.indexCalle,1),P.sector.numeroSector=P.originSector,g()},S)):void o.show(o.simple().content("No existe ese sector").position("top right").parent(r[0].querySelector("#toastBounds")).hideDelay(3e3))})}function $(e){o.show(o.simple().content("Guardado con éxito!!").position("top right").hideDelay(3e3)),n.go("sectores")}function S(e){o.show(o.simple().content("Error al guardar!!").position("top right").parent(r[0].querySelector("#toastBounds")).hideDelay(3e3))}function C(){o.show(o.simple().content("Existen errores en el formulario").action("OK").highlightAction(!1).parent(r[0].querySelector("#toastBounds")).position("top right"))}var P=this;P.newEncargado=!1,P.newCalle=!1,P.indexCalle=null,P.backState=f,P.querySearch=p,P.selectedItemChange=m,P.guardar=v,l()}angular.module("app").controller("SectorAddModify",e),e.$inject=["$scope","$filter","$document","$mdToast","$state","$stateParams","getSectorPrepService","sectoresService","cofradesService"]}(),function(){"use strict";function e(e,t,r){function o(){return t.$promise.then(function(e){a.sector=e,a.maps=r})}function n(t,r){e.go("sectoresCambios",{sectorId:t})}var a=this;a.modifySector=n,o()}angular.module("app").controller("SectorDetalle",e),e.$inject=["$state","getSectorPrepService","getMapsPrepService"]}(),function(){"use strict";function e(e){function t(){return e.$promise.then(function(e){r.sectores=e})}var r=this;r.sectores=null,t()}angular.module("app").controller("Sectores",e),e.$inject=["sectoresPrepService"]}(),function(){"use strict";function e(e){function t(t,r){e.go("aspirantesDetalle",{aspiranteId:t})}function r(t,r){r.stopPropagation(),e.go("aspirantesCambios",{aspiranteId:t})}var o=this;o.modifyAspirante=r,o.goToAspirante=t}angular.module("app").controller("ListaAspirantes",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/aspirantes/list/aspirantes.directive.html",scope:{aspirantes:"=aspirantes"},link:function(e,t){e.$watch("vm.aspirantes",function(t){t&&(e.vm.aspirantesShort=e.vm.aspirantes.map(function(e){var t={id:e.id,fecha:e.fecha};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaAspirantes",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaAspirantes",e)}(),function(){"use strict";function e(e,t,r){function o(e,r){r.stopPropagation();var o=t.confirm().title("Eliminar aspirante").content("¿Está seguro que desea eliminar este aspirante?<br>Perderá su antiguedad.").ariaLabel("Eliminar aspirante").targetEvent(r).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(o).then(function(){n(e)})}function n(t){var o=r.aspirantesRest().get({id:t},function(){o.$delete({id:t}).then(function(){"aspirantes"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("aspirantes")})})}var a=this;a.removeAspirante=o}angular.module("app").controller("RemoveAspirante",e),e.$inject=["$state","$mdDialog","aspirantesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/aspirantes/remove/removeAspirante.directive.html",scope:{aspiranteId:"=aspirante"},controller:"RemoveAspirante",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeAspirante",e)}(),function(){"use strict";function e(e){function t(t,r){e.go("autoridadesDetalle",{autoridadId:t})}function r(t,r){r.stopPropagation(),
e.go("autoridadesCambios",{autoridadId:t})}var o=this;o.modifyAutoridad=r,o.goToAutoridad=t}angular.module("app").controller("ListaAutoridades",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/autoridades/list/autoridades.directive.html",scope:{autoridades:"=autoridades"},controller:"ListaAutoridades",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaAutoridades",e)}(),function(){"use strict";function e(e,t,r){function o(e,r){r.stopPropagation();var o=t.confirm().title("Eliminar autoridad").content("¿Está seguro que desea eliminar este autoridad?").ariaLabel("Eliminar autoridad").targetEvent(r).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(o).then(function(){n(e)})}function n(t){var o=r.autoridadesRest().get({id:t},function(){o.$delete({id:t}).then(function(){"autoridades"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("autoridades")})})}var a=this;a.removeAutoridad=o}angular.module("app").controller("RemoveAutoridad",e),e.$inject=["$state","$mdDialog","autoridadesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/autoridades/remove/removeAutoridad.directive.html",scope:{autoridadId:"=autoridad"},controller:"RemoveAutoridad",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeAutoridad",e)}(),function(){"use strict";function e(e,t,r,o){function n(){p.bajas?i():a()}function a(){if(p.nextPage){var e={page:p.nextPage};p.buscar&&(e[p.filtro]=p.buscar),o.cofradesRest().query(e,function(e){p.nextPage=e.next,p.cofrades=p.cofrades.concat(e.results)})}}function i(){if(p.nextPageBajas){var e={page:p.nextPageBajas};p.buscar&&(e[p.filtro]=p.buscar),o.cofradesBajasRest().query(e,function(e){p.nextPageBajas=e.next,p.cofradesBajas=p.cofradesBajas.concat(e.results)})}}function c(){p.bajas?l():s()}function s(){var e={};e[p.filtro]=p.buscar,o.cofradesRest().query(e,function(e){p.nextPage=e.next,p.cofrades=e.results})}function l(){var e={};e[p.filtro]=p.buscar,o.cofradesBajasRest().query(e,function(e){p.nextPageBajas=e.next,p.cofradesBajas=e.results})}function u(){p.buscar=null,p.typeInput="nombre"===p.filtro?"text":"number",p.search()}function d(e,t){r.go("cofradesDetalle",{cofradeId:e})}function f(e,t){t.stopPropagation(),r.go("cofradesCambios",{cofradeId:e})}var p=this;p.filtro="nombre",p.typeInput="text",p.buscar=null,p.search=c,p.radioChange=u,p.goToCofrade=d,p.modifyCofrade=f;var m=e.$on("scrollDown",n);t.$on("$destroy",function(){m(),m=null})}angular.module("app").controller("ListaCofrades",e),e.$inject=["$rootScope","$scope","$state","cofradesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/list/cofrades.directive.html",scope:{cofrades:"=cofrades",nextPage:"=page",cofradesBajas:"=cofradesBajas",nextPageBajas:"=pageBajas"},controller:"ListaCofrades",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaCofrades",e)}(),function(){"use strict";function e(e,t){function r(e,r){r.stopPropagation(),t.show({templateUrl:"./templates/directives/cofrades/remove/dialogTmpl/removeCofrade.tmpl.html",locals:{id:e},controller:"RemoveCofradeTmpl",controllerAs:"vm",bindToController:!0,targetEvent:r,clickOutsideToClose:!0}).then(function(){})}var o=this;o.removeCofrade=r}angular.module("app").controller("RemoveCofrade",e),e.$inject=["$state","$mdDialog"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/remove/removeCofrade.directive.html",scope:{cofradeId:"=cofrade"},controller:"RemoveCofrade",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeCofrade",e)}(),function(){"use strict";function e(e,t,r){function o(e,r){r.stopPropagation();var o=t.confirm().title("Restaurar cofrade").content("¿Está seguro que desea restaurar este cofrade?<br>Su número de Cofrade se calculará de nuevo.").ariaLabel("Restaurar cofrade").targetEvent(r).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(o).then(function(){n(e)})}function n(t){var o=r.cofradesRest().get({id:t},function(){o.baja=null,o.$save({updateNumeroCofrade:!0}).then(function(){"cofrades"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("cofrades")})})}var a=this;a.restoreCofrade=o}angular.module("app").controller("RestoreCofrade",e),e.$inject=["$state","$mdDialog","cofradesService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/cofrades/restore/restoreCofrade.directive.html",scope:{cofradeId:"=cofrade"},controller:"RestoreCofrade",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("restoreCofrade",e)}(),function(){"use strict";function e(e){function t(t,r){e.go("costalerosDetalle",{costaleroId:t})}function r(t,r){r.stopPropagation(),e.go("costalerosCambios",{costaleroId:t})}var o=this;o.modifyCostalero=r,o.goToCostalero=t}angular.module("app").controller("ListaCostaleros",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/costaleros/list/costaleros.directive.html",scope:{costaleros:"=costaleros"},link:function(e,t){e.$watch("vm.costaleros",function(t){t&&(e.vm.costalerosShort=e.vm.costaleros.map(function(e){var t={id:e.id,sitio:e.sitio};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaCostaleros",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaCostaleros",e)}(),function(){"use strict";function e(e,t,r){function o(e,r){r.stopPropagation();var o=t.confirm().title("Eliminar costalero").content("¿Está seguro que desea eliminar este costalero?<br>Dejará su sitio libre.").ariaLabel("Eliminar costalero").targetEvent(r).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(o).then(function(){n(e)})}function n(t){var o=r.costalerosRest().get({id:t},function(){o.cofrade=null,o.talla=null,o.fecha=null,o.$save().then(function(){"costaleros"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("costaleros")})})}var a=this;a.removeCostalero=o}angular.module("app").controller("RemoveCostalero",e),e.$inject=["$state","$mdDialog","costalerosService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/costaleros/remove/removeCostalero.directive.html",scope:{costaleroId:"=costalero"},controller:"RemoveCostalero",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeCostalero",e)}(),function(){"use strict";function e(e){function t(t,r){e.go("directivosDetalle",{directivoId:t})}function r(t,r){r.stopPropagation(),e.go("directivosCambios",{directivoId:t})}var o=this;o.modifyDirectivo=r,o.goToDirectivo=t}angular.module("app").controller("ListaDirectivos",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/directivos/list/directivos.directive.html",scope:{directivos:"=directivos"},link:function(e,t){e.$watch("vm.directivos",function(t){t&&(e.vm.directivosShort=e.vm.directivos.map(function(e){var t={id:e.id,posicion:e.posicion};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaDirectivos",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaDirectivos",e)}(),function(){"use strict";function e(e,t,r){function o(e,r){r.stopPropagation();var o=t.confirm().title("Eliminar directivo").content("¿Está seguro que desea eliminar este directivo?").ariaLabel("Eliminar directivo").targetEvent(r).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(o).then(function(){n(e)})}function n(t){var o=r.directivosRest().get({id:t},function(){o.$delete({id:t}).then(function(){"directivos"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("directivos")})})}var a=this;a.removeDirectivo=o}angular.module("app").controller("RemoveDirectivo",e),e.$inject=["$state","$mdDialog","directivosService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/directivos/remove/removeDirectivo.directive.html",scope:{directivoId:"=directivo"},controller:"RemoveDirectivo",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeDirectivo",e)}(),function(){"use strict";function e(e){function t(e,t){e="callesSector"+e,angular.element(document.getElementById(e)).toggleClass("ocultar")}function r(t,r){r.stopPropagation(),e.go("sectoresCambios",{sectorId:t})}function o(t,r,o){o.stopPropagation(),e.go("sectoresCambios",{sectorId:t,calle:r})}function n(t,r){r.stopPropagation(),e.go("sectoresCambios",{sectorId:t,calle:"new"})}var a=this;a.modifySector=r,a.modifyCalle=o,a.addCalle=n,a.showCalles=t}angular.module("app").controller("ListaSectores",e),e.$inject=["$state"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/sectores/list/sectores.directive.html",scope:{sectores:"=sectores"},link:function(e,t){e.$watch("vm.sectores",function(t){t&&(e.vm.sectoresShort=e.vm.sectores.map(function(e){var t={id:e.id,numeroSector:e.numeroSector,calles:e.calles};return e.cofrade&&(t.numeroOrden=e.cofrade.numeroOrden,t.nombre=e.cofrade.datosPersonales.nombre+" "+e.cofrade.datosPersonales.apellido1+" "+e.cofrade.datosPersonales.apellido2),t}))},!0)},controller:"ListaSectores",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("listaSectores",e)}(),function(){"use strict";function e(e,t,r,o){function n(e,r){r.stopPropagation();var o=t.confirm().title("Eliminar sector").content("¿Está seguro que desea eliminar este sector?").ariaLabel("Eliminar sector").targetEvent(r).ok("Aceptar").cancel("Cancelar").clickOutsideToClose(!0);t.show(o).then(function(){a(e)})}function a(t){var n=o.sectoresRest().get({id:t},function(){0!==n[0].calles.length?r.show(r.simple().content("No se puede eliminar un sector con calles asignadas").position("top right").hideDelay(3e3)):n[0].$delete({id:t}).then(function(){"sectores"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("sectores")})})}var i=this;i.removeSector=n}angular.module("app").controller("RemoveSector",e),e.$inject=["$state","$mdDialog","$mdToast","sectoresService"]}(),function(){"use strict";function e(){return{restrict:"E",templateUrl:"./templates/directives/sectores/remove/removeSector.directive.html",scope:{sectorId:"=sector"},controller:"RemoveSector",controllerAs:"vm",bindToController:!0}}angular.module("app").directive("removeSector",e)}(),function(){"use strict";function e(e,t,r){function o(){t.cancel()}function n(t){var o=r.cofradesRest().get({id:t},function(){o.baja={motivo:a.motivoBaja,fechaBaja:(new Date).toLocaleDateString()},o.numeroCofrade=null,o.$save({updateNumeroCofrade:!0}).then(function(){a.closeDialog(),"cofrades"===e.current.name?e.transitionTo(e.current,null,{reload:!0,inherit:!1,notify:!0}):e.go("cofrades")})})}var a=this;a.closeDialog=o,a.removeEndCofrade=n}angular.module("app").controller("RemoveCofradeTmpl",e),e.$inject=["$state","$mdDialog","cofradesService"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5pbml0Lm1vZHVsZS5qcyIsImFwcC5sb2FkaW5nLmpzIiwiYWxsLm1pbi5qcyIsImFwcC5tYXAuanMiLCJhcHAucGlja2VyRGF0ZS5qcyIsImFwcC5yb3V0ZXMuanMiLCJhcHAudGhlbWUuanMiLCJhc3BpcmFudGVzL2FzcGlyYW50ZXMucm91dGVzLmpzIiwiYXV0b3JpZGFkZXMvYXV0b3JpZGFkZXMucm91dGVzLmpzIiwiY29mcmFkZXMvY29mcmFkZXMucm91dGVzLmpzIiwiY29zdGFsZXJvcy9jb3N0YWxlcm9zLnJvdXRlcy5qcyIsImRpcmVjdGl2b3MvZGlyZWN0aXZvcy5yb3V0ZXMuanMiLCJpbnRlcmZhei9hcHAuY29udHJvbGxlci5qcyIsInNlY3RvcmVzL3NlY3RvcmVzLnJvdXRlcy5qcyIsImFzcGlyYW50ZXMvYWRkTW9kaWZ5L2FzcGlyYW50ZUFkZE1vZGlmeS5jb250cm9sbGVyLmpzIiwiYXNwaXJhbnRlcy9kZXRhaWwvYXNwaXJhbnRlRGV0YWxsZS5jb250cm9sbGVyLmpzIiwiYXNwaXJhbnRlcy9saXN0L2FzcGlyYW50ZXMuY29udHJvbGxlci5qcyIsImF1dG9yaWRhZGVzL2FkZE1vZGlmeS9hdXRvcmlkYWRBZGRNb2RpZnkuY29udHJvbGxlci5qcyIsImF1dG9yaWRhZGVzL2RldGFpbC9hdXRvcmlkYWREZXRhbGxlLmNvbnRyb2xsZXIuanMiLCJhdXRvcmlkYWRlcy9saXN0L2F1dG9yaWRhZGVzLmNvbnRyb2xsZXIuanMiLCJjb2ZyYWRlcy9hZGRNb2RpZnkvY29mcmFkZUFkZE1vZGlmeS5jb250cm9sbGVyLmpzIiwiY29mcmFkZXMvZGV0YWlsL2NvZnJhZGVEZXRhbGxlLmNvbnRyb2xsZXIuanMiLCJjb2ZyYWRlcy9saXN0L2NvZnJhZGVzLmNvbnRyb2xsZXIuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvc2Nyb2xseS5kaXJlY3RpdmUuanMiLCJjb21tb25zL2ZpbHRlcnMvcGFyc2VDdWVudGEuZmlsdGVyLmpzIiwiY29tbW9ucy9maWx0ZXJzL3BhcnNlRGF0ZS5maWx0ZXIuanMiLCJjb21tb25zL2ZpbHRlcnMvcmVtb3ZlTnVsbHMuZmlsdGVyLmpzIiwiY29tbW9ucy9zZXJ2aWNlcy9hc3BpcmFudGVzLnNlcnZpY2UuanMiLCJjb21tb25zL3NlcnZpY2VzL2F1dG9yaWRhZGVzLnNlcnZpY2UuanMiLCJjb21tb25zL3NlcnZpY2VzL2NvZnJhZGVzLnNlcnZpY2UuanMiLCJjb21tb25zL3NlcnZpY2VzL2Nvc3RhbGVyb3Muc2VydmljZS5qcyIsImNvbW1vbnMvc2VydmljZXMvZGlyZWN0aXZvcy5zZXJ2aWNlLmpzIiwiY29tbW9ucy9zZXJ2aWNlcy9tYXBhcy5zZXJ2aWNlLmpzIiwiY29tbW9ucy9zZXJ2aWNlcy9zZWN0b3Jlcy5zZXJ2aWNlLmpzIiwiY29zdGFsZXJvcy9hZGRNb2RpZnkvY29zdGFsZXJvQWRkTW9kaWZ5LmNvbnRyb2xsZXIuanMiLCJjb3N0YWxlcm9zL2RldGFpbC9jb3N0YWxlcm9EZXRhbGxlLmNvbnRyb2xsZXIuanMiLCJjb3N0YWxlcm9zL2xpc3QvY29zdGFsZXJvcy5jb250cm9sbGVyLmpzIiwiZGlyZWN0aXZvcy9hZGRNb2RpZnkvZGlyZWN0aXZvQWRkTW9kaWZ5LmNvbnRyb2xsZXIuanMiLCJkaXJlY3Rpdm9zL2RldGFpbC9kaXJlY3Rpdm9EZXRhbGxlLmNvbnRyb2xsZXIuanMiLCJkaXJlY3Rpdm9zL2xpc3QvZGlyZWN0aXZvcy5jb250cm9sbGVyLmpzIiwic2VjdG9yZXMvYWRkTW9kaWZ5L3NlY3RvckFkZE1vZGlmeS5jb250cm9sbGVyLmpzIiwic2VjdG9yZXMvZGV0YWlsL3NlY3RvckRldGFsbGUuY29udHJvbGxlci5qcyIsInNlY3RvcmVzL2xpc3Qvc2VjdG9yZXMuY29udHJvbGxlci5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9hc3BpcmFudGVzL2xpc3QvYXNwaXJhbnRlcy5jb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9hc3BpcmFudGVzL2xpc3QvYXNwaXJhbnRlcy5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvYXNwaXJhbnRlcy9yZW1vdmUvcmVtb3ZlQXNwaXJhbnRlLmNvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2FzcGlyYW50ZXMvcmVtb3ZlL3JlbW92ZUFzcGlyYW50ZS5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvYXV0b3JpZGFkZXMvbGlzdC9hdXRvcmlkYWRlcy5jb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9hdXRvcmlkYWRlcy9saXN0L2F1dG9yaWRhZGVzLmRpcmVjdGl2ZS5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9hdXRvcmlkYWRlcy9yZW1vdmUvcmVtb3ZlQXV0b3JpZGFkLmNvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2F1dG9yaWRhZGVzL3JlbW92ZS9yZW1vdmVBdXRvcmlkYWQuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2NvZnJhZGVzL2xpc3QvY29mcmFkZXMuY29udHJvbGxlci5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvY29mcmFkZXMvbGlzdC9jb2ZyYWRlcy5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvY29mcmFkZXMvcmVtb3ZlL3JlbW92ZUNvZnJhZGUuY29udHJvbGxlci5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvY29mcmFkZXMvcmVtb3ZlL3JlbW92ZUNvZnJhZGUuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2NvZnJhZGVzL3Jlc3RvcmUvcmVzdG9yZUNvZnJhZGUuY29udHJvbGxlci5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvY29mcmFkZXMvcmVzdG9yZS9yZXN0b3JlQ29mcmFkZS5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvY29zdGFsZXJvcy9saXN0L2Nvc3RhbGVyb3MuY29udHJvbGxlci5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvY29zdGFsZXJvcy9saXN0L2Nvc3RhbGVyb3MuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2Nvc3RhbGVyb3MvcmVtb3ZlL3JlbW92ZUNvc3RhbGVyby5jb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9jb3N0YWxlcm9zL3JlbW92ZS9yZW1vdmVDb3N0YWxlcm8uZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2RpcmVjdGl2b3MvbGlzdC9kaXJlY3Rpdm9zLmNvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL2RpcmVjdGl2b3MvbGlzdC9kaXJlY3Rpdm9zLmRpcmVjdGl2ZS5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9kaXJlY3Rpdm9zL3JlbW92ZS9yZW1vdmVEaXJlY3Rpdm8uY29udHJvbGxlci5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvZGlyZWN0aXZvcy9yZW1vdmUvcmVtb3ZlRGlyZWN0aXZvLmRpcmVjdGl2ZS5qcyIsImNvbW1vbnMvZGlyZWN0aXZlcy9zZWN0b3Jlcy9saXN0L3NlY3RvcmVzLmNvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL3NlY3RvcmVzL2xpc3Qvc2VjdG9yZXMuZGlyZWN0aXZlLmpzIiwiY29tbW9ucy9kaXJlY3RpdmVzL3NlY3RvcmVzL3JlbW92ZS9yZW1vdmVTZWN0b3IuY29udHJvbGxlci5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvc2VjdG9yZXMvcmVtb3ZlL3JlbW92ZVNlY3Rvci5kaXJlY3RpdmUuanMiLCJjb21tb25zL2RpcmVjdGl2ZXMvY29mcmFkZXMvcmVtb3ZlL2RpYWxvZ1RtcGwvcmVtb3ZlQ29mcmFkZS5jb250cm9sbGVyLnRtcGwuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImxvYWRpbmdTcGlubmVyIiwiJGh0dHBQcm92aWRlciIsImludGVyY2VwdG9ycyIsInB1c2giLCJteUh0dHBJbnRlcmNlcHRvciIsIiRxIiwibG9hZFNjcmVlbiIsImVsZW1lbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZXF1ZXN0IiwiY29uZmlnIiwibWV0aG9kIiwiY3NzIiwicmVxdWVzdEVycm9yIiwicmVqZWN0aW9uIiwicmVqZWN0IiwicmVzcG9uc2UiLCJyZXNwb25zZUVycm9yIiwiZmFjdG9yeSIsIiRpbmplY3QiLCJnb29nbGVNYXBBUEkiLCJ1aUdtYXBHb29nbGVNYXBBcGlQcm92aWRlciIsImNvbmZpZ3VyZSIsImxpYnJhcmllcyIsImRhdGVQaWNrZXJDb25maWciLCIkbWREYXRlTG9jYWxlUHJvdmlkZXIiLCJtb250aHMiLCJzaG9ydE1vbnRocyIsImRheXMiLCJzaG9ydERheXMiLCJmaXJzdERheU9mV2VlayIsInBhcnNlRGF0ZSIsImRhdGVTdHJpbmciLCJEYXRlIiwiZm9ybWF0RGF0ZSIsImRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGUiLCJ0aGVtZUFuZ3VsYXJNYXRlcmlhbCIsIiRtZFRoZW1pbmdQcm92aWRlciIsInRlbXBsYXRlUHJvdmlkZXIiLCIkdGVtcGxhdGVDYWNoZSIsImdldCIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJyZXNvbHZlIiwiYXNwaXJhbnRlc1ByZXBTZXJ2aWNlIiwiZ2V0QXNwaXJhbnRlUHJlcFNlcnZpY2UiLCJhc3BpcmFudGVzU2VydmljZSIsImFzcGlyYW50ZXNSZXN0IiwicXVlcnkiLCIkc3RhdGVQYXJhbXMiLCJpZCIsImFzcGlyYW50ZUlkIiwiYXV0b3JpZGFkZXNQcmVwU2VydmljZSIsImdldEF1dG9yaWRhZFByZXBTZXJ2aWNlIiwiZ2V0TWFwc1ByZXBTZXJ2aWNlIiwiYXV0b3JpZGFkZXNTZXJ2aWNlIiwiYXV0b3JpZGFkZXNSZXN0IiwiYXV0b3JpZGFkSWQiLCJ1aUdtYXBHb29nbGVNYXBBcGkiLCJtYXBhc1NlcnZpY2UiLCIkcHJvbWlzZSIsInRoZW4iLCJkYXRhIiwiYWRkcmVzcyIsImRpcmVjY2lvbiIsImNhbGxlIiwibnVtZXJvIiwibXVuaWNpcGlvIiwicHJvdmluY2lhIiwiY3AiLCJnZW9Db2RpbmdBUEkiLCJyZXN1bHRzIiwibGVuZ3RoIiwiY29vcmRpbmF0ZXMiLCJnZW9tZXRyeSIsImxvY2F0aW9uIiwibWFwcyIsImNvb3JkIiwibGF0aXR1ZGUiLCJsYXQiLCJsb25naXR1ZGUiLCJsbmciLCJtYXJrZXIiLCJ6b29tIiwiY29mcmFkZXNQcmVwU2VydmljZSIsImNvZnJhZGVzQmFqYXNQcmVwU2VydmljZSIsImdldENvZnJhZGVQcmVwU2VydmljZSIsImNvZnJhZGVzU2VydmljZSIsImNvZnJhZGVzUmVzdCIsImNvZnJhZGVzQmFqYXNSZXN0IiwiY29mcmFkZUlkIiwiZGF0b3NQZXJzb25hbGVzIiwiY29zdGFsZXJvc1ByZXBTZXJ2aWNlIiwiZ2V0Q29zdGFsZXJvUHJlcFNlcnZpY2UiLCJjb3N0YWxlcm9zU2VydmljZSIsImNvc3RhbGVyb3NSZXN0IiwiY29zdGFsZXJvSWQiLCJkaXJlY3Rpdm9zUHJlcFNlcnZpY2UiLCJnZXREaXJlY3Rpdm9QcmVwU2VydmljZSIsImRpcmVjdGl2b3NTZXJ2aWNlIiwiZGlyZWN0aXZvc1Jlc3QiLCJkaXJlY3Rpdm9JZCIsIkFwcEN0cmwiLCIkbWRTaWRlbmF2IiwiJHN0YXRlIiwidG9nZ2xlU2lkZW5hdiIsIm1lbnVJZCIsInRvZ2dsZSIsIm5hdmlnYXRlVG8iLCJ0byIsImdvIiwidm0iLCJ0aGlzIiwic2VjdG9yZXNQcmVwU2VydmljZSIsImdldFNlY3RvclByZXBTZXJ2aWNlIiwic2VjdG9yZXNTZXJ2aWNlIiwic2VjdG9yZXNSZXN0Iiwic2VjdG9ySWQiLCJBc3BpcmFudGVBZGRNb2RpZnkiLCIkc2NvcGUiLCIkZG9jdW1lbnQiLCIkbWRUb2FzdCIsImFjdGl2YXRlIiwiaW5pdEFzcGlyYW50ZSIsIm5ld0FzcGlyYW50ZSIsImFzcGlyYW50ZSIsIm5ld0NvZnJhZGUiLCJjb2ZyYWRlIiwiZmVjaGEiLCJiYWNrU3RhdGUiLCJ3aW5kb3ciLCJoaXN0b3J5IiwiYmFjayIsInF1ZXJ5U2VhcmNoIiwiZmlsdHJvIiwiaXNOYU4iLCJub21icmUiLCJudW1lcm9PcmRlbiIsInNlbGVjdGVkSXRlbUNoYW5nZSIsIml0ZW0iLCJndWFyZGFyIiwiaXNWYWxpZCIsInNhdmUiLCJndWFyZGFyU3VjY2VzcyIsImd1YXJkYXJFcnJvciIsImFzcGlyYW50ZUZvcm0iLCIkZXJyb3IiLCJyZXF1aXJlZCIsInNob3dBY3Rpb25Ub2FzdCIsInNob3ciLCJzaW1wbGUiLCJjb250ZW50IiwicG9zaXRpb24iLCJoaWRlRGVsYXkiLCJwYXJlbnQiLCJhY3Rpb24iLCJoaWdobGlnaHRBY3Rpb24iLCJBc3BpcmFudGVEZXRhbGxlIiwibW9kaWZ5QXNwaXJhbnRlIiwiZXZlbnQiLCJBc3BpcmFudGVzIiwiYXNwaXJhbnRlcyIsIkF1dG9yaWRhZEFkZE1vZGlmeSIsImluaXRBdXRvcmlkYWQiLCJuZXdBdXRvcmlkYWQiLCJhdXRvcmlkYWQiLCJjYWxsZVNlbGVjdGVkIiwiZ2V0Q2FsbGVzIiwic2VhcmNoVGV4dCIsIkF1dG9yaWRhZERldGFsbGUiLCJtb2RpZnlBdXRvcmlkYWQiLCJBdXRvcmlkYWRlcyIsImF1dG9yaWRhZGVzIiwiQ29mcmFkZUFkZE1vZGlmeSIsIiRmaWx0ZXIiLCJpbml0Q29mcmFkZSIsImdldFJlZ2lzdHJvcyIsIm51bWVyb0NvZnJhZGUiLCJmZWNoYU5hY2ltaWVudG8iLCJmZWNoYUluc2NyaXBjaW9uIiwiZGF0b3NGaW5hbmNpZXJvcyIsImN1ZW50YSIsImRldWRhIiwic2VhcmNoU2VjdG9yIiwic2VjdG9yIiwibnVldmFDYWxsZSIsIm51bWVyb1NlY3RvciIsImNhbGN1bGFyQ0MiLCJpYmFuIiwiY2MiLCJjYWxjdWxhckliYW4iLCJndWFyZGFyQ29mcmFkZSIsIkNvZnJhZGVSZXNvdXJjZSIsImd1YXJkYXJDYWxsZSIsInNlY3RvclJlc291cmNlIiwiY2FsbGVzIiwiJHNhdmUiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V4byIsIkNvZnJhZGVEZXRhbGxlIiwibW9kaWZ5Q29mcmFkZSIsIkNvZnJhZGVzIiwibmV4dFBhZ2UiLCJuZXh0IiwiY29mcmFkZXMiLCJuZXh0UGFnZUJhamFzIiwiY29mcmFkZXNCYWphcyIsInNlbGVjdGVkVGFiIiwic2Nyb2xseSIsInJlc3RyaWN0IiwibGluayIsIiRyb290U2NvcGUiLCJhdHRycyIsInJhdyIsImJpbmQiLCJzY3JvbGxUb3AiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCIkZW1pdCIsImRpcmVjdGl2ZSIsInBhcnNlSWJhbiIsImZvcm1hdHRlZEliYW4iLCJpIiwicGFyc2VDQyIsImZvcm1hdHRlZENDIiwic3Vic3RyIiwidmFsb3JDaWZyYXMiLCJjaWZyYXMiLCJMRVRSQVMiLCJpdGVtcyIsInBvc2ljaW9uIiwiaW5kZXhPZiIsImpvaW4iLCJtb2R1bG8iLCJkaXZpc29yIiwiQ1VFTlRBIiwibGFyZ28iLCJyZXN0byIsImRpdmlkZW5kbyIsImNlcm9zSXpxdWllcmRhIiwiY2NjIiwicGFpcyIsImZpbHRlciIsInN0cmluZ1RvRGF0ZUZvcm1hdCIsImZvcm1hdERhdGVzIiwic3BsaXQiLCJyZW1vdmVOdWxscyIsIm9iaiIsImlzQXJyYXkiLCJBcnJheSIsImsiLCJzcGxpY2UiLCIkcmVzb3VyY2UiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImhlYWRlcnNHZXR0ZXIiLCJmcm9tSnNvbiIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0b0pzb24iLCIkaHR0cCIsInBhcmFtcyIsImtleSIsIkNvc3RhbGVyb0FkZE1vZGlmeSIsImluaXRDb3N0YWxlcm8iLCJjb3N0YWxlcm8iLCJjb2ZyYWRlU2VsZWN0ZWQiLCJjb3N0YWxlcm9Gb3JtIiwiQ29zdGFsZXJvRGV0YWxsZSIsIm1vZGlmeUNvc3RhbGVybyIsIkNvc3RhbGVyb3MiLCJjb3N0YWxlcm9zIiwiRGlyZWN0aXZvQWRkTW9kaWZ5IiwiaW5pdERpcmVjdGl2byIsIm5ld0RpcmVjdGl2byIsImRpcmVjdGl2byIsImRpcmVjdGl2b0Zvcm0iLCJEaXJlY3Rpdm9EZXRhbGxlIiwibW9kaWZ5RGlyZWN0aXZvIiwiRGlyZWN0aXZvcyIsImRpcmVjdGl2b3MiLCJTZWN0b3JBZGRNb2RpZnkiLCJpbml0U2VjdG9yIiwibmV3RW5jYXJnYWRvIiwib3JpZ2luU2VjdG9yIiwibmV3Q2FsbGUiLCJpbmRleENhbGxlIiwiZ3VhcmRhclNlY3RvciIsImd1YXJkYXJDYW1iaW9TZWN0b3IiLCJzZWN0b3JGb3JtIiwiU2VjdG9yRGV0YWxsZSIsIm1vZGlmeVNlY3RvciIsIlNlY3RvcmVzIiwic2VjdG9yZXMiLCJMaXN0YUFzcGlyYW50ZXMiLCJnb1RvQXNwaXJhbnRlIiwic3RvcFByb3BhZ2F0aW9uIiwibGlzdGFBc3BpcmFudGVzIiwidGVtcGxhdGVVcmwiLCJzY29wZSIsIiR3YXRjaCIsIm5ld1ZhbCIsImFzcGlyYW50ZXNTaG9ydCIsIm1hcCIsImF1eCIsImFwZWxsaWRvMSIsImFwZWxsaWRvMiIsImJpbmRUb0NvbnRyb2xsZXIiLCJSZW1vdmVBc3BpcmFudGUiLCIkbWREaWFsb2ciLCJyZW1vdmVBc3BpcmFudGUiLCJyZW1vdmVEaWFsb2ciLCJjb25maXJtIiwidGl0bGUiLCJhcmlhTGFiZWwiLCJ0YXJnZXRFdmVudCIsIm9rIiwiY2FuY2VsIiwiY2xpY2tPdXRzaWRlVG9DbG9zZSIsInJlbW92ZUVuZEFzcGlyYW50ZSIsIiRkZWxldGUiLCJjdXJyZW50IiwibmFtZSIsInRyYW5zaXRpb25UbyIsInJlbG9hZCIsImluaGVyaXQiLCJub3RpZnkiLCJMaXN0YUF1dG9yaWRhZGVzIiwiZ29Ub0F1dG9yaWRhZCIsImxpc3RhQXV0b3JpZGFkZXMiLCJSZW1vdmVBdXRvcmlkYWQiLCJyZW1vdmVBdXRvcmlkYWQiLCJyZW1vdmVFbmRBdXRvcmlkYWQiLCJMaXN0YUNvZnJhZGVzIiwiZ2V0TmV4dFBhZ2UiLCJiYWphcyIsImdldE5leHRQYWdlQmFqYXMiLCJnZXROZXh0UGFnZUFsdGFzIiwicGFyYW1ldGVycyIsInBhZ2UiLCJidXNjYXIiLCJjb25jYXQiLCJzZWFyY2giLCJzZWFyY2hCYWphcyIsInNlYXJjaEFsdGFzIiwicmFkaW9DaGFuZ2UiLCJ0eXBlSW5wdXQiLCJnb1RvQ29mcmFkZSIsImhhbmRsZXIiLCIkb24iLCJsaXN0YUNvZnJhZGVzIiwiUmVtb3ZlQ29mcmFkZSIsInJlbW92ZUNvZnJhZGUiLCJsb2NhbHMiLCJSZXN0b3JlQ29mcmFkZSIsInJlc3RvcmVDb2ZyYWRlIiwicmVzdGF1cmFyRGlhbG9nIiwicmVzdG9yZUVuZENvZnJhZGUiLCJiYWphIiwidXBkYXRlTnVtZXJvQ29mcmFkZSIsIkxpc3RhQ29zdGFsZXJvcyIsImdvVG9Db3N0YWxlcm8iLCJsaXN0YUNvc3RhbGVyb3MiLCJjb3N0YWxlcm9zU2hvcnQiLCJzaXRpbyIsIlJlbW92ZUNvc3RhbGVybyIsInJlbW92ZUNvc3RhbGVybyIsInJlbW92ZUVuZENvc3RhbGVybyIsInRhbGxhIiwiTGlzdGFEaXJlY3Rpdm9zIiwiZ29Ub0RpcmVjdGl2byIsImxpc3RhRGlyZWN0aXZvcyIsImRpcmVjdGl2b3NTaG9ydCIsIlJlbW92ZURpcmVjdGl2byIsInJlbW92ZURpcmVjdGl2byIsInJlbW92ZUVuZERpcmVjdGl2byIsIkxpc3RhU2VjdG9yZXMiLCJzaG93Q2FsbGVzIiwiZ2V0RWxlbWVudEJ5SWQiLCJ0b2dnbGVDbGFzcyIsIm1vZGlmeUNhbGxlIiwiYWRkQ2FsbGUiLCJsaXN0YVNlY3RvcmVzIiwic2VjdG9yZXNTaG9ydCIsIlJlbW92ZVNlY3RvciIsInJlbW92ZVNlY3RvciIsInJlbW92ZUVuZFNlY3RvciIsIlJlbW92ZUNvZnJhZGVUbXBsIiwiY2xvc2VEaWFsb2ciLCJyZW1vdmVFbmRDb2ZyYWRlIiwibW90aXZvIiwibW90aXZvQmFqYSIsImZlY2hhQmFqYSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxZQUVBQSxTQUFBQyxPQUFBLE9B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RkVBLEVBQWFuWCxTQUFXLFNBQVUsWUFBYSxXQUFZLHNCa0VwNEY3RCxXQUNBLFlBT0EsU0FBQW9YLEtBQ0EsT0FDQTlLLFNBQUEsSUFDQXVGLFlBQUEscUVBQ0FDLE9BQ0FyTCxTQUFBLFdBRUE1RSxXQUFBLGVBQ0FDLGFBQUEsS0FDQXdRLGtCQUFBLEdBZEE1VCxRQUNBQyxPQUFBLE9BQ0FxTyxVQUFBLGVBQUFvSyxNQ0xBLFdBQ0EsWUFNQSxTQUFBRSxHQUFBMVIsRUFBQTRNLEVBQUE3TixHQU1BLFFBQUE0UyxLQUNBL0UsRUFBQVEsU0FFQSxRQUFBd0UsR0FBQWxWLEdBQ0EsR0FBQTZFLEdBQUF4QyxFQUFBQyxlQUFBaEQsS0FBQVUsR0FBQUEsR0FBQSxXQUNBNkUsRUFBQXNPLE1BQUFnQyxPQUFBdFIsRUFBQXVSLFdBQ0FDLFdBQUEsR0FBQTdXLE9BQUFHLHNCQUNBa0csRUFBQWtELGNBQUEsS0FFQWxELEVBQUFxRSxPQUFBa0sscUJBQUEsSUFBQXpTLEtBQUEsV0FDQWtELEVBQUFvUixjQUNBLGFBQUEzUixFQUFBd04sUUFBQUMsS0FDQXpOLEVBQUEwTixhQUFBMU4sRUFBQXdOLFFBQUEsTUFDQUcsUUFBQSxFQUNBQyxTQUFBLEVBQ0FDLFFBQUEsSUFJQTdOLEVBQUFNLEdBQUEsZ0JBeEJBLEdBQUFDLEdBQUFDLElBRUFELEdBQUFvUixZQUFBQSxFQUNBcFIsRUFBQXFSLGlCQUFBQSxFQVJBOVksUUFDQUMsT0FBQSxPQUNBa0QsV0FBQSxvQkFBQXlWLEduRSs3RkVBLEVBQWtCdFgsU0FBVyxTQUFVLFlBQWEiLCJmaWxlIjoiYWxsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICduZ1Jlc291cmNlJyxcclxuICAgICduZ01hdGVyaWFsJyxcclxuICAgICd1aUdtYXBnb29nbGUtbWFwcycsXHJcbiAgICAnbmdNZXNzYWdlcydcclxuICBdKTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5mYWN0b3J5KCdteUh0dHBJbnRlcmNlcHRvcicsIG15SHR0cEludGVyY2VwdG9yKVxyXG4gICAgLmNvbmZpZyhsb2FkaW5nU3Bpbm5lcik7XHJcblxyXG4gIGZ1bmN0aW9uIGxvYWRpbmdTcGlubmVyKCRodHRwUHJvdmlkZXIpIHtcclxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ215SHR0cEludGVyY2VwdG9yJyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBteUh0dHBJbnRlcmNlcHRvcigkcSkge1xyXG4gICAgdmFyIGxvYWRTY3JlZW4gPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm0tYXBwLWxvYWRpbmcnKSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAvLyBvcHRpb25hbCBtZXRob2RcclxuICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcclxuICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xyXG4gICAgICAgIGlmIChjb25maWcubWV0aG9kID09PSAnUE9TVCcpXHJcbiAgICAgICAgICBsb2FkU2NyZWVuLmNzcygnZGlzcGxheScsICdibG9jaycpO1xyXG4gICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBvcHRpb25hbCBtZXRob2RcclxuICAgICAncmVxdWVzdEVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XHJcbiAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXHJcbiAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXHJcbiAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcclxuICAgICAgICBsb2FkU2NyZWVuLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXHJcbiAgICAgJ3Jlc3BvbnNlRXJyb3InOiBmdW5jdGlvbihyZWplY3Rpb24pIHtcclxuICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcclxuICAgICAgICBsb2FkU2NyZWVuLmNzcygnZGlzcGxheScsICdub25lJyk7XHJcbiAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsbnVsbCwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoZ29vZ2xlTWFwQVBJKTtcclxuXHJcbiAgZnVuY3Rpb24gZ29vZ2xlTWFwQVBJKHVpR21hcEdvb2dsZU1hcEFwaVByb3ZpZGVyKXtcclxuICAgIHVpR21hcEdvb2dsZU1hcEFwaVByb3ZpZGVyLmNvbmZpZ3VyZSh7XHJcbiAgICAgICAgbGlicmFyaWVzOiAnd2VhdGhlcixnZW9tZXRyeSx2aXN1YWxpemF0aW9uJ1xyXG4gICAgfSk7ICAgIFxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoZGF0ZVBpY2tlckNvbmZpZyk7XHJcblxyXG4gIGZ1bmN0aW9uIGRhdGVQaWNrZXJDb25maWcoJG1kRGF0ZUxvY2FsZVByb3ZpZGVyKSB7XHJcblxyXG4gICAgJG1kRGF0ZUxvY2FsZVByb3ZpZGVyLm1vbnRocyA9IFsnZW5lcm8nLCAnZmVicmVybycsICdtYXJ6bycsICdhYnJpbCcsICdtYXlvJywgJ2p1bmlvJywgJ2p1bGlvJywgJ2Fnb3N0bycsICdzZXB0aWVtYnJlJywgJ29jdHVicmUnLCAnbm92aWVtYnJlJywgJ2RpY2llbWJyZSddO1xyXG4gICAgJG1kRGF0ZUxvY2FsZVByb3ZpZGVyLnNob3J0TW9udGhzID0gWydlbmUnLCAnZmViJywgJ21hcicsICdhYnInLCAnbWF5JywgJ2p1bicsICdqdWwnLCAnYWdvJywgJ3NlcCcsICdvY3QnLCAnbm92JywgJ2RpYyddO1xyXG4gICAgJG1kRGF0ZUxvY2FsZVByb3ZpZGVyLmRheXMgPSBbJ2x1bmVzJywgJ21hcnRlcycsICdtacOpcmNvbGVzJywgJ2p1ZXZlcycsICd2aWVybmVzJywgJ3PDoWJhZG8nLCAnZG9taW5nbyddO1xyXG4gICAgJG1kRGF0ZUxvY2FsZVByb3ZpZGVyLnNob3J0RGF5cyA9IFsnbHVuJywgJ21hcicsICdtacOpJywgJ2p1ZScsICd2aWUnLCAnc8OhYicsICdkb20nXTtcclxuXHJcbiAgICAkbWREYXRlTG9jYWxlUHJvdmlkZXIuZmlyc3REYXlPZldlZWsgPSAxO1xyXG4gICAgXHJcbiAgICAkbWREYXRlTG9jYWxlUHJvdmlkZXIucGFyc2VEYXRlID0gZnVuY3Rpb24oZGF0ZVN0cmluZykge1xyXG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVN0cmluZyk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAkbWREYXRlTG9jYWxlUHJvdmlkZXIuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xyXG4gICAgfTtcclxuXHJcbiAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgZnVuY3Rpb24gY29uZmlnKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL1wiKTtcclxuXHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAuc3RhdGUoXCJob21lXCIsIHtcclxuICAgICAgICB1cmw6IFwiL1wiLFxyXG4gICAgICAgIHRlbXBsYXRlOiAnPHAgY2xhc3M9XCJsZWFkXCI+V2VsY29tZSB0byB0aGUgVUktUm91dGVyIERlbW88L3A+JyArXHJcbiAgICAgICAgICAnPHA+VXNlIHRoZSBtZW51IGFib3ZlIHRvIG5hdmlnYXRlLiAnICtcclxuICAgICAgICAgICdQYXkgYXR0ZW50aW9uIHRvIHRoZSA8Y29kZT4kc3RhdGU8L2NvZGU+IGFuZCA8Y29kZT4kc3RhdGVQYXJhbXM8L2NvZGU+IHZhbHVlcyBiZWxvdy48L3A+JyArXHJcbiAgICAgICAgICAnPHA+Q2xpY2sgdGhlc2UgbGlua3PigJQ8YSBocmVmPVwiIy9jP2lkPTFcIj5BbGljZTwvYT4gb3IgJyArXHJcbiAgICAgICAgICAnPGEgaHJlZj1cIiMvdXNlci80MlwiPkJvYjwvYT7igJR0byBzZWUgYSB1cmwgcmVkaXJlY3QgaW4gYWN0aW9uLjwvcD4nXHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcodGhlbWVBbmd1bGFyTWF0ZXJpYWwpO1xyXG5cclxuICBmdW5jdGlvbiB0aGVtZUFuZ3VsYXJNYXRlcmlhbCgkbWRUaGVtaW5nUHJvdmlkZXIpe1xyXG4gICAgXHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbmZpZyhjb25maWcpO1xyXG5cclxuICBmdW5jdGlvbiBjb25maWcoJHN0YXRlUHJvdmlkZXIpIHtcclxuICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgIC5zdGF0ZSgnYXNwaXJhbnRlcycsIHtcclxuICAgICAgICB1cmw6IFwiL2FzcGlyYW50ZXNcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2FzcGlyYW50ZXMvbGlzdC9hc3BpcmFudGVzLmh0bWwnKTsgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiAnQXNwaXJhbnRlcycsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgYXNwaXJhbnRlc1ByZXBTZXJ2aWNlOiBhc3BpcmFudGVzUHJlcFNlcnZpY2VcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdGF0ZSgnYXNwaXJhbnRlc0RldGFsbGUnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9hc3BpcmFudGVzLzphc3BpcmFudGVJZFwiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnYXNwaXJhbnRlcy9kZXRhaWwvYXNwaXJhbnRlRGV0YWxsZS5odG1sJyk7IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0FzcGlyYW50ZURldGFsbGUnLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGdldEFzcGlyYW50ZVByZXBTZXJ2aWNlOiBnZXRBc3BpcmFudGVQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSkuXHJcbiAgICAgIHN0YXRlKCdhc3BpcmFudGVzQ2FtYmlvcycsIHtcclxuICAgICAgICB1cmw6IFwiL2FzcGlyYW50ZXMvY2FtYmlvcy86YXNwaXJhbnRlSWRcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2FzcGlyYW50ZXMvYWRkTW9kaWZ5L2FzcGlyYW50ZUFkZE1vZGlmeS5odG1sJyk7IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0FzcGlyYW50ZUFkZE1vZGlmeScsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgZ2V0QXNwaXJhbnRlUHJlcFNlcnZpY2U6IGdldEFzcGlyYW50ZVByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFzcGlyYW50ZXNQcmVwU2VydmljZShhc3BpcmFudGVzU2VydmljZSkge1xyXG4gICAgcmV0dXJuIGFzcGlyYW50ZXNTZXJ2aWNlLmFzcGlyYW50ZXNSZXN0KCkucXVlcnkoKTtcclxuICB9XHJcblxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldEFzcGlyYW50ZVByZXBTZXJ2aWNlKGFzcGlyYW50ZXNTZXJ2aWNlLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgIHJldHVybiAoJHN0YXRlUGFyYW1zLmFzcGlyYW50ZUlkKSA/IGFzcGlyYW50ZXNTZXJ2aWNlLmFzcGlyYW50ZXNSZXN0KCkuZ2V0KHtpZDogJHN0YXRlUGFyYW1zLmFzcGlyYW50ZUlkfSkgOiBmYWxzZTtcclxuICB9XHJcbiAgXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgZnVuY3Rpb24gY29uZmlnKCRzdGF0ZVByb3ZpZGVyKSB7XHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAuc3RhdGUoJ2F1dG9yaWRhZGVzJywge1xyXG4gICAgICAgIHVybDogXCIvYXV0b3JpZGFkZXNcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2F1dG9yaWRhZGVzL2xpc3QvYXV0b3JpZGFkZXMuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdBdXRvcmlkYWRlcycsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgYXV0b3JpZGFkZXNQcmVwU2VydmljZTogYXV0b3JpZGFkZXNQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdhdXRvcmlkYWRlc0RldGFsbGUnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9hdXRvcmlkYWRlcy86YXV0b3JpZGFkSWRcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2F1dG9yaWRhZGVzL2RldGFpbC9hdXRvcmlkYWREZXRhbGxlLmh0bWwnKTsgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiAnQXV0b3JpZGFkRGV0YWxsZScsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgZ2V0QXV0b3JpZGFkUHJlcFNlcnZpY2U6IGdldEF1dG9yaWRhZFByZXBTZXJ2aWNlLFxyXG4gICAgICAgICAgICBnZXRNYXBzUHJlcFNlcnZpY2U6IGdldE1hcHNQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSkuXHJcbiAgICAgIHN0YXRlKCdhdXRvcmlkYWRlc0NhbWJpb3MnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9hdXRvcmlkYWRlcy9jYW1iaW9zLzphdXRvcmlkYWRJZFwiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnYXV0b3JpZGFkZXMvYWRkTW9kaWZ5L2F1dG9yaWRhZEFkZE1vZGlmeS5odG1sJyk7IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0F1dG9yaWRhZEFkZE1vZGlmeScsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgZ2V0QXV0b3JpZGFkUHJlcFNlcnZpY2U6IGdldEF1dG9yaWRhZFByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF1dG9yaWRhZGVzUHJlcFNlcnZpY2UoYXV0b3JpZGFkZXNTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gYXV0b3JpZGFkZXNTZXJ2aWNlLmF1dG9yaWRhZGVzUmVzdCgpLnF1ZXJ5KCk7XHJcbiAgfVxyXG5cclxuICBcclxuICBmdW5jdGlvbiBnZXRBdXRvcmlkYWRQcmVwU2VydmljZShhdXRvcmlkYWRlc1NlcnZpY2UsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgcmV0dXJuICgkc3RhdGVQYXJhbXMuYXV0b3JpZGFkSWQpID8gYXV0b3JpZGFkZXNTZXJ2aWNlLmF1dG9yaWRhZGVzUmVzdCgpLmdldCh7aWQ6ICRzdGF0ZVBhcmFtcy5hdXRvcmlkYWRJZH0pIDogZmFsc2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRNYXBzUHJlcFNlcnZpY2UodWlHbWFwR29vZ2xlTWFwQXBpLCBnZXRBdXRvcmlkYWRQcmVwU2VydmljZSwgbWFwYXNTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gZ2V0QXV0b3JpZGFkUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgXHJcbiAgICAgIHZhciBhZGRyZXNzID0gZGF0YS5kaXJlY2Npb24uY2FsbGUgICAgICsgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRpcmVjY2lvbi5udW1lcm8gICAgKyAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlyZWNjaW9uLm11bmljaXBpbyArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXJlY2Npb24ucHJvdmluY2lhICsgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRpcmVjY2lvbi5jcDtcclxuXHJcbiAgICAgIHJldHVybiBtYXBhc1NlcnZpY2UuZ2VvQ29kaW5nQVBJKGFkZHJlc3MpLlxyXG4gICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVzdWx0cy5sZW5ndGgpe1xyXG4gICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSByZXNwb25zZS5kYXRhLnJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247XHJcbiAgICAgICAgICAgIHJldHVybiB1aUdtYXBHb29nbGVNYXBBcGkudGhlbihmdW5jdGlvbihtYXBzKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICB7Y29vcmQ6ICB7IGxhdGl0dWRlOiBjb29yZGluYXRlcy5sYXQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogY29vcmRpbmF0ZXMubG5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyOiB7IGxhdGl0dWRlOiBjb29yZGluYXRlcy5sYXQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogY29vcmRpbmF0ZXMubG5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICB6b29tOiAxNyB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBcclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbmZpZyhjb25maWcpO1xyXG5cclxuICBmdW5jdGlvbiBjb25maWcoJHN0YXRlUHJvdmlkZXIpIHtcclxuICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgIC5zdGF0ZSgnY29mcmFkZXMnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9jb2ZyYWRlc1wiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnY29mcmFkZXMvbGlzdC9jb2ZyYWRlcy5odG1sJyk7IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0NvZnJhZGVzJyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBjb2ZyYWRlc1ByZXBTZXJ2aWNlOiBjb2ZyYWRlc1ByZXBTZXJ2aWNlLFxyXG4gICAgICAgICAgICBjb2ZyYWRlc0JhamFzUHJlcFNlcnZpY2U6IGNvZnJhZGVzQmFqYXNQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdjb2ZyYWRlc0RldGFsbGUnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9jb2ZyYWRlcy86Y29mcmFkZUlkXCIsXHJcbiAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpeyAgXHJcbiAgICAgICAgICByZXR1cm4gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdjb2ZyYWRlcy9kZXRhaWwvY29mcmFkZURldGFsbGUuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb2ZyYWRlRGV0YWxsZScsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgZ2V0Q29mcmFkZVByZXBTZXJ2aWNlOiBnZXRDb2ZyYWRlUHJlcFNlcnZpY2UsXHJcbiAgICAgICAgICAgIGdldE1hcHNQcmVwU2VydmljZTogZ2V0TWFwc1ByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5cclxuICAgICAgc3RhdGUoJ2NvZnJhZGVzQ2FtYmlvcycsIHtcclxuICAgICAgICB1cmw6IFwiL2NvZnJhZGVzL2NhbWJpb3MvOmNvZnJhZGVJZFwiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnY29mcmFkZXMvYWRkTW9kaWZ5L2NvZnJhZGVBZGRNb2RpZnkuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb2ZyYWRlQWRkTW9kaWZ5JyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBnZXRDb2ZyYWRlUHJlcFNlcnZpY2U6IGdldENvZnJhZGVQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb2ZyYWRlc1ByZXBTZXJ2aWNlKGNvZnJhZGVzU2VydmljZSkge1xyXG4gICAgcmV0dXJuIGNvZnJhZGVzU2VydmljZS5jb2ZyYWRlc1Jlc3QoKS5xdWVyeSgpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29mcmFkZXNCYWphc1ByZXBTZXJ2aWNlKGNvZnJhZGVzU2VydmljZSkge1xyXG4gICAgcmV0dXJuIGNvZnJhZGVzU2VydmljZS5jb2ZyYWRlc0JhamFzUmVzdCgpLnF1ZXJ5KCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRDb2ZyYWRlUHJlcFNlcnZpY2UoY29mcmFkZXNTZXJ2aWNlLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgIHJldHVybiAoJHN0YXRlUGFyYW1zLmNvZnJhZGVJZCkgPyBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNSZXN0KCkuZ2V0KHtpZDogJHN0YXRlUGFyYW1zLmNvZnJhZGVJZH0pIDogZmFsc2U7XHJcbiAgfVxyXG4gIFxyXG4gIGZ1bmN0aW9uIGdldE1hcHNQcmVwU2VydmljZSh1aUdtYXBHb29nbGVNYXBBcGksIGdldENvZnJhZGVQcmVwU2VydmljZSwgbWFwYXNTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gZ2V0Q29mcmFkZVByZXBTZXJ2aWNlLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYWRkcmVzcyA9IGRhdGEuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5jYWxsZSAgICAgKyAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5udW1lcm8gICAgKyAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5tdW5pY2lwaW8gKyAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5wcm92aW5jaWEgKyAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5jcDtcclxuXHJcbiAgICAgIHJldHVybiBtYXBhc1NlcnZpY2UuZ2VvQ29kaW5nQVBJKGFkZHJlc3MpLlxyXG4gICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEucmVzdWx0cy5sZW5ndGgpe1xyXG4gICAgICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSByZXNwb25zZS5kYXRhLnJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb247XHJcbiAgICAgICAgICAgIHJldHVybiB1aUdtYXBHb29nbGVNYXBBcGkudGhlbihmdW5jdGlvbihtYXBzKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICB7Y29vcmQ6ICB7IGxhdGl0dWRlOiBjb29yZGluYXRlcy5sYXQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogY29vcmRpbmF0ZXMubG5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyOiB7IGxhdGl0dWRlOiBjb29yZGluYXRlcy5sYXQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZTogY29vcmRpbmF0ZXMubG5nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICB6b29tOiAxNyB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgZnVuY3Rpb24gY29uZmlnKCRzdGF0ZVByb3ZpZGVyKSB7XHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAuc3RhdGUoJ2Nvc3RhbGVyb3MnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9jb3N0YWxlcm9zXCIsXHJcbiAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpeyAgXHJcbiAgICAgICAgICByZXR1cm4gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdjb3N0YWxlcm9zL2xpc3QvY29zdGFsZXJvcy5odG1sJyk7IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0Nvc3RhbGVyb3MnLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGNvc3RhbGVyb3NQcmVwU2VydmljZTogY29zdGFsZXJvc1ByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAuc3RhdGUoJ2Nvc3RhbGVyb3NEZXRhbGxlJywge1xyXG4gICAgICAgIHVybDogXCIvY29zdGFsZXJvcy86Y29zdGFsZXJvSWRcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ2Nvc3RhbGVyb3MvZGV0YWlsL2Nvc3RhbGVyb0RldGFsbGUuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb3N0YWxlcm9EZXRhbGxlJyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBnZXRDb3N0YWxlcm9QcmVwU2VydmljZTogZ2V0Q29zdGFsZXJvUHJlcFNlcnZpY2VcclxuICAgICAgICB9XHJcbiAgICAgIH0pLlxyXG4gICAgICBzdGF0ZSgnY29zdGFsZXJvc0NhbWJpb3MnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9jb3N0YWxlcm9zL2NhbWJpb3MvOmNvc3RhbGVyb0lkXCIsXHJcbiAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpeyAgXHJcbiAgICAgICAgICByZXR1cm4gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdjb3N0YWxlcm9zL2FkZE1vZGlmeS9jb3N0YWxlcm9BZGRNb2RpZnkuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb3N0YWxlcm9BZGRNb2RpZnknLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGdldENvc3RhbGVyb1ByZXBTZXJ2aWNlOiBnZXRDb3N0YWxlcm9QcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb3N0YWxlcm9zUHJlcFNlcnZpY2UoY29zdGFsZXJvc1NlcnZpY2UpIHtcclxuICAgIHJldHVybiBjb3N0YWxlcm9zU2VydmljZS5jb3N0YWxlcm9zUmVzdCgpLnF1ZXJ5KCk7XHJcbiAgfVxyXG5cclxuICBcclxuICBmdW5jdGlvbiBnZXRDb3N0YWxlcm9QcmVwU2VydmljZShjb3N0YWxlcm9zU2VydmljZSwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICByZXR1cm4gKCRzdGF0ZVBhcmFtcy5jb3N0YWxlcm9JZCkgPyBjb3N0YWxlcm9zU2VydmljZS5jb3N0YWxlcm9zUmVzdCgpLmdldCh7aWQ6ICRzdGF0ZVBhcmFtcy5jb3N0YWxlcm9JZH0pIDogZmFsc2U7XHJcbiAgfVxyXG4gIFxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmZpZygkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKCdkaXJlY3Rpdm9zJywge1xyXG4gICAgICAgIHVybDogXCIvZGlyZWN0aXZvc1wiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnZGlyZWN0aXZvcy9saXN0L2RpcmVjdGl2b3MuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdEaXJlY3Rpdm9zJyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBkaXJlY3Rpdm9zUHJlcFNlcnZpY2U6IGRpcmVjdGl2b3NQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdkaXJlY3Rpdm9zRGV0YWxsZScsIHtcclxuICAgICAgICB1cmw6IFwiL2RpcmVjdGl2b3MvOmRpcmVjdGl2b0lkXCIsXHJcbiAgICAgICAgdGVtcGxhdGVQcm92aWRlcjogZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpeyAgXHJcbiAgICAgICAgICByZXR1cm4gJHRlbXBsYXRlQ2FjaGUuZ2V0KCdkaXJlY3Rpdm9zL2RldGFpbC9kaXJlY3Rpdm9EZXRhbGxlLmh0bWwnKTsgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiAnRGlyZWN0aXZvRGV0YWxsZScsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgZ2V0RGlyZWN0aXZvUHJlcFNlcnZpY2U6IGdldERpcmVjdGl2b1ByZXBTZXJ2aWNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5cclxuICAgICAgc3RhdGUoJ2RpcmVjdGl2b3NDYW1iaW9zJywge1xyXG4gICAgICAgIHVybDogXCIvZGlyZWN0aXZvcy9jYW1iaW9zLzpkaXJlY3Rpdm9JZFwiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnZGlyZWN0aXZvcy9hZGRNb2RpZnkvZGlyZWN0aXZvQWRkTW9kaWZ5Lmh0bWwnKTsgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiAnRGlyZWN0aXZvQWRkTW9kaWZ5JyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICBnZXREaXJlY3Rpdm9QcmVwU2VydmljZTogZ2V0RGlyZWN0aXZvUHJlcFNlcnZpY2VcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGlyZWN0aXZvc1ByZXBTZXJ2aWNlKGRpcmVjdGl2b3NTZXJ2aWNlKSB7XHJcbiAgICByZXR1cm4gZGlyZWN0aXZvc1NlcnZpY2UuZGlyZWN0aXZvc1Jlc3QoKS5xdWVyeSgpO1xyXG4gIH1cclxuXHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aXZvUHJlcFNlcnZpY2UoZGlyZWN0aXZvc1NlcnZpY2UsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgcmV0dXJuICgkc3RhdGVQYXJhbXMuZGlyZWN0aXZvSWQpID8gZGlyZWN0aXZvc1NlcnZpY2UuZGlyZWN0aXZvc1Jlc3QoKS5nZXQoe2lkOiAkc3RhdGVQYXJhbXMuZGlyZWN0aXZvSWR9KSA6IGZhbHNlO1xyXG4gIH1cclxuICBcclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIFxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQXBwQ3RybCcsIEFwcEN0cmwpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gQXBwQ3RybCgkbWRTaWRlbmF2LCAkc3RhdGUpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICB2bS50b2dnbGVTaWRlbmF2ID0gdG9nZ2xlU2lkZW5hdjtcclxuICAgIHZtLm5hdmlnYXRlVG8gICAgPSBuYXZpZ2F0ZVRvO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB0b2dnbGVTaWRlbmF2KG1lbnVJZCkge1xyXG4gICAgICAkbWRTaWRlbmF2KG1lbnVJZCkudG9nZ2xlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbmF2aWdhdGVUbyh0bywgbWVudUlkKXtcclxuICAgICAgdG9nZ2xlU2lkZW5hdihtZW51SWQpO1xyXG4gICAgICAkc3RhdGUuZ28odG8pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb25maWcoY29uZmlnKTtcclxuXHJcbiAgZnVuY3Rpb24gY29uZmlnKCRzdGF0ZVByb3ZpZGVyKSB7XHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAuc3RhdGUoJ3NlY3RvcmVzJywge1xyXG4gICAgICAgIHVybDogXCIvc2VjdG9yZXNcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3NlY3RvcmVzL2xpc3Qvc2VjdG9yZXMuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdTZWN0b3JlcycsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgc2VjdG9yZXNQcmVwU2VydmljZTogc2VjdG9yZXNQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLnN0YXRlKCdzZWN0b3Jlc0RldGFsbGUnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9zZWN0b3Jlcy86c2VjdG9ySWRcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3NlY3RvcmVzL2RldGFpbC9zZWN0b3JEZXRhbGxlLmh0bWwnKTsgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250cm9sbGVyOiAnU2VjdG9yRGV0YWxsZScsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgZ2V0U2VjdG9yUHJlcFNlcnZpY2U6IGdldFNlY3RvclByZXBTZXJ2aWNlLFxyXG4gICAgICAgICAgICBnZXRNYXBzUHJlcFNlcnZpY2U6IGdldE1hcHNQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSkuXHJcbiAgICAgIHN0YXRlKCdzZWN0b3Jlc0NhbWJpb3MnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9zZWN0b3Jlcy9jYW1iaW9zLzpzZWN0b3JJZC86Y2FsbGVcIixcclxuICAgICAgICB0ZW1wbGF0ZVByb3ZpZGVyOiBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSl7ICBcclxuICAgICAgICAgIHJldHVybiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3NlY3RvcmVzL2FkZE1vZGlmeS9zZWN0b3JBZGRNb2RpZnkuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdTZWN0b3JBZGRNb2RpZnknLFxyXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgIGdldFNlY3RvclByZXBTZXJ2aWNlOiBnZXRTZWN0b3JQcmVwU2VydmljZVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWN0b3Jlc1ByZXBTZXJ2aWNlKHNlY3RvcmVzU2VydmljZSkge1xyXG4gICAgcmV0dXJuIHNlY3RvcmVzU2VydmljZS5zZWN0b3Jlc1Jlc3QoKS5xdWVyeSgpO1xyXG4gIH1cclxuXHJcbiAgXHJcbiAgZnVuY3Rpb24gZ2V0U2VjdG9yUHJlcFNlcnZpY2Uoc2VjdG9yZXNTZXJ2aWNlLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgIHJldHVybiAoJHN0YXRlUGFyYW1zLnNlY3RvcklkKSA/IHNlY3RvcmVzU2VydmljZS5zZWN0b3Jlc1Jlc3QoKS5nZXQoe2lkOiAkc3RhdGVQYXJhbXMuc2VjdG9ySWR9KSA6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0TWFwc1ByZXBTZXJ2aWNlKHVpR21hcEdvb2dsZU1hcEFwaSwgZ2V0U2VjdG9yUHJlcFNlcnZpY2UsIG1hcGFzU2VydmljZSkge1xyXG4gICAgcmV0dXJuIGdldFNlY3RvclByZXBTZXJ2aWNlLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgYWRkcmVzcyA9IGRhdGEuZGlyZWNjaW9uLmNhbGxlICAgICArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXJlY2Npb24ubnVtZXJvICAgICsgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLmRpcmVjY2lvbi5tdW5pY2lwaW8gKyAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuZGlyZWNjaW9uLnByb3ZpbmNpYSArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5kaXJlY2Npb24uY3A7XHJcblxyXG4gICAgICByZXR1cm4gbWFwYXNTZXJ2aWNlLmdlb0NvZGluZ0FQSShhZGRyZXNzKS5cclxuICAgICAgICB0aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcclxuICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnJlc3VsdHMubGVuZ3RoKXtcclxuICAgICAgICAgICAgdmFyIGNvb3JkaW5hdGVzID0gcmVzcG9uc2UuZGF0YS5yZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uO1xyXG4gICAgICAgICAgICByZXR1cm4gdWlHbWFwR29vZ2xlTWFwQXBpLnRoZW4oZnVuY3Rpb24obWFwcykge1xyXG4gICAgICAgICAgICAgIHJldHVybiAge2Nvb3JkOiAgeyBsYXRpdHVkZTogY29vcmRpbmF0ZXMubGF0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGNvb3JkaW5hdGVzLmxuZyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcjogeyBsYXRpdHVkZTogY29vcmRpbmF0ZXMubGF0LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGNvb3JkaW5hdGVzLmxuZyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgem9vbTogMTcgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0FzcGlyYW50ZUFkZE1vZGlmeScsIEFzcGlyYW50ZUFkZE1vZGlmeSk7XHJcblxyXG4gIGZ1bmN0aW9uIEFzcGlyYW50ZUFkZE1vZGlmeSgkc2NvcGUsICRkb2N1bWVudCwgJG1kVG9hc3QsICRzdGF0ZSwgZ2V0QXNwaXJhbnRlUHJlcFNlcnZpY2UsIGFzcGlyYW50ZXNTZXJ2aWNlLCBjb2ZyYWRlc1NlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLm5ld0NvZnJhZGUgPSBmYWxzZTtcclxuXHJcbiAgICB2bS5iYWNrU3RhdGUgICAgICAgICAgPSBiYWNrU3RhdGU7XHJcbiAgICB2bS5xdWVyeVNlYXJjaCAgICAgICAgPSBxdWVyeVNlYXJjaDtcclxuICAgIHZtLnNlbGVjdGVkSXRlbUNoYW5nZSA9IHNlbGVjdGVkSXRlbUNoYW5nZTtcclxuICAgIHZtLmd1YXJkYXIgICAgICAgICAgICA9IGd1YXJkYXI7XHJcblxyXG4gICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgaWYgKGdldEFzcGlyYW50ZVByZXBTZXJ2aWNlKXtcclxuICAgICAgICBnZXRBc3BpcmFudGVQcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGluaXRBc3BpcmFudGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgbmV3QXNwaXJhbnRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdEFzcGlyYW50ZShkYXRhKSB7XHJcbiAgICAgIHZtLmFzcGlyYW50ZSA9IGRhdGE7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5ld0FzcGlyYW50ZSgpIHtcclxuICAgICAgdm0ubmV3Q29mcmFkZSA9IHRydWU7XHJcbiAgICAgIHZtLmFzcGlyYW50ZSA9IHtjb2ZyYWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZmVjaGE6IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJhY2tTdGF0ZSgpIHtcclxuICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHF1ZXJ5U2VhcmNoKHF1ZXJ5KSB7XHJcbiAgICAgIHZhciBmaWx0cm8gPSB7fTtcclxuICAgICAgaWYgKGlzTmFOKHF1ZXJ5KSlcclxuICAgICAgICBmaWx0cm8ubm9tYnJlID0gcXVlcnk7XHJcbiAgICAgIGVsc2UgaWYoIWlzTmFOKHF1ZXJ5KSlcclxuICAgICAgICBmaWx0cm8ubnVtZXJvT3JkZW4gPSBxdWVyeTtcclxuXHJcbiAgICAgIHJldHVybiBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNSZXN0KCkucXVlcnkoZmlsdHJvKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5yZXN1bHRzO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZWxlY3RlZEl0ZW1DaGFuZ2UoaXRlbSkge1xyXG4gICAgICB2bS5hc3BpcmFudGUuY29mcmFkZSA9ICBpdGVtID8gaXRlbS5pZCA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhcihpc1ZhbGlkKSB7XHJcbiAgICAgIGlmKGlzVmFsaWQpe1xyXG4gICAgICAgIGlmICghdm0uYXNwaXJhbnRlLmNvZnJhZGUpe1xyXG4gICAgICAgICAgJHNjb3BlLmFzcGlyYW50ZUZvcm0uY29mcmFkZS4kZXJyb3IucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgc2hvd0FjdGlvblRvYXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICB2bS5hc3BpcmFudGUuY29mcmFkZSA9IHZtLmFzcGlyYW50ZS5jb2ZyYWRlLmlkID8gdm0uYXNwaXJhbnRlLmNvZnJhZGUuaWQgOiB2bS5hc3BpcmFudGUuY29mcmFkZTtcclxuICAgICAgICAgIGFzcGlyYW50ZXNTZXJ2aWNlLmFzcGlyYW50ZXNSZXN0KCkuc2F2ZSh2bS5hc3BpcmFudGUsIGd1YXJkYXJTdWNjZXNzLCBndWFyZGFyRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgc2hvd0FjdGlvblRvYXN0KCk7XHJcbiAgICB9XHJcbiAgICAgIFxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhclN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgJG1kVG9hc3Quc2hvdyhcclxuICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxyXG4gICAgICAgICAgLmNvbnRlbnQoJ0d1YXJkYWRvIGNvbiDDqXhpdG8hIScpXHJcbiAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXHJcbiAgICAgICk7XHJcbiAgICAgICRzdGF0ZS5nbygnYXNwaXJhbnRlcycpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGd1YXJkYXJFcnJvcihyZXNwb25zZSkge1xyXG4gICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAuY29udGVudCgnRXJyb3IgYWwgZ3VhcmRhciEhJylcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgIC5wYXJlbnQoJGRvY3VtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN0b2FzdEJvdW5kcycpKVxyXG4gICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzaG93QWN0aW9uVG9hc3QoKSB7XHJcbiAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgIC5jb250ZW50KCdFeGlzdGVuIGVycm9yZXMgZW4gZWwgZm9ybXVsYXJpbycpXHJcbiAgICAgICAgICAuYWN0aW9uKCdPSycpXHJcbiAgICAgICAgICAuaGlnaGxpZ2h0QWN0aW9uKGZhbHNlKVxyXG4gICAgICAgICAgLnBhcmVudCgkZG9jdW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3RvYXN0Qm91bmRzJykpXHJcbiAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQXNwaXJhbnRlRGV0YWxsZScsIEFzcGlyYW50ZURldGFsbGUpO1xyXG5cclxuICBmdW5jdGlvbiBBc3BpcmFudGVEZXRhbGxlKCRzdGF0ZSwgZ2V0QXNwaXJhbnRlUHJlcFNlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgdm0ubW9kaWZ5QXNwaXJhbnRlID0gbW9kaWZ5QXNwaXJhbnRlO1xyXG4gICAgXHJcbiAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICByZXR1cm4gZ2V0QXNwaXJhbnRlUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5hc3BpcmFudGUgPSBkYXRhO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlBc3BpcmFudGUoaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdhc3BpcmFudGVzQ2FtYmlvcycsIHthc3BpcmFudGVJZDogaWR9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdBc3BpcmFudGVzJywgQXNwaXJhbnRlcyk7XHJcblxyXG4gIGZ1bmN0aW9uIEFzcGlyYW50ZXMoYXNwaXJhbnRlc1ByZXBTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5hc3BpcmFudGVzID0gbnVsbDtcclxuICAgIGFjdGl2YXRlKCk7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICByZXR1cm4gYXNwaXJhbnRlc1ByZXBTZXJ2aWNlLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgdm0uYXNwaXJhbnRlcyA9IGRhdGE7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdBdXRvcmlkYWRBZGRNb2RpZnknLCBBdXRvcmlkYWRBZGRNb2RpZnkpO1xyXG5cclxuICBmdW5jdGlvbiBBdXRvcmlkYWRBZGRNb2RpZnkoJHNjb3BlLCAkZG9jdW1lbnQsICRtZFRvYXN0LCAkc3RhdGUsIGdldEF1dG9yaWRhZFByZXBTZXJ2aWNlLCBhdXRvcmlkYWRlc1NlcnZpY2UsIGNvZnJhZGVzU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuICAgIFxyXG4gICAgdm0ubmV3Q29mcmFkZSA9IGZhbHNlO1xyXG5cclxuICAgIHZtLmJhY2tTdGF0ZSAgICAgICAgICA9IGJhY2tTdGF0ZTtcclxuICAgIHZtLnF1ZXJ5U2VhcmNoICAgICAgICA9IHF1ZXJ5U2VhcmNoO1xyXG4gICAgdm0uc2VsZWN0ZWRJdGVtQ2hhbmdlID0gc2VsZWN0ZWRJdGVtQ2hhbmdlO1xyXG4gICAgdm0uZ3VhcmRhciAgICAgICAgICAgID0gZ3VhcmRhcjtcclxuXHJcbiAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICBpZiAoZ2V0QXV0b3JpZGFkUHJlcFNlcnZpY2Upe1xyXG4gICAgICAgIGdldEF1dG9yaWRhZFByZXBTZXJ2aWNlLiRwcm9taXNlLnRoZW4oaW5pdEF1dG9yaWRhZCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZXtcclxuICAgICAgICBuZXdBdXRvcmlkYWQoKTtcclxuICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0QXV0b3JpZGFkKGRhdGEpIHtcclxuICAgICAgdm0uYXV0b3JpZGFkID0gZGF0YTtcclxuICAgICAgdm0uY2FsbGVTZWxlY3RlZCA9IHtjYWxsZTogdm0uYXV0b3JpZGFkLmRpcmVjY2lvbi5jYWxsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjcDogdm0uYXV0b3JpZGFkLmRpcmVjY2lvbi5jcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aW5jaWE6IHZtLmF1dG9yaWRhZC5kaXJlY2Npb24ucHJvdmluY2lhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG11bmljaXBpbzogdm0uYXV0b3JpZGFkLmRpcmVjY2lvbi5tdW5pY2lwaW99O1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBuZXdBdXRvcmlkYWQoKSB7XHJcbiAgICAgIHZtLm5ld0NvZnJhZGUgPSB0cnVlO1xyXG4gICAgICB2bS5hdXRvcmlkYWQgPSB7ZGlyZWNjaW9uOiB7fX07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYmFja1N0YXRlKCkge1xyXG4gICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcXVlcnlTZWFyY2gocXVlcnkpIHtcclxuICAgICAgcmV0dXJuIGNvZnJhZGVzU2VydmljZS5nZXRDYWxsZXMocXVlcnkpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe3JldHVybiByZXNwb25zZS5kYXRhO30pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlbGVjdGVkSXRlbUNoYW5nZShpdGVtKSB7XHJcbiAgICAgIGlmIChpdGVtKXtcclxuICAgICAgICB2bS5hdXRvcmlkYWQuZGlyZWNjaW9uLmNhbGxlID0gaXRlbS5jYWxsZTtcclxuICAgICAgICB2bS5hdXRvcmlkYWQuZGlyZWNjaW9uLm11bmljaXBpbyA9IGl0ZW0ubXVuaWNpcGlvO1xyXG4gICAgICAgIHZtLmF1dG9yaWRhZC5kaXJlY2Npb24uY3AgPSBpdGVtLmNwO1xyXG4gICAgICAgIHZtLmF1dG9yaWRhZC5kaXJlY2Npb24ucHJvdmluY2lhID0gaXRlbS5wcm92aW5jaWE7XHJcbiAgICAgIH1lbHNle1xyXG4gICAgICAgIHZtLmF1dG9yaWRhZC5kaXJlY2Npb24uY2FsbGUgPSBudWxsO1xyXG4gICAgICAgIHZtLmF1dG9yaWRhZC5kaXJlY2Npb24ubXVuaWNpcGlvID0gbnVsbDtcclxuICAgICAgICB2bS5hdXRvcmlkYWQuZGlyZWNjaW9uLmNwID0gbnVsbDtcclxuICAgICAgICB2bS5hdXRvcmlkYWQuZGlyZWNjaW9uLnByb3ZpbmNpYSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBndWFyZGFyKGlzVmFsaWQpIHtcclxuICAgICAgaWYoaXNWYWxpZCl7XHJcbiAgICAgICAgdm0uYXV0b3JpZGFkLmRpcmVjY2lvbi5jYWxsZSA9IHZtLmF1dG9yaWRhZC5kaXJlY2Npb24uY2FsbGUgPyB2bS5hdXRvcmlkYWQuZGlyZWNjaW9uLmNhbGxlIDogdm0uc2VhcmNoVGV4dDtcclxuICAgICAgICBhdXRvcmlkYWRlc1NlcnZpY2UuYXV0b3JpZGFkZXNSZXN0KCkuc2F2ZSh2bS5hdXRvcmlkYWQsIGd1YXJkYXJTdWNjZXNzLCBndWFyZGFyRXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBzaG93QWN0aW9uVG9hc3QoKTtcclxuICAgIH1cclxuICAgICAgXHJcbiAgICBmdW5jdGlvbiBndWFyZGFyU3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAuY29udGVudCgnR3VhcmRhZG8gY29uIMOpeGl0byEhJylcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcclxuICAgICAgKTtcclxuICAgICAgJHN0YXRlLmdvKCdhdXRvcmlkYWRlcycpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGd1YXJkYXJFcnJvcihyZXNwb25zZSkge1xyXG4gICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAuY29udGVudCgnRXJyb3IgYWwgZ3VhcmRhciEhJylcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgIC5wYXJlbnQoJGRvY3VtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN0b2FzdEJvdW5kcycpKVxyXG4gICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzaG93QWN0aW9uVG9hc3QoKSB7XHJcbiAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgIC5jb250ZW50KCdFeGlzdGVuIGVycm9yZXMgZW4gZWwgZm9ybXVsYXJpbycpXHJcbiAgICAgICAgICAuYWN0aW9uKCdPSycpXHJcbiAgICAgICAgICAuaGlnaGxpZ2h0QWN0aW9uKGZhbHNlKVxyXG4gICAgICAgICAgLnBhcmVudCgkZG9jdW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3RvYXN0Qm91bmRzJykpXHJcbiAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQXV0b3JpZGFkRGV0YWxsZScsIEF1dG9yaWRhZERldGFsbGUpO1xyXG5cclxuICBmdW5jdGlvbiBBdXRvcmlkYWREZXRhbGxlKCRzdGF0ZSwgZ2V0QXV0b3JpZGFkUHJlcFNlcnZpY2UsIGdldE1hcHNQcmVwU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5tb2RpZnlBdXRvcmlkYWQgPSBtb2RpZnlBdXRvcmlkYWQ7XHJcbiAgICBcclxuICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgIHJldHVybiBnZXRBdXRvcmlkYWRQcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIHZtLmF1dG9yaWRhZCA9IGRhdGE7XHJcbiAgICAgICAgdm0ubWFwcyA9IGdldE1hcHNQcmVwU2VydmljZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbW9kaWZ5QXV0b3JpZGFkKGlkLCBldmVudCl7XHJcbiAgICAgICRzdGF0ZS5nbygnYXV0b3JpZGFkZXNDYW1iaW9zJywge2F1dG9yaWRhZElkOiBpZH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0F1dG9yaWRhZGVzJywgQXV0b3JpZGFkZXMpO1xyXG5cclxuICBmdW5jdGlvbiBBdXRvcmlkYWRlcyhhdXRvcmlkYWRlc1ByZXBTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5hdXRvcmlkYWRlcyA9IG51bGw7XHJcbiAgICBhY3RpdmF0ZSgpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgcmV0dXJuIGF1dG9yaWRhZGVzUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5hdXRvcmlkYWRlcyA9IGRhdGE7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdDb2ZyYWRlQWRkTW9kaWZ5JywgQ29mcmFkZUFkZE1vZGlmeSk7XHJcblxyXG4gIGZ1bmN0aW9uIENvZnJhZGVBZGRNb2RpZnkoJGZpbHRlciwgJGRvY3VtZW50LCAkbWRUb2FzdCwgJHN0YXRlLCBnZXRDb2ZyYWRlUHJlcFNlcnZpY2UsIGNvZnJhZGVzU2VydmljZSwgc2VjdG9yZXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5udWV2YUNhbGxlID0gdHJ1ZTtcclxuICAgIHZtLmNvZnJhZGUgPSB7ZGF0b3NGaW5hbmNpZXJvczoge2N1ZW50YToge30sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV1ZGE6IFtdfSxcclxuICAgICAgICAgICAgICAgICAgZGF0b3NQZXJzb25hbGVzOiAge2RpcmVjY2lvbjoge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXhvOiBcIkhvbWJyZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVjaGFJbnNjcmlwY2lvbjogbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlY2hhTmFjaW1pZW50bzogbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKX1cclxuICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgIHZtLmJhY2tTdGF0ZSAgICAgICAgICA9IGJhY2tTdGF0ZTtcclxuICAgIHZtLnF1ZXJ5U2VhcmNoICAgICAgICA9IHF1ZXJ5U2VhcmNoO1xyXG4gICAgdm0uc2VsZWN0ZWRJdGVtQ2hhbmdlID0gc2VsZWN0ZWRJdGVtQ2hhbmdlO1xyXG4gICAgdm0uY2FsY3VsYXJDQyAgICAgICAgID0gY2FsY3VsYXJDQztcclxuICAgIHZtLmNhbGN1bGFySWJhbiAgICAgICA9IGNhbGN1bGFySWJhbjtcclxuICAgIHZtLmd1YXJkYXIgICAgICAgICAgICA9IGd1YXJkYXI7XHJcblxyXG4gICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgaWYgKGdldENvZnJhZGVQcmVwU2VydmljZSl7XHJcbiAgICAgICAgZ2V0Q29mcmFkZVByZXBTZXJ2aWNlLiRwcm9taXNlLnRoZW4oaW5pdENvZnJhZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgY29mcmFkZXNTZXJ2aWNlLmdldFJlZ2lzdHJvcygpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uY29mcmFkZS5udW1lcm9PcmRlbiA9IHJlc3BvbnNlLmRhdGEubnVtZXJvT3JkZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5jb2ZyYWRlLm51bWVyb0NvZnJhZGUgPSByZXNwb25zZS5kYXRhLm51bWVyb0NvZnJhZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdENvZnJhZGUoZGF0YSkge1xyXG4gICAgICB2bS5jb2ZyYWRlID0gZGF0YTtcclxuICAgICAgdm0uY2FsbGVTZWxlY3RlZCA9IHtjYWxsZTogdm0uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuZGlyZWNjaW9uLmNhbGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNwOiB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5kaXJlY2Npb24uY3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmluY2lhOiB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5kaXJlY2Npb24ucHJvdmluY2lhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG11bmljaXBpbzogdm0uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuZGlyZWNjaW9uLm11bmljaXBpb307XHJcblxyXG4gICAgICB2bS5mZWNoYU5hY2ltaWVudG8gPSB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5mZWNoYU5hY2ltaWVudG87XHJcbiAgICAgIHZtLmZlY2hhSW5zY3JpcGNpb24gPSB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5mZWNoYUluc2NyaXBjaW9uO1xyXG4gICAgICB2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MgPSB2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MgfHwge2N1ZW50YToge30sIGRldWRhOiBbXX07XHJcbiAgICAgIHZtLmNvZnJhZGUuZGF0b3NGaW5hbmNpZXJvcy5jdWVudGEgPSB2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MuY3VlbnRhIHx8IHt9O1xyXG4gICAgICB2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MuZGV1ZGEgPSB2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MuZGV1ZGEgfHwgW107XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJhY2tTdGF0ZSgpIHtcclxuICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHF1ZXJ5U2VhcmNoKHF1ZXJ5KSB7XHJcbiAgICAgIHJldHVybiBjb2ZyYWRlc1NlcnZpY2UuZ2V0Q2FsbGVzKHF1ZXJ5KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtyZXR1cm4gcmVzcG9uc2UuZGF0YTt9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZWxlY3RlZEl0ZW1DaGFuZ2UoaXRlbSkge1xyXG4gICAgICBpZiAoaXRlbSl7XHJcbiAgICAgICAgdm0uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuZGlyZWNjaW9uLmNhbGxlID0gaXRlbS5jYWxsZTtcclxuICAgICAgICB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5kaXJlY2Npb24ubXVuaWNpcGlvID0gaXRlbS5tdW5pY2lwaW87XHJcbiAgICAgICAgdm0uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuZGlyZWNjaW9uLmNwID0gaXRlbS5jcDtcclxuICAgICAgICB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5kaXJlY2Npb24ucHJvdmluY2lhID0gaXRlbS5wcm92aW5jaWE7XHJcbiAgICAgICAgc2VhcmNoU2VjdG9yKGl0ZW0uY2FsbGUpO1xyXG4gICAgICB9ZWxzZXtcclxuICAgICAgICB2bS5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5kaXJlY2Npb24uY2FsbGUgPSBudWxsO1xyXG4gICAgICAgIHZtLmNvZnJhZGUuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5tdW5pY2lwaW8gPSBudWxsO1xyXG4gICAgICAgIHZtLmNvZnJhZGUuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5jcCA9IG51bGw7XHJcbiAgICAgICAgdm0uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuZGlyZWNjaW9uLnByb3ZpbmNpYSA9IG51bGw7XHJcbiAgICAgICAgdm0uc2VjdG9yID0gbnVsbDtcclxuICAgICAgICB2bS5udWV2YUNhbGxlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzZWFyY2hTZWN0b3IoY2FsbGUpIHtcclxuICAgICAgc2VjdG9yZXNTZXJ2aWNlLnNlY3RvcmVzUmVzdCgpLnF1ZXJ5KHtjYWxsZTogY2FsbGV9LCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5zZWN0b3IgPSBkYXRhWzBdLm51bWVyb1NlY3RvcjtcclxuICAgICAgICB2bS5udWV2YUNhbGxlID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNhbGN1bGFyQ0MoKSB7XHJcbiAgICAgIGlmICh2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MuY3VlbnRhLmliYW4pXHJcbiAgICAgICAgdm0uY29mcmFkZS5kYXRvc0ZpbmFuY2llcm9zLmN1ZW50YS5jYyA9ICRmaWx0ZXIoJ2NhbGN1bGFyQ0MnKSh2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MuY3VlbnRhLmliYW4pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNhbGN1bGFySWJhbigpIHtcclxuICAgICAgaWYgKHZtLmNvZnJhZGUuZGF0b3NGaW5hbmNpZXJvcy5jdWVudGEuY2MpXHJcbiAgICAgICAgdm0uY29mcmFkZS5kYXRvc0ZpbmFuY2llcm9zLmN1ZW50YS5pYmFuID0gJGZpbHRlcignY2FsY3VsYXJJYmFuJykodm0uY29mcmFkZS5kYXRvc0ZpbmFuY2llcm9zLmN1ZW50YS5jYyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhcihpc1ZhbGlkKSB7XHJcbiAgICAgIGlmKGlzVmFsaWQpe1xyXG4gICAgICAgIHZhciBkYXRvc0ZpbmFuY2llcm9zID0ge2N1ZW50YToge30sIGRldWRhOiBbXX07XHJcblxyXG4gICAgICAgIHZtLmNvZnJhZGUuZGF0b3NQZXJzb25hbGVzLmRpcmVjY2lvbi5jYWxsZSA9IHZtLnNlYXJjaFRleHQ7XHJcblxyXG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeSh2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MpID09PSBKU09OLnN0cmluZ2lmeShkYXRvc0ZpbmFuY2llcm9zKSlcclxuICAgICAgICAgIGRlbGV0ZSB2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3M7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIENvZnJhZGVSZXNvdXJjZSA9IGNvZnJhZGVzU2VydmljZS5jb2ZyYWRlc1Jlc3QoKTtcclxuICAgICAgICBpZih2bS5udWV2YUNhbGxlKXtcclxuICAgICAgICAgIGd1YXJkYXJDYWxsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgZ3VhcmRhckNvZnJhZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICAgIHNob3dBY3Rpb25Ub2FzdCgpO1xyXG4gICAgICBcclxuICAgICAgZnVuY3Rpb24gZ3VhcmRhckNvZnJhZGUoKXtcclxuICAgICAgICBDb2ZyYWRlUmVzb3VyY2Uuc2F2ZSh2bS5jb2ZyYWRlLCBndWFyZGFyU3VjY2VzcywgZ3VhcmRhckVycm9yKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gZ3VhcmRhckNhbGxlKCkge1xyXG4gICAgICAgIHNlY3RvcmVzU2VydmljZS5zZWN0b3Jlc1Jlc3QoKS5nZXQoe3NlY3Rvcjogdm0uc2VjdG9yfSwgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgICB2YXIgc2VjdG9yUmVzb3VyY2UgPSAgZGF0YVswXTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYoc2VjdG9yUmVzb3VyY2Upe1xyXG4gICAgICAgICAgICBzZWN0b3JSZXNvdXJjZS5jb2ZyYWRlID0gc2VjdG9yUmVzb3VyY2UuY29mcmFkZS5pZDtcclxuICAgICAgICAgICAgc2VjdG9yUmVzb3VyY2UuY2FsbGVzLnB1c2godm0uc2VhcmNoVGV4dCk7XHJcbiAgICAgICAgICAgIHNlY3RvclJlc291cmNlLiRzYXZlKG51bGwsIGd1YXJkYXJDb2ZyYWRlLCBndWFyZGFyRXJyb3IpOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyhcclxuICAgICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxyXG4gICAgICAgICAgICAgICAgLmNvbnRlbnQoJ0VsIHNlY3RvciAnICt2bS5zZWN0b3IrICcgbm8gZXhpc3RlISEnKVxyXG4gICAgICAgICAgICAgICAgLnBvc2l0aW9uKCd0b3AgcmlnaHQnKVxyXG4gICAgICAgICAgICAgICAgLnBhcmVudCgkZG9jdW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3RvYXN0Qm91bmRzJykpXHJcbiAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBndWFyZGFyU3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAuY29udGVudCgnR3VhcmRhZG8gY29uIMOpeGl0byEhJylcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcclxuICAgICAgKTtcclxuICAgICAgJHN0YXRlLmdvKCdjb2ZyYWRlcycpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGd1YXJkYXJFcnJvcihyZXNwb25zZSkge1xyXG4gICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAuY29udGVudCgnRXJyb3IgYWwgZ3VhcmRhciEhJylcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgIC5wYXJlbnQoJGRvY3VtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN0b2FzdEJvdW5kcycpKVxyXG4gICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzaG93QWN0aW9uVG9hc3QoKSB7XHJcbiAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgIC5jb250ZW50KCdFeGlzdGVuIGVycm9yZXMgZW4gZWwgZm9ybXVsYXJpbycpXHJcbiAgICAgICAgICAuYWN0aW9uKCdPSycpXHJcbiAgICAgICAgICAuaGlnaGxpZ2h0QWN0aW9uKGZhbHNlKVxyXG4gICAgICAgICAgLnBhcmVudCgkZG9jdW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3RvYXN0Qm91bmRzJykpXHJcbiAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignQ29mcmFkZURldGFsbGUnLCBDb2ZyYWRlRGV0YWxsZSk7XHJcblxyXG4gIGZ1bmN0aW9uIENvZnJhZGVEZXRhbGxlKCRzdGF0ZSwgJGZpbHRlciwgZ2V0Q29mcmFkZVByZXBTZXJ2aWNlLCBnZXRNYXBzUHJlcFNlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgdm0uY29mcmFkZSA9IG51bGw7XHJcbiAgICB2bS5tYXBzID0gbnVsbDtcclxuICAgIFxyXG4gICAgdm0ubW9kaWZ5Q29mcmFkZSA9IG1vZGlmeUNvZnJhZGU7XHJcbiAgICBcclxuICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgIHJldHVybiBnZXRDb2ZyYWRlUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5jb2ZyYWRlID0gZGF0YTtcclxuICAgICAgICBpZih2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MpXHJcbiAgICAgICAgICBpZih2bS5jb2ZyYWRlLmRhdG9zRmluYW5jaWVyb3MuY3VlbnRhKXtcclxuICAgICAgICAgICAgdm0uaWJhbiA9ICRmaWx0ZXIoJ3BhcnNlSWJhbicpKHZtLmNvZnJhZGUuZGF0b3NGaW5hbmNpZXJvcy5jdWVudGEuaWJhbik7XHJcbiAgICAgICAgICAgIHZtLmNjID0gJGZpbHRlcigncGFyc2VDQycpKHZtLmNvZnJhZGUuZGF0b3NGaW5hbmNpZXJvcy5jdWVudGEuY2MpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIHZtLm1hcHMgPSBnZXRNYXBzUHJlcFNlcnZpY2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1vZGlmeUNvZnJhZGUoaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdjb2ZyYWRlc0NhbWJpb3MnLCB7Y29mcmFkZUlkOiBpZH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0NvZnJhZGVzJywgQ29mcmFkZXMpO1xyXG5cclxuICBmdW5jdGlvbiBDb2ZyYWRlcyhjb2ZyYWRlc1ByZXBTZXJ2aWNlLCBjb2ZyYWRlc0JhamFzUHJlcFNlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLmNvZnJhZGVzID0gbnVsbDtcclxuICAgIHZtLm5leHRQYWdlID0gbnVsbDtcclxuICAgIHZtLmNvZnJhZGVzQmFqYXMgPSBudWxsO1xyXG4gICAgdm0ubmV4dFBhZ2VCYWphcyA9IG51bGw7XHJcbiAgICB2bS5zZWxlY3RlZFRhYiA9IDA7XHJcbiAgICBhY3RpdmF0ZSgpO1xyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgY29mcmFkZXNQcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIHZtLm5leHRQYWdlID0gZGF0YS5uZXh0O1xyXG4gICAgICAgIHZtLmNvZnJhZGVzID0gZGF0YS5yZXN1bHRzO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiBjb2ZyYWRlc0JhamFzUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5uZXh0UGFnZUJhamFzID0gZGF0YS5uZXh0O1xyXG4gICAgICAgIHZtLmNvZnJhZGVzQmFqYXMgPSBkYXRhLnJlc3VsdHM7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdzY3JvbGx5Jywgc2Nyb2xseSk7XHJcblxyXG4gIGZ1bmN0aW9uIHNjcm9sbHkoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoJHJvb3RTY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICB2YXIgcmF3ID0gZWxlbWVudFswXTtcclxuICAgICAgICBlbGVtZW50LmJpbmQoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGlmIChyYXcuc2Nyb2xsVG9wICsgcmF3Lm9mZnNldEhlaWdodCA+PSByYXcuc2Nyb2xsSGVpZ2h0LTUpIHtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kZW1pdChcInNjcm9sbERvd25cIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5maWx0ZXIoJ3BhcnNlSWJhbicsIHBhcnNlSWJhbilcclxuICAgIC5maWx0ZXIoJ3BhcnNlQ0MnLCBwYXJzZUNDKVxyXG4gICAgLmZpbHRlcignY2FsY3VsYXJJYmFuJywgY2FsY3VsYXJJYmFuKVxyXG4gICAgLmZpbHRlcignY2FsY3VsYXJDQycsIGNhbGN1bGFyQ0MpO1xyXG5cclxuICBmdW5jdGlvbiBwYXJzZUliYW4oKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGliYW4pIHtcclxuICAgICAgaWJhbiA9IGliYW4gfHwgJyc7XHJcbiAgICAgIHZhciBmb3JtYXR0ZWRJYmFuID0gJyc7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGliYW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoaSA+IDAgJiYgaSAlIDQgPT09IDApIHtcclxuICAgICAgICAgIGZvcm1hdHRlZEliYW4gKz0gJyAnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3JtYXR0ZWRJYmFuICs9IGliYW5baV07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZvcm1hdHRlZEliYW47XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VDQygpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoY2MpIHtcclxuICAgICAgY2MgPSBjYyB8fCAnJztcclxuICAgICAgdmFyIGZvcm1hdHRlZENDID0gJyc7XHJcblxyXG4gICAgICBmb3JtYXR0ZWRDQyA9IGNjLnN1YnN0cigwLCA0KSArICctJztcclxuICAgICAgZm9ybWF0dGVkQ0MgKz0gY2Muc3Vic3RyKDQsIDQpICsgJy0nO1xyXG4gICAgICBmb3JtYXR0ZWRDQyArPSBjYy5zdWJzdHIoOCwgMikgKyAnLSc7XHJcbiAgICAgIGZvcm1hdHRlZENDICs9IGNjLnN1YnN0cigxMCwgMTApO1xyXG5cclxuICAgICAgcmV0dXJuIGZvcm1hdHRlZENDO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNhbGN1bGFyQ0MoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGliYW4pIHtcclxuICAgICAgaWJhbiA9IGliYW4gfHwgJyc7XHJcbiAgICAgIHJldHVybiBpYmFuLnN1YnN0cig0LCAyMCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2FsY3VsYXJJYmFuKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjY2MpIHtcclxuICAgICAgdmFyIHBhaXMgPSBcIkVTXCI7XHJcbiAgICAgIHZhciBjaWZyYXMgPSBjY2MgKyB2YWxvckNpZnJhcyhwYWlzKSArIFwiMDBcIjtcclxuICAgICAgdmFyIHJlc3RvID0gbW9kdWxvKGNpZnJhcywgOTcpO1xyXG4gICAgICByZXR1cm4gcGFpcyArIGNlcm9zSXpxdWllcmRhKDk4LXJlc3RvLCAyKSArIGNjYztcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsb3JDaWZyYXMoY2lmcmFzKSB7XHJcbiAgICAgIHZhciBMRVRSQVMgPSBcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlwiO1xyXG4gICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgZm9yICh2YXIgaT0wOyBpPGNpZnJhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBwb3NpY2lvbiA9IExFVFJBUy5pbmRleE9mKGNpZnJhc1tpXSk7XHJcbiAgICAgICAgaXRlbXMucHVzaChwb3NpY2lvbiA8IDA/IFwiLVwiOiBwb3NpY2lvbik7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGl0ZW1zLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbW9kdWxvKGNpZnJhcywgZGl2aXNvcikge1xyXG4gICAgICB2YXIgQ1VFTlRBID0gMTA7XHJcbiAgICAgIHZhciBsYXJnbyA9IGNpZnJhcy5sZW5ndGg7XHJcbiAgICAgIHZhciByZXN0byA9IDA7XHJcbiAgICAgIGZvciAodmFyIGk9MDsgaTxsYXJnbzsgaSs9Q1VFTlRBKSB7XHJcbiAgICAgICAgdmFyIGRpdmlkZW5kbyA9IHJlc3RvICsgXCJcIiArIGNpZnJhcy5zdWJzdHIoaSwgQ1VFTlRBKTtcclxuICAgICAgICByZXN0byA9IGRpdmlkZW5kbyAlIGRpdmlzb3I7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlc3RvO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNlcm9zSXpxdWllcmRhKGNpZnJhcywgbGFyZ28pIHtcclxuICAgICAgY2lmcmFzICs9ICcnO1xyXG4gICAgICB3aGlsZShjaWZyYXMubGVuZ3RoIDwgbGFyZ28pIHsgY2lmcmFzID0gJzAnK2NpZnJhczsgfVxyXG4gICAgICByZXR1cm4gY2lmcmFzO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5maWx0ZXIoJ3N0cmluZ1RvRGF0ZUZvcm1hdCcsIHN0cmluZ1RvRGF0ZUZvcm1hdClcclxuICAgIC5maWx0ZXIoJ2Zvcm1hdERhdGVzJywgZm9ybWF0RGF0ZXMpO1xyXG5cclxuICBmdW5jdGlvbiBzdHJpbmdUb0RhdGVGb3JtYXQoKXtcclxuICAgIHJldHVybiBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgaWYgKGRhdGEuZGF0b3NQZXJzb25hbGVzKXtcclxuICAgICAgICBkYXRhLmRhdG9zUGVyc29uYWxlcy5mZWNoYU5hY2ltaWVudG8gID0gbmV3IERhdGUoZGF0YS5kYXRvc1BlcnNvbmFsZXMuZmVjaGFOYWNpbWllbnRvKS50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICAgICAgICBkYXRhLmRhdG9zUGVyc29uYWxlcy5mZWNoYUluc2NyaXBjaW9uID0gbmV3IERhdGUoZGF0YS5kYXRvc1BlcnNvbmFsZXMuZmVjaGFJbnNjcmlwY2lvbikudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYoZGF0YS5mZWNoYSlcclxuICAgICAgICBkYXRhLmZlY2hhICA9IG5ldyBEYXRlKGRhdGEuZmVjaGEpLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xyXG5cclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0RGF0ZXMoKXtcclxuICAgIHJldHVybiBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgXHJcbiAgICAgIHZhciBkYXRlID0gbnVsbDtcclxuICAgICAgaWYgKGRhdGEuZGF0b3NQZXJzb25hbGVzKXtcclxuICAgICAgICBkYXRlID0gZGF0YS5kYXRvc1BlcnNvbmFsZXMuZmVjaGFOYWNpbWllbnRvLnNwbGl0KFwiL1wiKTtcclxuICAgICAgICBkYXRhLmRhdG9zUGVyc29uYWxlcy5mZWNoYU5hY2ltaWVudG8gID0gZGF0ZVsyXSArICctJyArIGRhdGVbMV0gKyAnLScgKyBkYXRlWzBdO1xyXG4gICAgICAgIGRhdGUgPSBkYXRhLmRhdG9zUGVyc29uYWxlcy5mZWNoYUluc2NyaXBjaW9uLnNwbGl0KFwiL1wiKTtcclxuICAgICAgICBkYXRhLmRhdG9zUGVyc29uYWxlcy5mZWNoYUluc2NyaXBjaW9uID0gZGF0ZVsyXSArICctJyArIGRhdGVbMV0gKyAnLScgKyBkYXRlWzBdO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKGRhdGEuZmVjaGEpe1xyXG4gICAgICAgIGRhdGUgPSBkYXRhLmZlY2hhLnNwbGl0KFwiL1wiKTtcclxuICAgICAgICBkYXRhLmZlY2hhICA9IGRhdGVbMl0gKyAnLScgKyBkYXRlWzFdICsgJy0nICsgZGF0ZVswXTtcclxuICAgICAgfVxyXG4gICAgICBlbHNle1xyXG4gICAgICAgIGRhdGEgPSBuZXcgRGF0ZShkYXRhKS50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmlsdGVyKCdyZW1vdmVOdWxscycsIHJlbW92ZU51bGxzKTtcclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlTnVsbHMoKXtcclxuICAgIHJldHVybiBmdW5jdGlvbihvYmope1xyXG4gICAgICB2YXIgaXNBcnJheSA9IG9iaiBpbnN0YW5jZW9mIEFycmF5O1xyXG4gICAgICBmb3IgKHZhciBrIGluIG9iail7XHJcbiAgICAgICAgaWYgKG9ialtrXT09PW51bGwpIGlzQXJyYXkgPyBvYmouc3BsaWNlKGssMSkgOiBkZWxldGUgb2JqW2tdO1xyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvYmpba109PVwib2JqZWN0XCIpIHJlbW92ZU51bGxzKG9ialtrXSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG9iajtcclxuICAgIH07XHJcbiAgfVxyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5mYWN0b3J5KCdhc3BpcmFudGVzU2VydmljZScsIGFzcGlyYW50ZXNTZXJ2aWNlKTtcclxuXHJcbiAgZnVuY3Rpb24gYXNwaXJhbnRlc1NlcnZpY2UoJHJlc291cmNlLCAkZmlsdGVyKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBhc3BpcmFudGVzUmVzdDogYXNwaXJhbnRlc1Jlc3RcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gYXNwaXJhbnRlc1Jlc3QoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvYXNwaXJhbnRlcy86aWQuanNvbjpqc29uJywgbnVsbCwge1xyXG4gICAgICAgICdxdWVyeSc6ICB7bWV0aG9kOidHRVQnLCBpc0FycmF5OiB0cnVlfSxcclxuICAgICAgICAnZ2V0JzogICAge21ldGhvZDonR0VUJywgdHJhbnNmb3JtUmVzcG9uc2U6IGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ3N0cmluZ1RvRGF0ZUZvcm1hdCcpKGFuZ3VsYXIuZnJvbUpzb24oZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICdzYXZlJzogICB7bWV0aG9kOidQT1NUJywgdHJhbnNmb3JtUmVxdWVzdDogZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci50b0pzb24oJGZpbHRlcignZm9ybWF0RGF0ZXMnKSgkZmlsdGVyKCdyZW1vdmVOdWxscycpKGRhdGEpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICBcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgnYXV0b3JpZGFkZXNTZXJ2aWNlJywgYXV0b3JpZGFkZXNTZXJ2aWNlKTtcclxuXHJcbiAgZnVuY3Rpb24gYXV0b3JpZGFkZXNTZXJ2aWNlKCRyZXNvdXJjZSwgJGZpbHRlcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgYXV0b3JpZGFkZXNSZXN0OiBhdXRvcmlkYWRlc1Jlc3RcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gYXV0b3JpZGFkZXNSZXN0KCkge1xyXG4gICAgICByZXR1cm4gJHJlc291cmNlKCdodHRwOi8vMTI3LjAuMC4xOjUwNTAvYXBpL2F1dG9yaWRhZGVzLzppZC5qc29uOmpzb24nLCBudWxsLCB7XHJcbiAgICAgICAgJ3F1ZXJ5JzogIHttZXRob2Q6J0dFVCcsIGlzQXJyYXk6IHRydWV9LFxyXG4gICAgICAgICdzYXZlJzogICB7bWV0aG9kOidQT1NUJywgdHJhbnNmb3JtUmVxdWVzdDogZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci50b0pzb24oJGZpbHRlcigncmVtb3ZlTnVsbHMnKShkYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICBcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgnY29mcmFkZXNTZXJ2aWNlJywgY29mcmFkZXNTZXJ2aWNlKTtcclxuXHJcbiAgZnVuY3Rpb24gY29mcmFkZXNTZXJ2aWNlKCRyZXNvdXJjZSwgJGh0dHAsICRmaWx0ZXIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvZnJhZGVzUmVzdDogY29mcmFkZXNSZXN0LFxyXG4gICAgICBjb2ZyYWRlc0JhamFzUmVzdDogY29mcmFkZXNCYWphc1Jlc3QsXHJcbiAgICAgIGdldENhbGxlczogZ2V0Q2FsbGVzLFxyXG4gICAgICBnZXRSZWdpc3Ryb3M6IGdldFJlZ2lzdHJvc1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBjb2ZyYWRlc1Jlc3QoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvY29mcmFkZXMvOmlkLmpzb246anNvbicsIG51bGwsIHtcclxuICAgICAgICAncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTogZmFsc2V9LFxyXG4gICAgICAgICdnZXQnOiAgICB7bWV0aG9kOidHRVQnLCB0cmFuc2Zvcm1SZXNwb25zZTogZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGZpbHRlcignc3RyaW5nVG9EYXRlRm9ybWF0JykoYW5ndWxhci5mcm9tSnNvbihkYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgJ3NhdmUnOiAgIHttZXRob2Q6J1BPU1QnLCB0cmFuc2Zvcm1SZXF1ZXN0OiBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLnRvSnNvbigkZmlsdGVyKCdmb3JtYXREYXRlcycpKCRmaWx0ZXIoJ3JlbW92ZU51bGxzJykoZGF0YSkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29mcmFkZXNCYWphc1Jlc3QoKSB7XHJcbiAgICAgIHJldHVybiAkcmVzb3VyY2UoJ2h0dHA6Ly8xMjcuMC4wLjE6NTA1MC9hcGkvY29mcmFkZXNCYWphcy86aWQuanNvbjpqc29uJywgbnVsbCwgeydxdWVyeSc6ICB7bWV0aG9kOidHRVQnLCBpc0FycmF5OmZhbHNlfX0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldENhbGxlcyhjYWxsZSkge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCdodHRwOi8vMTI3LjAuMC4xOjUwNTAvYXBpL2NhbGxlcy8nLCB7cGFyYW1zOiB7Y2FsbGU6IGNhbGxlfX0pLlxyXG4gICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuZnJvbUpzb24ocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFJlZ2lzdHJvcygpIHtcclxuICAgICAgcmV0dXJuICRodHRwLmdldCgnaHR0cDovLzEyNy4wLjAuMTo1MDUwL2FwaS9yZWdpc3Ryb3MvJykuXHJcbiAgICAgICAgICAgICAgdGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci5mcm9tSnNvbihyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgnY29zdGFsZXJvc1NlcnZpY2UnLCBjb3N0YWxlcm9zU2VydmljZSk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvc3RhbGVyb3NTZXJ2aWNlKCRyZXNvdXJjZSwgJGZpbHRlcikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY29zdGFsZXJvc1Jlc3Q6IGNvc3RhbGVyb3NSZXN0XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvc3RhbGVyb3NSZXN0KCkge1xyXG4gICAgICByZXR1cm4gJHJlc291cmNlKCdodHRwOi8vMTI3LjAuMC4xOjUwNTAvYXBpL2Nvc3RhbGVyb3MvOmlkLmpzb246anNvbicsIG51bGwsIHtcclxuICAgICAgICAncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTogdHJ1ZX0sXHJcbiAgICAgICAgJ2dldCc6ICAgIHttZXRob2Q6J0dFVCcsIHRyYW5zZm9ybVJlc3BvbnNlOiBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkZmlsdGVyKCdzdHJpbmdUb0RhdGVGb3JtYXQnKShhbmd1bGFyLmZyb21Kc29uKGRhdGEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAnc2F2ZSc6ICAge21ldGhvZDonUE9TVCcsIHRyYW5zZm9ybVJlcXVlc3Q6IGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIudG9Kc29uKCRmaWx0ZXIoJ2Zvcm1hdERhdGVzJykoJGZpbHRlcigncmVtb3ZlTnVsbHMnKShkYXRhKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgXHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ2RpcmVjdGl2b3NTZXJ2aWNlJywgZGlyZWN0aXZvc1NlcnZpY2UpO1xyXG5cclxuICBmdW5jdGlvbiBkaXJlY3Rpdm9zU2VydmljZSgkcmVzb3VyY2UsICRmaWx0ZXIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRpcmVjdGl2b3NSZXN0OiBkaXJlY3Rpdm9zUmVzdFxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBkaXJlY3Rpdm9zUmVzdCgpIHtcclxuICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovLzEyNy4wLjAuMTo1MDUwL2FwaS9kaXJlY3Rpdm9zLzppZC5qc29uOmpzb24nLCBudWxsLCB7XHJcbiAgICAgICAgJ3F1ZXJ5JzogIHttZXRob2Q6J0dFVCcsIGlzQXJyYXk6IHRydWV9LFxyXG4gICAgICAgICdzYXZlJzogICB7bWV0aG9kOidQT1NUJywgdHJhbnNmb3JtUmVxdWVzdDogZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhci50b0pzb24oJGZpbHRlcigncmVtb3ZlTnVsbHMnKShkYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICBcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZmFjdG9yeSgnbWFwYXNTZXJ2aWNlJywgbWFwYXNTZXJ2aWNlKTtcclxuXHJcbiAgZnVuY3Rpb24gbWFwYXNTZXJ2aWNlKCRodHRwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBnZW9Db2RpbmdBUEk6IGdlb0NvZGluZ0FQSVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZW9Db2RpbmdBUEkoYWRkcmVzcykge1xyXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KCdodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvZ2VvY29kZS9qc29uJywge3BhcmFtczoge2FkZHJlc3M6IGFkZHJlc3MsIGtleTogXCJBSXphU3lEQ19PSURTbDZjdXJqQ01DTHl6bjJ5aE1tZy1lcjVrbklcIn19KS5cclxuICAgICAgdGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICB9KTtcclxuICAgIH0gICAgXHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ3NlY3RvcmVzU2VydmljZScsIHNlY3RvcmVzU2VydmljZSk7XHJcblxyXG4gIGZ1bmN0aW9uIHNlY3RvcmVzU2VydmljZSgkcmVzb3VyY2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNlY3RvcmVzUmVzdDogc2VjdG9yZXNSZXN0XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHNlY3RvcmVzUmVzdCgpIHtcclxuICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovLzEyNy4wLjAuMTo1MDUwL2FwaS9zZWN0b3Jlcy86aWQuanNvbjpqc29uJywgbnVsbCwge1xyXG4gICAgICAgICdnZXQnOiAge21ldGhvZDonR0VUJywgaXNBcnJheTogdHJ1ZX0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICBcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdDb3N0YWxlcm9BZGRNb2RpZnknLCBDb3N0YWxlcm9BZGRNb2RpZnkpO1xyXG5cclxuICBmdW5jdGlvbiBDb3N0YWxlcm9BZGRNb2RpZnkoJHNjb3BlLCAkZmlsdGVyLCAkZG9jdW1lbnQsICRtZFRvYXN0LCAkc3RhdGUsIGdldENvc3RhbGVyb1ByZXBTZXJ2aWNlLCBjb3N0YWxlcm9zU2VydmljZSwgY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5iYWNrU3RhdGUgICAgICAgICAgPSBiYWNrU3RhdGU7XHJcbiAgICB2bS5xdWVyeVNlYXJjaCAgICAgICAgPSBxdWVyeVNlYXJjaDtcclxuICAgIHZtLnNlbGVjdGVkSXRlbUNoYW5nZSA9IHNlbGVjdGVkSXRlbUNoYW5nZTtcclxuICAgIHZtLmd1YXJkYXIgICAgICAgICAgICA9IGd1YXJkYXI7XHJcblxyXG4gICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgaWYgKGdldENvc3RhbGVyb1ByZXBTZXJ2aWNlKXtcclxuICAgICAgICBnZXRDb3N0YWxlcm9QcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGluaXRDb3N0YWxlcm8pO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRDb3N0YWxlcm8oZGF0YSkge1xyXG4gICAgICB2bS5jb3N0YWxlcm8gPSBkYXRhO1xyXG4gICAgICB2bS5jb2ZyYWRlU2VsZWN0ZWQgPSB2bS5jb3N0YWxlcm8uY29mcmFkZTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYmFja1N0YXRlKCkge1xyXG4gICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcXVlcnlTZWFyY2gocXVlcnkpIHtcclxuICAgICAgdmFyIGZpbHRybyA9IHt9O1xyXG4gICAgICBpZiAoaXNOYU4ocXVlcnkpKVxyXG4gICAgICAgIGZpbHRyby5ub21icmUgPSBxdWVyeTtcclxuICAgICAgZWxzZSBpZighaXNOYU4ocXVlcnkpKVxyXG4gICAgICAgIGZpbHRyby5udW1lcm9PcmRlbiA9IHF1ZXJ5O1xyXG5cclxuICAgICAgcmV0dXJuIGNvZnJhZGVzU2VydmljZS5jb2ZyYWRlc1Jlc3QoKS5xdWVyeShmaWx0cm8pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlc3VsdHM7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlbGVjdGVkSXRlbUNoYW5nZShpdGVtKSB7XHJcbiAgICAgIHZtLmNvc3RhbGVyby5jb2ZyYWRlID0gIGl0ZW0gPyBpdGVtLmlkIDogbnVsbDtcclxuICAgIH0gICAgXHJcblxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhcihpc1ZhbGlkKSB7XHJcbiAgICAgIGlmKGlzVmFsaWQpe1xyXG4gICAgICAgIHZtLmNvc3RhbGVyby5mZWNoYSA9ICh2bS5jb3N0YWxlcm8uZmVjaGEgPT09IFwiXCIpID8gbnVsbCA6IHZtLmNvc3RhbGVyby5mZWNoYTtcclxuICAgICAgICBpZiAoIXZtLmNvc3RhbGVyby5jb2ZyYWRlKXtcclxuICAgICAgICAgICRzY29wZS5jb3N0YWxlcm9Gb3JtLmNvZnJhZGUuJGVycm9yLnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgIHNob3dBY3Rpb25Ub2FzdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgY29zdGFsZXJvc1NlcnZpY2UuY29zdGFsZXJvc1Jlc3QoKS5zYXZlKHZtLmNvc3RhbGVybywgZ3VhcmRhclN1Y2Nlc3MsIGd1YXJkYXJFcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBzaG93QWN0aW9uVG9hc3QoKTtcclxuICAgIH1cclxuICAgICAgXHJcbiAgICBmdW5jdGlvbiBndWFyZGFyU3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAuY29udGVudCgnR3VhcmRhZG8gY29uIMOpeGl0byEhJylcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcclxuICAgICAgKTtcclxuICAgICAgJHN0YXRlLmdvKCdjb3N0YWxlcm9zJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhckVycm9yKHJlc3BvbnNlKSB7XHJcbiAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgIC5jb250ZW50KCdFcnJvciBhbCBndWFyZGFyISEnKVxyXG4gICAgICAgICAgLnBvc2l0aW9uKCd0b3AgcmlnaHQnKVxyXG4gICAgICAgICAgLnBhcmVudCgkZG9jdW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3RvYXN0Qm91bmRzJykpXHJcbiAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHNob3dBY3Rpb25Ub2FzdCgpIHtcclxuICAgICAgJG1kVG9hc3Quc2hvdyhcclxuICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxyXG4gICAgICAgICAgLmNvbnRlbnQoJ0V4aXN0ZW4gZXJyb3JlcyBlbiBlbCBmb3JtdWxhcmlvJylcclxuICAgICAgICAgIC5hY3Rpb24oJ09LJylcclxuICAgICAgICAgIC5oaWdobGlnaHRBY3Rpb24oZmFsc2UpXHJcbiAgICAgICAgICAucGFyZW50KCRkb2N1bWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdG9hc3RCb3VuZHMnKSlcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdDb3N0YWxlcm9EZXRhbGxlJywgQ29zdGFsZXJvRGV0YWxsZSk7XHJcblxyXG4gIGZ1bmN0aW9uIENvc3RhbGVyb0RldGFsbGUoJHN0YXRlLCBnZXRDb3N0YWxlcm9QcmVwU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5tb2RpZnlDb3N0YWxlcm8gPSBtb2RpZnlDb3N0YWxlcm87XHJcbiAgICBcclxuICAgIGFjdGl2YXRlKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgIHJldHVybiBnZXRDb3N0YWxlcm9QcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIHZtLmNvc3RhbGVybyA9IGRhdGE7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1vZGlmeUNvc3RhbGVybyhpZCwgZXZlbnQpe1xyXG4gICAgICAkc3RhdGUuZ28oJ2Nvc3RhbGVyb3NDYW1iaW9zJywge2Nvc3RhbGVyb0lkOiBpZH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0Nvc3RhbGVyb3MnLCBDb3N0YWxlcm9zKTtcclxuXHJcbiAgZnVuY3Rpb24gQ29zdGFsZXJvcyhjb3N0YWxlcm9zUHJlcFNlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLmNvc3RhbGVyb3MgPSBudWxsO1xyXG4gICAgYWN0aXZhdGUoKTtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XHJcbiAgICAgIHJldHVybiBjb3N0YWxlcm9zUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5jb3N0YWxlcm9zID0gZGF0YTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0RpcmVjdGl2b0FkZE1vZGlmeScsIERpcmVjdGl2b0FkZE1vZGlmeSk7XHJcblxyXG4gIGZ1bmN0aW9uIERpcmVjdGl2b0FkZE1vZGlmeSgkc2NvcGUsICRkb2N1bWVudCwgJG1kVG9hc3QsICRzdGF0ZSwgZ2V0RGlyZWN0aXZvUHJlcFNlcnZpY2UsIGRpcmVjdGl2b3NTZXJ2aWNlLCBjb2ZyYWRlc1NlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLm5ld0NvZnJhZGUgPSBmYWxzZTtcclxuXHJcbiAgICB2bS5iYWNrU3RhdGUgICAgICAgICAgPSBiYWNrU3RhdGU7XHJcbiAgICB2bS5xdWVyeVNlYXJjaCAgICAgICAgPSBxdWVyeVNlYXJjaDtcclxuICAgIHZtLnNlbGVjdGVkSXRlbUNoYW5nZSA9IHNlbGVjdGVkSXRlbUNoYW5nZTtcclxuICAgIHZtLmd1YXJkYXIgICAgICAgICAgICA9IGd1YXJkYXI7XHJcblxyXG4gICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgaWYgKGdldERpcmVjdGl2b1ByZXBTZXJ2aWNlKXtcclxuICAgICAgICBnZXREaXJlY3Rpdm9QcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGluaXREaXJlY3Rpdm8pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgbmV3RGlyZWN0aXZvKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdERpcmVjdGl2byhkYXRhKSB7XHJcbiAgICAgIHZtLmRpcmVjdGl2byA9IGRhdGE7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5ld0RpcmVjdGl2bygpIHtcclxuICAgICAgdm0ubmV3Q29mcmFkZSA9IHRydWU7XHJcbiAgICAgIHZtLmRpcmVjdGl2byA9IHtjb2ZyYWRlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZmVjaGE6IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGJhY2tTdGF0ZSgpIHtcclxuICAgICAgd2luZG93Lmhpc3RvcnkuYmFjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHF1ZXJ5U2VhcmNoKHF1ZXJ5KSB7XHJcbiAgICAgIHZhciBmaWx0cm8gPSB7fTtcclxuICAgICAgaWYgKGlzTmFOKHF1ZXJ5KSlcclxuICAgICAgICBmaWx0cm8ubm9tYnJlID0gcXVlcnk7XHJcbiAgICAgIGVsc2UgaWYoIWlzTmFOKHF1ZXJ5KSlcclxuICAgICAgICBmaWx0cm8ubnVtZXJvT3JkZW4gPSBxdWVyeTtcclxuXHJcbiAgICAgIHJldHVybiBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNSZXN0KCkucXVlcnkoZmlsdHJvKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZS5yZXN1bHRzO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZWxlY3RlZEl0ZW1DaGFuZ2UoaXRlbSkge1xyXG4gICAgICB2bS5kaXJlY3Rpdm8uY29mcmFkZSA9ICBpdGVtID8gaXRlbS5pZCA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhcihpc1ZhbGlkKSB7XHJcbiAgICAgIGlmKGlzVmFsaWQpe1xyXG4gICAgICAgIGlmICghdm0uZGlyZWN0aXZvLmNvZnJhZGUpe1xyXG4gICAgICAgICAgJHNjb3BlLmRpcmVjdGl2b0Zvcm0uY29mcmFkZS4kZXJyb3IucmVxdWlyZWQgPSB0cnVlO1xyXG4gICAgICAgICAgc2hvd0FjdGlvblRvYXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICB2bS5kaXJlY3Rpdm8uY29mcmFkZSA9IHZtLmRpcmVjdGl2by5jb2ZyYWRlLmlkID8gdm0uZGlyZWN0aXZvLmNvZnJhZGUuaWQgOiB2bS5kaXJlY3Rpdm8uY29mcmFkZTtcclxuICAgICAgICAgIGRpcmVjdGl2b3NTZXJ2aWNlLmRpcmVjdGl2b3NSZXN0KCkuc2F2ZSh2bS5kaXJlY3Rpdm8sIGd1YXJkYXJTdWNjZXNzLCBndWFyZGFyRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlXHJcbiAgICAgICAgc2hvd0FjdGlvblRvYXN0KCk7XHJcbiAgICB9XHJcbiAgICAgIFxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhclN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgJG1kVG9hc3Quc2hvdyhcclxuICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxyXG4gICAgICAgICAgLmNvbnRlbnQoJ0d1YXJkYWRvIGNvbiDDqXhpdG8hIScpXHJcbiAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXHJcbiAgICAgICk7XHJcbiAgICAgICRzdGF0ZS5nbygnZGlyZWN0aXZvcycpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGd1YXJkYXJFcnJvcihyZXNwb25zZSkge1xyXG4gICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAuY29udGVudCgnRXJyb3IgYWwgZ3VhcmRhciEhJylcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgIC5wYXJlbnQoJGRvY3VtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN0b2FzdEJvdW5kcycpKVxyXG4gICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBzaG93QWN0aW9uVG9hc3QoKSB7XHJcbiAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgIC5jb250ZW50KCdFeGlzdGVuIGVycm9yZXMgZW4gZWwgZm9ybXVsYXJpbycpXHJcbiAgICAgICAgICAuYWN0aW9uKCdPSycpXHJcbiAgICAgICAgICAuaGlnaGxpZ2h0QWN0aW9uKGZhbHNlKVxyXG4gICAgICAgICAgLnBhcmVudCgkZG9jdW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3RvYXN0Qm91bmRzJykpXHJcbiAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignRGlyZWN0aXZvRGV0YWxsZScsIERpcmVjdGl2b0RldGFsbGUpO1xyXG5cclxuICBmdW5jdGlvbiBEaXJlY3Rpdm9EZXRhbGxlKCRzdGF0ZSwgZ2V0RGlyZWN0aXZvUHJlcFNlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgdm0ubW9kaWZ5RGlyZWN0aXZvID0gbW9kaWZ5RGlyZWN0aXZvO1xyXG4gICAgXHJcbiAgICBhY3RpdmF0ZSgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICByZXR1cm4gZ2V0RGlyZWN0aXZvUHJlcFNlcnZpY2UuJHByb21pc2UudGhlbihmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICB2bS5kaXJlY3Rpdm8gPSBkYXRhO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlEaXJlY3Rpdm8oaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdkaXJlY3Rpdm9zQ2FtYmlvcycsIHtkaXJlY3Rpdm9JZDogaWR9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdEaXJlY3Rpdm9zJywgRGlyZWN0aXZvcyk7XHJcblxyXG4gIGZ1bmN0aW9uIERpcmVjdGl2b3MoZGlyZWN0aXZvc1ByZXBTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5kaXJlY3Rpdm9zID0gbnVsbDtcclxuICAgIGFjdGl2YXRlKCk7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICByZXR1cm4gZGlyZWN0aXZvc1ByZXBTZXJ2aWNlLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgdm0uZGlyZWN0aXZvcyA9IGRhdGE7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdTZWN0b3JBZGRNb2RpZnknLCBTZWN0b3JBZGRNb2RpZnkpO1xyXG5cclxuICBmdW5jdGlvbiBTZWN0b3JBZGRNb2RpZnkoJHNjb3BlLCAkZmlsdGVyLCAkZG9jdW1lbnQsICRtZFRvYXN0LCAkc3RhdGUsICRzdGF0ZVBhcmFtcywgZ2V0U2VjdG9yUHJlcFNlcnZpY2UsIHNlY3RvcmVzU2VydmljZSwgY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5uZXdFbmNhcmdhZG8gPSBmYWxzZTtcclxuICAgIHZtLm5ld0NhbGxlICAgICA9IGZhbHNlO1xyXG4gICAgdm0uaW5kZXhDYWxsZSAgID0gbnVsbDtcclxuXHJcbiAgICB2bS5iYWNrU3RhdGUgICAgICAgICAgPSBiYWNrU3RhdGU7XHJcbiAgICB2bS5xdWVyeVNlYXJjaCAgICAgICAgPSBxdWVyeVNlYXJjaDtcclxuICAgIHZtLnNlbGVjdGVkSXRlbUNoYW5nZSA9IHNlbGVjdGVkSXRlbUNoYW5nZTtcclxuICAgIHZtLmd1YXJkYXIgICAgICAgICAgICA9IGd1YXJkYXI7XHJcblxyXG4gICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgaWYgKGdldFNlY3RvclByZXBTZXJ2aWNlKXtcclxuICAgICAgICBnZXRTZWN0b3JQcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGluaXRTZWN0b3IpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgbmV3RW5jYXJnYWRvKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0U2VjdG9yKGRhdGEpIHtcclxuICAgICAgdm0uc2VjdG9yID0gZGF0YVswXTtcclxuICAgICAgdm0uY29mcmFkZVNlbGVjdGVkID0gdm0uc2VjdG9yLmNvZnJhZGU7XHJcbiAgICAgIHZtLm9yaWdpblNlY3RvciA9IHZtLnNlY3Rvci5udW1lcm9TZWN0b3I7XHJcbiAgICAgIGlmICgkc3RhdGVQYXJhbXMuY2FsbGUgPT09ICduZXcnKXtcclxuICAgICAgICB2bS5uZXdDYWxsZSA9IHRydWU7XHJcbiAgICAgICAgdm0uaW5kZXhDYWxsZSA9IHZtLnNlY3Rvci5jYWxsZXMubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgdm0uaW5kZXhDYWxsZSA9ICh2bS5zZWN0b3IuY2FsbGVzLmluZGV4T2YoJHN0YXRlUGFyYW1zLmNhbGxlKSA+IC0xKSA/IHZtLnNlY3Rvci5jYWxsZXMuaW5kZXhPZigkc3RhdGVQYXJhbXMuY2FsbGUpIDogbnVsbDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBuZXdFbmNhcmdhZG8oKSB7XHJcbiAgICAgIHZtLm5ld0VuY2FyZ2FkbyA9IHRydWU7XHJcbiAgICAgIHZtLnNlY3RvciA9IHtjb2ZyYWRlOiBudWxsfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBiYWNrU3RhdGUoKSB7XHJcbiAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBxdWVyeVNlYXJjaChxdWVyeSkge1xyXG4gICAgICB2YXIgZmlsdHJvID0ge307XHJcbiAgICAgIGlmIChpc05hTihxdWVyeSkpXHJcbiAgICAgICAgZmlsdHJvLm5vbWJyZSA9IHF1ZXJ5O1xyXG4gICAgICBlbHNlIGlmKCFpc05hTihxdWVyeSkpXHJcbiAgICAgICAgZmlsdHJvLm51bWVyb09yZGVuID0gcXVlcnk7XHJcblxyXG4gICAgICByZXR1cm4gY29mcmFkZXNTZXJ2aWNlLmNvZnJhZGVzUmVzdCgpLnF1ZXJ5KGZpbHRybykuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVzdWx0cztcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2VsZWN0ZWRJdGVtQ2hhbmdlKGl0ZW0pIHtcclxuICAgICAgdm0uc2VjdG9yLmNvZnJhZGUgPSAgaXRlbSA/IGl0ZW0uaWQgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGd1YXJkYXIoaXNWYWxpZCkge1xyXG4gICAgICBpZihpc1ZhbGlkKXtcclxuICAgICAgICBpZiAoIXZtLnNlY3Rvci5jb2ZyYWRlKXtcclxuICAgICAgICAgICRzY29wZS5zZWN0b3JGb3JtLmNvZnJhZGUuJGVycm9yLnJlcXVpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgIHNob3dBY3Rpb25Ub2FzdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgaWYgKHZtLnNlY3Rvci5udW1lcm9TZWN0b3IgPT09IHZtLm9yaWdpblNlY3RvciB8fCB2bS5uZXdFbmNhcmdhZG8pe1xyXG4gICAgICAgICAgICBndWFyZGFyU2VjdG9yKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBndWFyZGFyQ2FtYmlvU2VjdG9yKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBzaG93QWN0aW9uVG9hc3QoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhclNlY3Rvcigpe1xyXG4gICAgICBzZWN0b3Jlc1NlcnZpY2Uuc2VjdG9yZXNSZXN0KCkuc2F2ZSh2bS5zZWN0b3IsIGd1YXJkYXJTdWNjZXNzLCBndWFyZGFyRXJyb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGd1YXJkYXJDYW1iaW9TZWN0b3IoKXtcclxuICAgICAgc2VjdG9yZXNTZXJ2aWNlLnNlY3RvcmVzUmVzdCgpLmdldCh7c2VjdG9yOiB2bS5zZWN0b3IubnVtZXJvU2VjdG9yfSkuJHByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZVswXSl7XHJcbiAgICAgICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxyXG4gICAgICAgICAgICAgIC5jb250ZW50KCdObyBleGlzdGUgZXNlIHNlY3RvcicpXHJcbiAgICAgICAgICAgICAgLnBvc2l0aW9uKCd0b3AgcmlnaHQnKVxyXG4gICAgICAgICAgICAgIC5wYXJlbnQoJGRvY3VtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN0b2FzdEJvdW5kcycpKVxyXG4gICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc3BvbnNlWzBdLmNvZnJhZGUgPSByZXNwb25zZVswXS5jb2ZyYWRlLmlkO1xyXG4gICAgICAgIHJlc3BvbnNlWzBdLmNhbGxlcy5wdXNoKHZtLnNlY3Rvci5jYWxsZXNbdm0uaW5kZXhDYWxsZV0pO1xyXG4gICAgICAgIHJlc3BvbnNlWzBdLiRzYXZlKG51bGwsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uc2VjdG9yLmNhbGxlcy5zcGxpY2Uodm0uaW5kZXhDYWxsZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uc2VjdG9yLm51bWVyb1NlY3RvciA9IHZtLm9yaWdpblNlY3RvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWFyZGFyU2VjdG9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGd1YXJkYXJFcnJvcik7XHJcbiAgICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGd1YXJkYXJTdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgIC5jb250ZW50KCdHdWFyZGFkbyBjb24gw6l4aXRvISEnKVxyXG4gICAgICAgICAgLnBvc2l0aW9uKCd0b3AgcmlnaHQnKVxyXG4gICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICApO1xyXG4gICAgICAkc3RhdGUuZ28oJ3NlY3RvcmVzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ3VhcmRhckVycm9yKHJlc3BvbnNlKSB7XHJcbiAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgIC5jb250ZW50KCdFcnJvciBhbCBndWFyZGFyISEnKVxyXG4gICAgICAgICAgLnBvc2l0aW9uKCd0b3AgcmlnaHQnKVxyXG4gICAgICAgICAgLnBhcmVudCgkZG9jdW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3RvYXN0Qm91bmRzJykpXHJcbiAgICAgICAgICAuaGlkZURlbGF5KDMwMDApXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHNob3dBY3Rpb25Ub2FzdCgpIHtcclxuICAgICAgJG1kVG9hc3Quc2hvdyhcclxuICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxyXG4gICAgICAgICAgLmNvbnRlbnQoJ0V4aXN0ZW4gZXJyb3JlcyBlbiBlbCBmb3JtdWxhcmlvJylcclxuICAgICAgICAgIC5hY3Rpb24oJ09LJylcclxuICAgICAgICAgIC5oaWdobGlnaHRBY3Rpb24oZmFsc2UpXHJcbiAgICAgICAgICAucGFyZW50KCRkb2N1bWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdG9hc3RCb3VuZHMnKSlcclxuICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdTZWN0b3JEZXRhbGxlJywgU2VjdG9yRGV0YWxsZSk7XHJcblxyXG4gIGZ1bmN0aW9uIFNlY3RvckRldGFsbGUoJHN0YXRlLCBnZXRTZWN0b3JQcmVwU2VydmljZSwgZ2V0TWFwc1ByZXBTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLm1vZGlmeVNlY3RvciA9IG1vZGlmeVNlY3RvcjtcclxuICAgIFxyXG4gICAgYWN0aXZhdGUoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcclxuICAgICAgcmV0dXJuIGdldFNlY3RvclByZXBTZXJ2aWNlLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgdm0uc2VjdG9yID0gZGF0YTtcclxuICAgICAgICB2bS5tYXBzID0gZ2V0TWFwc1ByZXBTZXJ2aWNlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlTZWN0b3IoaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdzZWN0b3Jlc0NhbWJpb3MnLCB7c2VjdG9ySWQ6IGlkfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignU2VjdG9yZXMnLCBTZWN0b3Jlcyk7XHJcblxyXG4gIGZ1bmN0aW9uIFNlY3RvcmVzKHNlY3RvcmVzUHJlcFNlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLnNlY3RvcmVzID0gbnVsbDtcclxuICAgIGFjdGl2YXRlKCk7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xyXG4gICAgICByZXR1cm4gc2VjdG9yZXNQcmVwU2VydmljZS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIHZtLnNlY3RvcmVzID0gZGF0YTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdMaXN0YUFzcGlyYW50ZXMnLCBMaXN0YUFzcGlyYW50ZXMpO1xyXG5cclxuICBmdW5jdGlvbiBMaXN0YUFzcGlyYW50ZXMoJHN0YXRlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5tb2RpZnlBc3BpcmFudGUgPSBtb2RpZnlBc3BpcmFudGU7XHJcbiAgICB2bS5nb1RvQXNwaXJhbnRlICAgPSBnb1RvQXNwaXJhbnRlO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdvVG9Bc3BpcmFudGUoaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdhc3BpcmFudGVzRGV0YWxsZScsIHthc3BpcmFudGVJZDogaWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlBc3BpcmFudGUoaWQsIGV2ZW50KXtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICRzdGF0ZS5nbygnYXNwaXJhbnRlc0NhbWJpb3MnLCB7YXNwaXJhbnRlSWQ6IGlkfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2xpc3RhQXNwaXJhbnRlcycsIGxpc3RhQXNwaXJhbnRlcyk7XHJcblxyXG5cclxuICBmdW5jdGlvbiBsaXN0YUFzcGlyYW50ZXMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RpcmVjdGl2ZXMvYXNwaXJhbnRlcy9saXN0L2FzcGlyYW50ZXMuZGlyZWN0aXZlLmh0bWwnLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIGFzcGlyYW50ZXM6ICc9YXNwaXJhbnRlcycgICAgICAgIFxyXG4gICAgICB9LFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgICBzY29wZS4kd2F0Y2goJ3ZtLmFzcGlyYW50ZXMnLCBmdW5jdGlvbihuZXdWYWwpIHtcclxuICAgICAgICAgICAgaWYobmV3VmFsKSB7IFxyXG4gICAgICAgICAgICAgIHNjb3BlLnZtLmFzcGlyYW50ZXNTaG9ydCA9IHNjb3BlLnZtLmFzcGlyYW50ZXMubWFwKGZ1bmN0aW9uKGFzcGlyYW50ZSl7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXV4ID0ge2lkOiBhc3BpcmFudGUuaWQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmZWNoYTogYXNwaXJhbnRlLmZlY2hhfTtcclxuICAgICAgICAgICAgICAgIGlmIChhc3BpcmFudGUuY29mcmFkZSl7XHJcbiAgICAgICAgICAgICAgICAgIGF1eC5udW1lcm9PcmRlbiA9IGFzcGlyYW50ZS5jb2ZyYWRlLm51bWVyb09yZGVuO1xyXG4gICAgICAgICAgICAgICAgICBhdXgubm9tYnJlID0gYXNwaXJhbnRlLmNvZnJhZGUuZGF0b3NQZXJzb25hbGVzLm5vbWJyZSAgICArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3BpcmFudGUuY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuYXBlbGxpZG8xICsgJyAnICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3BpcmFudGUuY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuYXBlbGxpZG8yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1eDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjogJ0xpc3RhQXNwaXJhbnRlcycsXHJcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignUmVtb3ZlQXNwaXJhbnRlJywgUmVtb3ZlQXNwaXJhbnRlKTtcclxuXHJcbiAgZnVuY3Rpb24gUmVtb3ZlQXNwaXJhbnRlKCRzdGF0ZSwgJG1kRGlhbG9nLCBhc3BpcmFudGVzU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5yZW1vdmVBc3BpcmFudGUgPSByZW1vdmVBc3BpcmFudGU7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFzcGlyYW50ZShpZCwgZXZlbnQpe1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgdmFyIHJlbW92ZURpYWxvZyA9ICRtZERpYWxvZy5jb25maXJtKClcclxuICAgICAgICAgIC50aXRsZSgnRWxpbWluYXIgYXNwaXJhbnRlJylcclxuICAgICAgICAgIC5jb250ZW50KCfCv0VzdMOhIHNlZ3VybyBxdWUgZGVzZWEgZWxpbWluYXIgZXN0ZSBhc3BpcmFudGU/PGJyPlBlcmRlcsOhIHN1IGFudGlndWVkYWQuJylcclxuICAgICAgICAgIC5hcmlhTGFiZWwoJ0VsaW1pbmFyIGFzcGlyYW50ZScpXHJcbiAgICAgICAgICAudGFyZ2V0RXZlbnQoZXZlbnQpXHJcbiAgICAgICAgICAub2soJ0FjZXB0YXInKVxyXG4gICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsYXInKVxyXG4gICAgICAgICAgLmNsaWNrT3V0c2lkZVRvQ2xvc2UodHJ1ZSk7XHJcbiAgICAgICRtZERpYWxvZy5zaG93KHJlbW92ZURpYWxvZykudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZW1vdmVFbmRBc3BpcmFudGUoaWQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVFbmRBc3BpcmFudGUoaWQpe1xyXG4gICAgICB2YXIgYXNwaXJhbnRlID0gYXNwaXJhbnRlc1NlcnZpY2UuYXNwaXJhbnRlc1Jlc3QoKS5nZXQoe2lkOiBpZH0sIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgYXNwaXJhbnRlLiRkZWxldGUoe2lkOiBpZH0pLnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgIGlmKCRzdGF0ZS5jdXJyZW50Lm5hbWUgPT09ICdhc3BpcmFudGVzJyl7XHJcbiAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsIG51bGwsIHtcclxuICAgICAgICAgICAgICByZWxvYWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgaW5oZXJpdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgbm90aWZ5OiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdhc3BpcmFudGVzJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdyZW1vdmVBc3BpcmFudGUnLCByZW1vdmVBc3BpcmFudGUpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlQXNwaXJhbnRlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9kaXJlY3RpdmVzL2FzcGlyYW50ZXMvcmVtb3ZlL3JlbW92ZUFzcGlyYW50ZS5kaXJlY3RpdmUuaHRtbCcsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgYXNwaXJhbnRlSWQ6ICc9YXNwaXJhbnRlJyAgICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdSZW1vdmVBc3BpcmFudGUnLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0xpc3RhQXV0b3JpZGFkZXMnLCBMaXN0YUF1dG9yaWRhZGVzKTtcclxuXHJcbiAgZnVuY3Rpb24gTGlzdGFBdXRvcmlkYWRlcygkc3RhdGUpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLm1vZGlmeUF1dG9yaWRhZCA9IG1vZGlmeUF1dG9yaWRhZDtcclxuICAgIHZtLmdvVG9BdXRvcmlkYWQgICA9IGdvVG9BdXRvcmlkYWQ7XHJcblxyXG4gICAgZnVuY3Rpb24gZ29Ub0F1dG9yaWRhZChpZCwgZXZlbnQpe1xyXG4gICAgICAkc3RhdGUuZ28oJ2F1dG9yaWRhZGVzRGV0YWxsZScsIHthdXRvcmlkYWRJZDogaWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlBdXRvcmlkYWQoaWQsIGV2ZW50KXtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICRzdGF0ZS5nbygnYXV0b3JpZGFkZXNDYW1iaW9zJywge2F1dG9yaWRhZElkOiBpZH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdsaXN0YUF1dG9yaWRhZGVzJywgbGlzdGFBdXRvcmlkYWRlcyk7XHJcblxyXG5cclxuICBmdW5jdGlvbiBsaXN0YUF1dG9yaWRhZGVzKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9kaXJlY3RpdmVzL2F1dG9yaWRhZGVzL2xpc3QvYXV0b3JpZGFkZXMuZGlyZWN0aXZlLmh0bWwnLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIGF1dG9yaWRhZGVzOiAnPWF1dG9yaWRhZGVzJyAgICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdMaXN0YUF1dG9yaWRhZGVzJyxcclxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdSZW1vdmVBdXRvcmlkYWQnLCBSZW1vdmVBdXRvcmlkYWQpO1xyXG5cclxuICBmdW5jdGlvbiBSZW1vdmVBdXRvcmlkYWQoJHN0YXRlLCAkbWREaWFsb2csIGF1dG9yaWRhZGVzU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5yZW1vdmVBdXRvcmlkYWQgPSByZW1vdmVBdXRvcmlkYWQ7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHJlbW92ZUF1dG9yaWRhZChpZCwgZXZlbnQpe1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgdmFyIHJlbW92ZURpYWxvZyA9ICRtZERpYWxvZy5jb25maXJtKClcclxuICAgICAgICAgIC50aXRsZSgnRWxpbWluYXIgYXV0b3JpZGFkJylcclxuICAgICAgICAgIC5jb250ZW50KCfCv0VzdMOhIHNlZ3VybyBxdWUgZGVzZWEgZWxpbWluYXIgZXN0ZSBhdXRvcmlkYWQ/JylcclxuICAgICAgICAgIC5hcmlhTGFiZWwoJ0VsaW1pbmFyIGF1dG9yaWRhZCcpXHJcbiAgICAgICAgICAudGFyZ2V0RXZlbnQoZXZlbnQpXHJcbiAgICAgICAgICAub2soJ0FjZXB0YXInKVxyXG4gICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsYXInKVxyXG4gICAgICAgICAgLmNsaWNrT3V0c2lkZVRvQ2xvc2UodHJ1ZSk7XHJcbiAgICAgICRtZERpYWxvZy5zaG93KHJlbW92ZURpYWxvZykudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZW1vdmVFbmRBdXRvcmlkYWQoaWQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVFbmRBdXRvcmlkYWQoaWQpe1xyXG4gICAgICB2YXIgYXV0b3JpZGFkID0gYXV0b3JpZGFkZXNTZXJ2aWNlLmF1dG9yaWRhZGVzUmVzdCgpLmdldCh7aWQ6IGlkfSwgZnVuY3Rpb24oKXtcclxuICAgICAgICBhdXRvcmlkYWQuJGRlbGV0ZSh7aWQ6IGlkfSkudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgaWYoJHN0YXRlLmN1cnJlbnQubmFtZSA9PT0gJ2F1dG9yaWRhZGVzJyl7XHJcbiAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsIG51bGwsIHtcclxuICAgICAgICAgICAgICByZWxvYWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgaW5oZXJpdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgbm90aWZ5OiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdhdXRvcmlkYWRlcycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgncmVtb3ZlQXV0b3JpZGFkJywgcmVtb3ZlQXV0b3JpZGFkKTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZUF1dG9yaWRhZCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiAnLi90ZW1wbGF0ZXMvZGlyZWN0aXZlcy9hdXRvcmlkYWRlcy9yZW1vdmUvcmVtb3ZlQXV0b3JpZGFkLmRpcmVjdGl2ZS5odG1sJyxcclxuICAgICAgc2NvcGU6IHtcclxuICAgICAgICBhdXRvcmlkYWRJZDogJz1hdXRvcmlkYWQnICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjogJ1JlbW92ZUF1dG9yaWRhZCcsXHJcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignTGlzdGFDb2ZyYWRlcycsIExpc3RhQ29mcmFkZXMpO1xyXG5cclxuICBmdW5jdGlvbiBMaXN0YUNvZnJhZGVzKCRyb290U2NvcGUsICRzY29wZSwgJHN0YXRlLCBjb2ZyYWRlc1NlcnZpY2UpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLmZpbHRybyAgICA9ICdub21icmUnO1xyXG4gICAgdm0udHlwZUlucHV0ID0gJ3RleHQnO1xyXG4gICAgdm0uYnVzY2FyICAgID0gbnVsbDtcclxuXHJcbiAgICB2bS5zZWFyY2ggICAgICAgICA9IHNlYXJjaDtcclxuICAgIHZtLnJhZGlvQ2hhbmdlICAgID0gcmFkaW9DaGFuZ2U7XHJcbiAgICB2bS5nb1RvQ29mcmFkZSAgICA9IGdvVG9Db2ZyYWRlO1xyXG4gICAgdm0ubW9kaWZ5Q29mcmFkZSAgPSBtb2RpZnlDb2ZyYWRlO1xyXG5cclxuICAgIHZhciBoYW5kbGVyID0gJHJvb3RTY29wZS4kb24oJ3Njcm9sbERvd24nLCBnZXROZXh0UGFnZSk7XHJcblxyXG4gICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcclxuICAgICAgaGFuZGxlcigpO1xyXG4gICAgICBoYW5kbGVyID0gbnVsbDtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldE5leHRQYWdlKCkge1xyXG4gICAgICBpZiAoIXZtLmJhamFzKVxyXG4gICAgICAgIGdldE5leHRQYWdlQWx0YXMoKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGdldE5leHRQYWdlQmFqYXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXROZXh0UGFnZUFsdGFzKCkge1xyXG4gICAgICBpZiAodm0ubmV4dFBhZ2Upe1xyXG4gICAgICAgIHZhciBwYXJhbWV0ZXJzID0ge3BhZ2U6IHZtLm5leHRQYWdlfTtcclxuXHJcbiAgICAgICAgaWYgKHZtLmJ1c2NhcilcclxuICAgICAgICAgIHBhcmFtZXRlcnNbdm0uZmlsdHJvXSA9IHZtLmJ1c2NhcjtcclxuXHJcbiAgICAgICAgY29mcmFkZXNTZXJ2aWNlLmNvZnJhZGVzUmVzdCgpLnF1ZXJ5KHBhcmFtZXRlcnMsIGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgICAgdm0ubmV4dFBhZ2UgPSBkYXRhLm5leHQ7XHJcbiAgICAgICAgICB2bS5jb2ZyYWRlcyA9IHZtLmNvZnJhZGVzLmNvbmNhdChkYXRhLnJlc3VsdHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0TmV4dFBhZ2VCYWphcygpIHtcclxuICAgICAgaWYgKHZtLm5leHRQYWdlQmFqYXMpe1xyXG4gICAgICAgIHZhciBwYXJhbWV0ZXJzID0ge3BhZ2U6IHZtLm5leHRQYWdlQmFqYXN9O1xyXG5cclxuICAgICAgICBpZiAodm0uYnVzY2FyKVxyXG4gICAgICAgICAgcGFyYW1ldGVyc1t2bS5maWx0cm9dID0gdm0uYnVzY2FyO1xyXG5cclxuICAgICAgICBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNCYWphc1Jlc3QoKS5xdWVyeShwYXJhbWV0ZXJzLCBmdW5jdGlvbihkYXRhKXtcclxuICAgICAgICAgIHZtLm5leHRQYWdlQmFqYXMgPSBkYXRhLm5leHQ7XHJcbiAgICAgICAgICB2bS5jb2ZyYWRlc0JhamFzID0gdm0uY29mcmFkZXNCYWphcy5jb25jYXQoZGF0YS5yZXN1bHRzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlYXJjaCgpIHtcclxuICAgICAgaWYgKCF2bS5iYWphcylcclxuICAgICAgICBzZWFyY2hBbHRhcygpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgc2VhcmNoQmFqYXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZWFyY2hBbHRhcygpIHtcclxuICAgICAgdmFyIGZpbHRybyA9IHt9O1xyXG4gICAgICBmaWx0cm9bdm0uZmlsdHJvXSA9IHZtLmJ1c2NhcjtcclxuICAgICAgY29mcmFkZXNTZXJ2aWNlLmNvZnJhZGVzUmVzdCgpLnF1ZXJ5KGZpbHRybywgZnVuY3Rpb24oZGF0YSl7XHJcbiAgICAgICAgdm0ubmV4dFBhZ2UgPSBkYXRhLm5leHQ7XHJcbiAgICAgICAgdm0uY29mcmFkZXMgPSBkYXRhLnJlc3VsdHM7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlYXJjaEJhamFzKCkge1xyXG4gICAgICB2YXIgZmlsdHJvID0ge307XHJcbiAgICAgIGZpbHRyb1t2bS5maWx0cm9dID0gdm0uYnVzY2FyO1xyXG4gICAgICBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNCYWphc1Jlc3QoKS5xdWVyeShmaWx0cm8sIGZ1bmN0aW9uKGRhdGEpe1xyXG4gICAgICAgIHZtLm5leHRQYWdlQmFqYXMgPSBkYXRhLm5leHQ7XHJcbiAgICAgICAgdm0uY29mcmFkZXNCYWphcyA9IGRhdGEucmVzdWx0cztcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmFkaW9DaGFuZ2UoKSB7XHJcbiAgICAgIHZtLmJ1c2NhciA9IG51bGw7XHJcbiAgICAgIHZtLnR5cGVJbnB1dCA9ICh2bS5maWx0cm8gPT09ICdub21icmUnKSA/ICd0ZXh0JzogJ251bWJlcic7XHJcbiAgICAgIHZtLnNlYXJjaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdvVG9Db2ZyYWRlKGlkLCBldmVudCl7XHJcbiAgICAgICRzdGF0ZS5nbygnY29mcmFkZXNEZXRhbGxlJywge2NvZnJhZGVJZDogaWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlDb2ZyYWRlKGlkLCBldmVudCl7XHJcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAkc3RhdGUuZ28oJ2NvZnJhZGVzQ2FtYmlvcycsIHtjb2ZyYWRlSWQ6IGlkfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2xpc3RhQ29mcmFkZXMnLCBsaXN0YUNvZnJhZGVzKTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGxpc3RhQ29mcmFkZXMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RpcmVjdGl2ZXMvY29mcmFkZXMvbGlzdC9jb2ZyYWRlcy5kaXJlY3RpdmUuaHRtbCcsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgY29mcmFkZXM6ICc9Y29mcmFkZXMnLFxyXG4gICAgICAgIG5leHRQYWdlOiAnPXBhZ2UnLFxyXG4gICAgICAgIGNvZnJhZGVzQmFqYXM6ICc9Y29mcmFkZXNCYWphcycsXHJcbiAgICAgICAgbmV4dFBhZ2VCYWphczogJz1wYWdlQmFqYXMnXHJcbiAgICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdMaXN0YUNvZnJhZGVzJyxcclxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdSZW1vdmVDb2ZyYWRlJywgUmVtb3ZlQ29mcmFkZSk7XHJcblxyXG4gIGZ1bmN0aW9uIFJlbW92ZUNvZnJhZGUoJHN0YXRlLCAkbWREaWFsb2cpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgdm0ucmVtb3ZlQ29mcmFkZSA9IHJlbW92ZUNvZnJhZGU7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHJlbW92ZUNvZnJhZGUoaWQsIGV2ZW50KXtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICRtZERpYWxvZy5zaG93KHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RpcmVjdGl2ZXMvY29mcmFkZXMvcmVtb3ZlL2RpYWxvZ1RtcGwvcmVtb3ZlQ29mcmFkZS50bXBsLmh0bWwnLFxyXG4gICAgICAgIGxvY2Fsczoge2lkOiBpZH0sXHJcbiAgICAgICAgY29udHJvbGxlcjogJ1JlbW92ZUNvZnJhZGVUbXBsJyxcclxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcclxuICAgICAgICB0YXJnZXRFdmVudDogZXZlbnQsXHJcbiAgICAgICAgY2xpY2tPdXRzaWRlVG9DbG9zZTp0cnVlXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy9yZW1vdmVFbmRDb2ZyYWRlKGlkKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgncmVtb3ZlQ29mcmFkZScsIHJlbW92ZUNvZnJhZGUpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlQ29mcmFkZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiAnLi90ZW1wbGF0ZXMvZGlyZWN0aXZlcy9jb2ZyYWRlcy9yZW1vdmUvcmVtb3ZlQ29mcmFkZS5kaXJlY3RpdmUuaHRtbCcsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgY29mcmFkZUlkOiAnPWNvZnJhZGUnICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjogJ1JlbW92ZUNvZnJhZGUnLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ1Jlc3RvcmVDb2ZyYWRlJywgUmVzdG9yZUNvZnJhZGUpO1xyXG5cclxuICBmdW5jdGlvbiBSZXN0b3JlQ29mcmFkZSgkc3RhdGUsICRtZERpYWxvZywgY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLnJlc3RvcmVDb2ZyYWRlID0gcmVzdG9yZUNvZnJhZGU7XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHJlc3RvcmVDb2ZyYWRlKGlkLCBldmVudCl7XHJcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICB2YXIgcmVzdGF1cmFyRGlhbG9nID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgLnRpdGxlKCdSZXN0YXVyYXIgY29mcmFkZScpXHJcbiAgICAgICAgICAuY29udGVudCgnwr9Fc3TDoSBzZWd1cm8gcXVlIGRlc2VhIHJlc3RhdXJhciBlc3RlIGNvZnJhZGU/PGJyPlN1IG7Dum1lcm8gZGUgQ29mcmFkZSBzZSBjYWxjdWxhcsOhIGRlIG51ZXZvLicpXHJcbiAgICAgICAgICAuYXJpYUxhYmVsKCdSZXN0YXVyYXIgY29mcmFkZScpXHJcbiAgICAgICAgICAudGFyZ2V0RXZlbnQoZXZlbnQpXHJcbiAgICAgICAgICAub2soJ0FjZXB0YXInKVxyXG4gICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsYXInKVxyXG4gICAgICAgICAgLmNsaWNrT3V0c2lkZVRvQ2xvc2UodHJ1ZSk7XHJcbiAgICAgICRtZERpYWxvZy5zaG93KHJlc3RhdXJhckRpYWxvZykudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXN0b3JlRW5kQ29mcmFkZShpZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc3RvcmVFbmRDb2ZyYWRlKGlkKXtcclxuICAgICAgdmFyIGNvZnJhZGUgPSBjb2ZyYWRlc1NlcnZpY2UuY29mcmFkZXNSZXN0KCkuZ2V0KHtpZDogaWR9LCBmdW5jdGlvbigpe1xyXG4gICAgICAgIGNvZnJhZGUuYmFqYSA9IG51bGw7XHJcbiAgICAgICAgY29mcmFkZS4kc2F2ZSh7dXBkYXRlTnVtZXJvQ29mcmFkZTogdHJ1ZX0pLnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgIGlmKCRzdGF0ZS5jdXJyZW50Lm5hbWUgPT09ICdjb2ZyYWRlcycpe1xyXG4gICAgICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCRzdGF0ZS5jdXJyZW50LCBudWxsLCB7XHJcbiAgICAgICAgICAgICAgcmVsb2FkOiB0cnVlLFxyXG4gICAgICAgICAgICAgIGluaGVyaXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIG5vdGlmeTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnY29mcmFkZXMnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ3Jlc3RvcmVDb2ZyYWRlJywgcmVzdG9yZUNvZnJhZGUpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gcmVzdG9yZUNvZnJhZGUoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RpcmVjdGl2ZXMvY29mcmFkZXMvcmVzdG9yZS9yZXN0b3JlQ29mcmFkZS5kaXJlY3RpdmUuaHRtbCcsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgY29mcmFkZUlkOiAnPWNvZnJhZGUnICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjogJ1Jlc3RvcmVDb2ZyYWRlJyxcclxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdMaXN0YUNvc3RhbGVyb3MnLCBMaXN0YUNvc3RhbGVyb3MpO1xyXG5cclxuICBmdW5jdGlvbiBMaXN0YUNvc3RhbGVyb3MoJHN0YXRlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5tb2RpZnlDb3N0YWxlcm8gPSBtb2RpZnlDb3N0YWxlcm87XHJcbiAgICB2bS5nb1RvQ29zdGFsZXJvICAgPSBnb1RvQ29zdGFsZXJvO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdvVG9Db3N0YWxlcm8oaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdjb3N0YWxlcm9zRGV0YWxsZScsIHtjb3N0YWxlcm9JZDogaWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlDb3N0YWxlcm8oaWQsIGV2ZW50KXtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICRzdGF0ZS5nbygnY29zdGFsZXJvc0NhbWJpb3MnLCB7Y29zdGFsZXJvSWQ6IGlkfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2xpc3RhQ29zdGFsZXJvcycsIGxpc3RhQ29zdGFsZXJvcyk7XHJcblxyXG5cclxuICBmdW5jdGlvbiBsaXN0YUNvc3RhbGVyb3MoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RpcmVjdGl2ZXMvY29zdGFsZXJvcy9saXN0L2Nvc3RhbGVyb3MuZGlyZWN0aXZlLmh0bWwnLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIGNvc3RhbGVyb3M6ICc9Y29zdGFsZXJvcycgICAgICAgIFxyXG4gICAgICB9LFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgICBzY29wZS4kd2F0Y2goJ3ZtLmNvc3RhbGVyb3MnLCBmdW5jdGlvbihuZXdWYWwpIHtcclxuICAgICAgICAgICAgaWYobmV3VmFsKSB7IFxyXG4gICAgICAgICAgICAgIHNjb3BlLnZtLmNvc3RhbGVyb3NTaG9ydCA9IHNjb3BlLnZtLmNvc3RhbGVyb3MubWFwKGZ1bmN0aW9uKGNvc3RhbGVybyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXV4ID0ge2lkOiBjb3N0YWxlcm8uaWQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRpbzogY29zdGFsZXJvLnNpdGlvfTtcclxuICAgICAgICAgICAgICAgIGlmIChjb3N0YWxlcm8uY29mcmFkZSl7XHJcbiAgICAgICAgICAgICAgICAgIGF1eC5udW1lcm9PcmRlbiA9IGNvc3RhbGVyby5jb2ZyYWRlLm51bWVyb09yZGVuO1xyXG4gICAgICAgICAgICAgICAgICBhdXgubm9tYnJlID0gY29zdGFsZXJvLmNvZnJhZGUuZGF0b3NQZXJzb25hbGVzLm5vbWJyZSAgICArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3N0YWxlcm8uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuYXBlbGxpZG8xICsgJyAnICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3N0YWxlcm8uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuYXBlbGxpZG8yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1eDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjogJ0xpc3RhQ29zdGFsZXJvcycsXHJcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignUmVtb3ZlQ29zdGFsZXJvJywgUmVtb3ZlQ29zdGFsZXJvKTtcclxuXHJcbiAgZnVuY3Rpb24gUmVtb3ZlQ29zdGFsZXJvKCRzdGF0ZSwgJG1kRGlhbG9nLCBjb3N0YWxlcm9zU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5yZW1vdmVDb3N0YWxlcm8gPSByZW1vdmVDb3N0YWxlcm87XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHJlbW92ZUNvc3RhbGVybyhpZCwgZXZlbnQpe1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgdmFyIHJlbW92ZURpYWxvZyA9ICRtZERpYWxvZy5jb25maXJtKClcclxuICAgICAgICAgIC50aXRsZSgnRWxpbWluYXIgY29zdGFsZXJvJylcclxuICAgICAgICAgIC5jb250ZW50KCfCv0VzdMOhIHNlZ3VybyBxdWUgZGVzZWEgZWxpbWluYXIgZXN0ZSBjb3N0YWxlcm8/PGJyPkRlamFyw6Egc3Ugc2l0aW8gbGlicmUuJylcclxuICAgICAgICAgIC5hcmlhTGFiZWwoJ0VsaW1pbmFyIGNvc3RhbGVybycpXHJcbiAgICAgICAgICAudGFyZ2V0RXZlbnQoZXZlbnQpXHJcbiAgICAgICAgICAub2soJ0FjZXB0YXInKVxyXG4gICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsYXInKVxyXG4gICAgICAgICAgLmNsaWNrT3V0c2lkZVRvQ2xvc2UodHJ1ZSk7XHJcbiAgICAgICRtZERpYWxvZy5zaG93KHJlbW92ZURpYWxvZykudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZW1vdmVFbmRDb3N0YWxlcm8oaWQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVFbmRDb3N0YWxlcm8oaWQpe1xyXG4gICAgICB2YXIgY29zdGFsZXJvID0gY29zdGFsZXJvc1NlcnZpY2UuY29zdGFsZXJvc1Jlc3QoKS5nZXQoe2lkOiBpZH0sIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY29zdGFsZXJvLmNvZnJhZGUgPSBudWxsO1xyXG4gICAgICAgIGNvc3RhbGVyby50YWxsYSA9IG51bGw7XHJcbiAgICAgICAgY29zdGFsZXJvLmZlY2hhID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBjb3N0YWxlcm8uJHNhdmUoKS50aGVuKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICBpZigkc3RhdGUuY3VycmVudC5uYW1lID09PSAnY29zdGFsZXJvcycpe1xyXG4gICAgICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCRzdGF0ZS5jdXJyZW50LCBudWxsLCB7XHJcbiAgICAgICAgICAgICAgcmVsb2FkOiB0cnVlLFxyXG4gICAgICAgICAgICAgIGluaGVyaXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIG5vdGlmeTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnY29zdGFsZXJvcycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmRpcmVjdGl2ZSgncmVtb3ZlQ29zdGFsZXJvJywgcmVtb3ZlQ29zdGFsZXJvKTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZUNvc3RhbGVybygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiAnLi90ZW1wbGF0ZXMvZGlyZWN0aXZlcy9jb3N0YWxlcm9zL3JlbW92ZS9yZW1vdmVDb3N0YWxlcm8uZGlyZWN0aXZlLmh0bWwnLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIGNvc3RhbGVyb0lkOiAnPWNvc3RhbGVybycgICAgICAgIFxyXG4gICAgICB9LFxyXG4gICAgICBjb250cm9sbGVyOiAnUmVtb3ZlQ29zdGFsZXJvJyxcclxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdMaXN0YURpcmVjdGl2b3MnLCBMaXN0YURpcmVjdGl2b3MpO1xyXG5cclxuICBmdW5jdGlvbiBMaXN0YURpcmVjdGl2b3MoJHN0YXRlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgICB2bS5tb2RpZnlEaXJlY3Rpdm8gPSBtb2RpZnlEaXJlY3Rpdm87XHJcbiAgICB2bS5nb1RvRGlyZWN0aXZvICAgPSBnb1RvRGlyZWN0aXZvO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdvVG9EaXJlY3Rpdm8oaWQsIGV2ZW50KXtcclxuICAgICAgJHN0YXRlLmdvKCdkaXJlY3Rpdm9zRGV0YWxsZScsIHtkaXJlY3Rpdm9JZDogaWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlEaXJlY3Rpdm8oaWQsIGV2ZW50KXtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICRzdGF0ZS5nbygnZGlyZWN0aXZvc0NhbWJpb3MnLCB7ZGlyZWN0aXZvSWQ6IGlkfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2xpc3RhRGlyZWN0aXZvcycsIGxpc3RhRGlyZWN0aXZvcyk7XHJcblxyXG5cclxuICBmdW5jdGlvbiBsaXN0YURpcmVjdGl2b3MoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RpcmVjdGl2ZXMvZGlyZWN0aXZvcy9saXN0L2RpcmVjdGl2b3MuZGlyZWN0aXZlLmh0bWwnLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIGRpcmVjdGl2b3M6ICc9ZGlyZWN0aXZvcycgICAgICAgIFxyXG4gICAgICB9LFxyXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgICBzY29wZS4kd2F0Y2goJ3ZtLmRpcmVjdGl2b3MnLCBmdW5jdGlvbihuZXdWYWwpIHtcclxuICAgICAgICAgICAgaWYobmV3VmFsKSB7IFxyXG4gICAgICAgICAgICAgIHNjb3BlLnZtLmRpcmVjdGl2b3NTaG9ydCA9IHNjb3BlLnZtLmRpcmVjdGl2b3MubWFwKGZ1bmN0aW9uKGRpcmVjdGl2byl7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXV4ID0ge2lkOiBkaXJlY3Rpdm8uaWQsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpY2lvbjogZGlyZWN0aXZvLnBvc2ljaW9ufTtcclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpdm8uY29mcmFkZSl7XHJcbiAgICAgICAgICAgICAgICAgIGF1eC5udW1lcm9PcmRlbiA9IGRpcmVjdGl2by5jb2ZyYWRlLm51bWVyb09yZGVuO1xyXG4gICAgICAgICAgICAgICAgICBhdXgubm9tYnJlID0gZGlyZWN0aXZvLmNvZnJhZGUuZGF0b3NQZXJzb25hbGVzLm5vbWJyZSAgICArICcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpdm8uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuYXBlbGxpZG8xICsgJyAnICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpdm8uY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMuYXBlbGxpZG8yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF1eDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgICAgfSxcclxuICAgICAgY29udHJvbGxlcjogJ0xpc3RhRGlyZWN0aXZvcycsXHJcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignUmVtb3ZlRGlyZWN0aXZvJywgUmVtb3ZlRGlyZWN0aXZvKTtcclxuXHJcbiAgZnVuY3Rpb24gUmVtb3ZlRGlyZWN0aXZvKCRzdGF0ZSwgJG1kRGlhbG9nLCBkaXJlY3Rpdm9zU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5yZW1vdmVEaXJlY3Rpdm8gPSByZW1vdmVEaXJlY3Rpdm87XHJcbiAgICBcclxuICAgIGZ1bmN0aW9uIHJlbW92ZURpcmVjdGl2byhpZCwgZXZlbnQpe1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgdmFyIHJlbW92ZURpYWxvZyA9ICRtZERpYWxvZy5jb25maXJtKClcclxuICAgICAgICAgIC50aXRsZSgnRWxpbWluYXIgZGlyZWN0aXZvJylcclxuICAgICAgICAgIC5jb250ZW50KCfCv0VzdMOhIHNlZ3VybyBxdWUgZGVzZWEgZWxpbWluYXIgZXN0ZSBkaXJlY3Rpdm8/JylcclxuICAgICAgICAgIC5hcmlhTGFiZWwoJ0VsaW1pbmFyIGRpcmVjdGl2bycpXHJcbiAgICAgICAgICAudGFyZ2V0RXZlbnQoZXZlbnQpXHJcbiAgICAgICAgICAub2soJ0FjZXB0YXInKVxyXG4gICAgICAgICAgLmNhbmNlbCgnQ2FuY2VsYXInKVxyXG4gICAgICAgICAgLmNsaWNrT3V0c2lkZVRvQ2xvc2UodHJ1ZSk7XHJcbiAgICAgICRtZERpYWxvZy5zaG93KHJlbW92ZURpYWxvZykudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZW1vdmVFbmREaXJlY3Rpdm8oaWQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVFbmREaXJlY3Rpdm8oaWQpe1xyXG4gICAgICB2YXIgZGlyZWN0aXZvID0gZGlyZWN0aXZvc1NlcnZpY2UuZGlyZWN0aXZvc1Jlc3QoKS5nZXQoe2lkOiBpZH0sIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgZGlyZWN0aXZvLiRkZWxldGUoe2lkOiBpZH0pLnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgICAgIGlmKCRzdGF0ZS5jdXJyZW50Lm5hbWUgPT09ICdkaXJlY3Rpdm9zJyl7XHJcbiAgICAgICAgICAgICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsIG51bGwsIHtcclxuICAgICAgICAgICAgICByZWxvYWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgaW5oZXJpdDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgbm90aWZ5OiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgJHN0YXRlLmdvKCdkaXJlY3Rpdm9zJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdyZW1vdmVEaXJlY3Rpdm8nLCByZW1vdmVEaXJlY3Rpdm8pO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlRGlyZWN0aXZvKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9kaXJlY3RpdmVzL2RpcmVjdGl2b3MvcmVtb3ZlL3JlbW92ZURpcmVjdGl2by5kaXJlY3RpdmUuaHRtbCcsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgZGlyZWN0aXZvSWQ6ICc9ZGlyZWN0aXZvJyAgICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdSZW1vdmVEaXJlY3Rpdm8nLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0xpc3RhU2VjdG9yZXMnLCBMaXN0YVNlY3RvcmVzKTtcclxuXHJcbiAgZnVuY3Rpb24gTGlzdGFTZWN0b3Jlcygkc3RhdGUpIHtcclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICBcclxuICAgIHZtLm1vZGlmeVNlY3RvciA9IG1vZGlmeVNlY3RvcjtcclxuICAgIHZtLm1vZGlmeUNhbGxlICA9IG1vZGlmeUNhbGxlO1xyXG4gICAgdm0uYWRkQ2FsbGUgICAgID0gYWRkQ2FsbGU7XHJcbiAgICB2bS5zaG93Q2FsbGVzICAgPSBzaG93Q2FsbGVzO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNob3dDYWxsZXMoc2VjdG9yLCBldmVudCl7XHJcbiAgICAgIHNlY3RvciA9ICdjYWxsZXNTZWN0b3InK3NlY3RvcjtcclxuICAgICAgYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlY3RvcikpLnRvZ2dsZUNsYXNzKCdvY3VsdGFyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbW9kaWZ5U2VjdG9yKGlkLCBldmVudCl7XHJcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAkc3RhdGUuZ28oJ3NlY3RvcmVzQ2FtYmlvcycsIHtzZWN0b3JJZDogaWR9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb2RpZnlDYWxsZShpZCwgY2FsbGUsIGV2ZW50KXtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICRzdGF0ZS5nbygnc2VjdG9yZXNDYW1iaW9zJywge3NlY3RvcklkOiBpZCwgY2FsbGU6IGNhbGxlfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkQ2FsbGUoaWQsIGV2ZW50KXtcclxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICRzdGF0ZS5nbygnc2VjdG9yZXNDYW1iaW9zJywge3NlY3RvcklkOiBpZCwgY2FsbGU6ICduZXcnfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5kaXJlY3RpdmUoJ2xpc3RhU2VjdG9yZXMnLCBsaXN0YVNlY3RvcmVzKTtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGxpc3RhU2VjdG9yZXMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RpcmVjdGl2ZXMvc2VjdG9yZXMvbGlzdC9zZWN0b3Jlcy5kaXJlY3RpdmUuaHRtbCcsXHJcbiAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgc2VjdG9yZXM6ICc9c2VjdG9yZXMnICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50KSB7XHJcbiAgICAgICAgc2NvcGUuJHdhdGNoKCd2bS5zZWN0b3JlcycsIGZ1bmN0aW9uKG5ld1ZhbCkge1xyXG4gICAgICAgICAgICBpZihuZXdWYWwpIHsgXHJcbiAgICAgICAgICAgICAgc2NvcGUudm0uc2VjdG9yZXNTaG9ydCA9IHNjb3BlLnZtLnNlY3RvcmVzLm1hcChmdW5jdGlvbihzZWN0b3Ipe1xyXG4gICAgICAgICAgICAgICAgdmFyIGF1eCA9IHtpZDogc2VjdG9yLmlkLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtZXJvU2VjdG9yOiBzZWN0b3IubnVtZXJvU2VjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXM6IHNlY3Rvci5jYWxsZXN9O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlY3Rvci5jb2ZyYWRlKXtcclxuICAgICAgICAgICAgICAgICAgYXV4Lm51bWVyb09yZGVuID0gc2VjdG9yLmNvZnJhZGUubnVtZXJvT3JkZW47XHJcbiAgICAgICAgICAgICAgICAgIGF1eC5ub21icmUgPSBzZWN0b3IuY29mcmFkZS5kYXRvc1BlcnNvbmFsZXMubm9tYnJlICAgICsgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rvci5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5hcGVsbGlkbzEgKyAnICcgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rvci5jb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5hcGVsbGlkbzI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRydWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBjb250cm9sbGVyOiAnTGlzdGFTZWN0b3JlcycsXHJcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29udHJvbGxlcignUmVtb3ZlU2VjdG9yJywgUmVtb3ZlU2VjdG9yKTtcclxuXHJcbiAgZnVuY3Rpb24gUmVtb3ZlU2VjdG9yKCRzdGF0ZSwgJG1kRGlhbG9nLCAkbWRUb2FzdCwgc2VjdG9yZXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgIHZtLnJlbW92ZVNlY3RvciA9IHJlbW92ZVNlY3RvcjtcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlU2VjdG9yKGlkLCBldmVudCl7XHJcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICB2YXIgcmVtb3ZlRGlhbG9nID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgLnRpdGxlKCdFbGltaW5hciBzZWN0b3InKVxyXG4gICAgICAgICAgLmNvbnRlbnQoJ8K/RXN0w6Egc2VndXJvIHF1ZSBkZXNlYSBlbGltaW5hciBlc3RlIHNlY3Rvcj8nKVxyXG4gICAgICAgICAgLmFyaWFMYWJlbCgnRWxpbWluYXIgc2VjdG9yJylcclxuICAgICAgICAgIC50YXJnZXRFdmVudChldmVudClcclxuICAgICAgICAgIC5vaygnQWNlcHRhcicpXHJcbiAgICAgICAgICAuY2FuY2VsKCdDYW5jZWxhcicpXHJcbiAgICAgICAgICAuY2xpY2tPdXRzaWRlVG9DbG9zZSh0cnVlKTtcclxuICAgICAgJG1kRGlhbG9nLnNob3cocmVtb3ZlRGlhbG9nKS50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJlbW92ZUVuZFNlY3RvcihpZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUVuZFNlY3RvcihpZCl7XHJcbiAgICAgIHZhciBzZWN0b3IgPSBzZWN0b3Jlc1NlcnZpY2Uuc2VjdG9yZXNSZXN0KCkuZ2V0KHtpZDogaWR9LCBmdW5jdGlvbigpe1xyXG4gICAgICAgIGlmKHNlY3RvclswXS5jYWxsZXMubGVuZ3RoICE9PSAwKXtcclxuICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAgICAgLmNvbnRlbnQoJ05vIHNlIHB1ZWRlIGVsaW1pbmFyIHVuIHNlY3RvciBjb24gY2FsbGVzIGFzaWduYWRhcycpXHJcbiAgICAgICAgICAgICAgLnBvc2l0aW9uKCd0b3AgcmlnaHQnKVxyXG4gICAgICAgICAgICAgIC5oaWRlRGVsYXkoMzAwMClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICBzZWN0b3JbMF0uJGRlbGV0ZSh7aWQ6IGlkfSkudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZigkc3RhdGUuY3VycmVudC5uYW1lID09PSAnc2VjdG9yZXMnKXtcclxuICAgICAgICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCRzdGF0ZS5jdXJyZW50LCBudWxsLCB7XHJcbiAgICAgICAgICAgICAgICByZWxvYWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpbmhlcml0OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG5vdGlmeTogdHJ1ZVxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzZWN0b3JlcycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuZGlyZWN0aXZlKCdyZW1vdmVTZWN0b3InLCByZW1vdmVTZWN0b3IpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlU2VjdG9yKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9kaXJlY3RpdmVzL3NlY3RvcmVzL3JlbW92ZS9yZW1vdmVTZWN0b3IuZGlyZWN0aXZlLmh0bWwnLFxyXG4gICAgICBzY29wZToge1xyXG4gICAgICAgIHNlY3RvcklkOiAnPXNlY3RvcicgICAgICAgIFxyXG4gICAgICB9LFxyXG4gICAgICBjb250cm9sbGVyOiAnUmVtb3ZlU2VjdG9yJyxcclxuICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5jb250cm9sbGVyKCdSZW1vdmVDb2ZyYWRlVG1wbCcsIFJlbW92ZUNvZnJhZGVUbXBsKTtcclxuXHJcbiAgZnVuY3Rpb24gUmVtb3ZlQ29mcmFkZVRtcGwoJHN0YXRlLCAkbWREaWFsb2csIGNvZnJhZGVzU2VydmljZSkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5jbG9zZURpYWxvZyA9IGNsb3NlRGlhbG9nO1xyXG4gICAgdm0ucmVtb3ZlRW5kQ29mcmFkZSA9IHJlbW92ZUVuZENvZnJhZGU7XHJcblxyXG4gICAgZnVuY3Rpb24gY2xvc2VEaWFsb2coKSB7XHJcbiAgICAgICRtZERpYWxvZy5jYW5jZWwoKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUVuZENvZnJhZGUoaWQpe1xyXG4gICAgICB2YXIgY29mcmFkZSA9IGNvZnJhZGVzU2VydmljZS5jb2ZyYWRlc1Jlc3QoKS5nZXQoe2lkOiBpZH0sIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY29mcmFkZS5iYWphID0ge21vdGl2byA6IHZtLm1vdGl2b0JhamEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlY2hhQmFqYTogbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKX07XHJcbiAgICAgICAgY29mcmFkZS5udW1lcm9Db2ZyYWRlID0gbnVsbDtcclxuICAgICAgICBcclxuICAgICAgICBjb2ZyYWRlLiRzYXZlKHt1cGRhdGVOdW1lcm9Db2ZyYWRlOiB0cnVlfSkudGhlbihmdW5jdGlvbigpe1xyXG4gICAgICAgICAgdm0uY2xvc2VEaWFsb2coKTtcclxuICAgICAgICAgIGlmKCRzdGF0ZS5jdXJyZW50Lm5hbWUgPT09ICdjb2ZyYWRlcycpe1xyXG4gICAgICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKCRzdGF0ZS5jdXJyZW50LCBudWxsLCB7XHJcbiAgICAgICAgICAgICAgcmVsb2FkOiB0cnVlLFxyXG4gICAgICAgICAgICAgIGluaGVyaXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIG5vdGlmeTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICRzdGF0ZS5nbygnY29mcmFkZXMnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
