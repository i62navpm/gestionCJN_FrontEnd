!function(){"use strict";angular.module("app",["ui.router","ngResource"])}(),function(){"use strict";function e(e,t){t.otherwise("/"),e.state("home",{url:"/",template:'<p class="lead">Welcome to the UI-Router Demo</p><p>Use the menu above to navigate. Pay attention to the <code>$state</code> and <code>$stateParams</code> values below.</p><p>Click these links—<a href="#/c?id=1">Alice</a> or <a href="#/user/42">Bob</a>—to see a url redirect in action.</p>'})}angular.module("app").config(e),e.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function e(e){console.log(e.getCofrades().query()),e.getCofrades().get({id:"55ed685bff2a221f3d7bc6e4"},function(e){e.datosPersonales.nombre="Pepé",console.log(e.datosPersonales.nombre),e.$save()})}angular.module("app").controller("Cofrades",e),e.$inject=["cofradesService"]}(),function(){"use strict";function e(e){e.state("cofrades",{url:"/cofrades",templateProvider:["$templateCache",function(e){return e.get("cofrades/cofrades.html")}],controller:"Cofrades",controllerAs:"vm"})}angular.module("app").config(e),e.$inject=["$stateProvider"]}(),function(){"use strict";function e(){return function(t){var o=t instanceof Array;for(var r in t)null===t[r]?o?t.splice(r,1):delete t[r]:"object"==typeof t[r]&&e(t[r]);return t}}angular.module("app").filter("removeNulls",e)}(),function(){"use strict";function e(e,t){function o(){return e("http://127.0.0.1:5050/api/cofrades/:id.json:json",null,{query:{method:"GET",isArray:!1},save:{method:"POST",transformRequest:function(e,o){return angular.toJson(t("removeNulls")(e))}}})}function r(){return e("http://127.0.0.1:5050/api/cofradesBajas/:id.json:json",null,{query:{method:"GET",isArray:!1}})}return{getCofrades:o,getCofradesBajas:r}}angular.module("app").factory("cofradesService",e),e.$inject=["$resource","$filter"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJhcHAucm91dGVzLmpzIiwiYWxsLm1pbi5qcyIsImNvZnJhZGVzL2NvZnJhZGVzLmNvbnRyb2xsZXIuanMiLCJjb2ZyYWRlcy9jb2ZyYWRlcy5yb3V0ZXMuanMiLCJjb21tb25zL2ZpbHRlcnMvcmVtb3ZlTnVsbHMuZmlsdGVyLmpzIiwiY29tbW9ucy9zZXJ2aWNlcy9jb2ZyYWRlcy5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGUiLCIkaW5qZWN0IiwiQ29mcmFkZXMiLCJjb2ZyYWRlc1NlcnZpY2UiLCJjb25zb2xlIiwibG9nIiwiZ2V0Q29mcmFkZXMiLCJxdWVyeSIsImdldCIsImlkIiwiY29mcmFkZSIsImRhdG9zUGVyc29uYWxlcyIsIm5vbWJyZSIsIiRzYXZlIiwiY29udHJvbGxlciIsInRlbXBsYXRlUHJvdmlkZXIiLCIkdGVtcGxhdGVDYWNoZSIsImNvbnRyb2xsZXJBcyIsInJlbW92ZU51bGxzIiwib2JqIiwiaXNBcnJheSIsIkFycmF5IiwiayIsInNwbGljZSIsImZpbHRlciIsIiRyZXNvdXJjZSIsIiRmaWx0ZXIiLCJtZXRob2QiLCJzYXZlIiwidHJhbnNmb3JtUmVxdWVzdCIsImRhdGEiLCJoZWFkZXJzR2V0dGVyIiwidG9Kc29uIiwiZ2V0Q29mcmFkZXNCYWphcyIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0EsWUFFQUEsU0FBQUMsT0FBQSxPQUNBLFlBQ0Esa0JDTEEsV0FDQSxZQU1BLFNBQUFDLEdBQUFDLEVBQUFDLEdBRUFBLEVBQUFDLFVBQUEsS0FFQUYsRUFDQUcsTUFBQSxRQUNBQyxJQUFBLElBQ0FDLFNBQUEsc1NBWEFSLFFBQ0FDLE9BQUEsT0FDQUMsT0FBQUEsR0N5QkVBLEVBQU9PLFNBQVcsaUJBQWtCLHlCQzlCdEMsV0FDQSxZQU1BLFNBQUFDLEdBQUFDLEdBRUFDLFFBQUFDLElBQUFGLEVBQUFHLGNBQUFDLFNBQ0FKLEVBQUFHLGNBQUFFLEtBQUFDLEdBQUEsNEJBQUEsU0FBQUMsR0FDQUEsRUFBQUMsZ0JBQUFDLE9BQUEsT0FDQVIsUUFBQUMsSUFBQUssRUFBQUMsZ0JBQUFDLFFBQ0FGLEVBQUFHLFVBWEFyQixRQUNBQyxPQUFBLE9BQ0FxQixXQUFBLFdBQUFaLEdENkNFQSxFQUFTRCxTQUFXLHNCRWpEdEIsV0FDQSxZQU1BLFNBQUFQLEdBQUFDLEdBRUFBLEVBQ0FHLE1BQUEsWUFDQUMsSUFBQSxZQUNBZ0Isa0JBQUEsaUJBQUEsU0FBQUMsR0FDQSxNQUFBQSxHQUFBUixJQUFBLDRCQUVBTSxXQUFBLFdBQ0FHLGFBQUEsT0FiQXpCLFFBQ0FDLE9BQUEsT0FDQUMsT0FBQUEsR0ZrRUVBLEVBQU9PLFNBQVcscUJHdkVwQixXQUNBLFlBTUEsU0FBQWlCLEtBQ0EsTUFBQSxVQUFBQyxHQUNBLEdBQUFDLEdBQUFELFlBQUFFLE1BQ0EsS0FBQSxHQUFBQyxLQUFBSCxHQUNBLE9BQUFBLEVBQUFHLEdBQUFGLEVBQUFELEVBQUFJLE9BQUFELEVBQUEsU0FBQUgsR0FBQUcsR0FDQSxnQkFBQUgsR0FBQUcsSUFBQUosRUFBQUMsRUFBQUcsR0FFQSxPQUFBSCxJQVhBM0IsUUFDQUMsT0FBQSxPQUNBK0IsT0FBQSxjQUFBTixNQ0xBLFdBQ0EsWUFNQSxTQUFBZixHQUFBc0IsRUFBQUMsR0FNQSxRQUFBcEIsS0FDQSxNQUFBbUIsR0FBQSxtREFBQSxNQUNBbEIsT0FBQW9CLE9BQUEsTUFBQVAsU0FBQSxHQUNBUSxNQUFBRCxPQUFBLE9BQUFFLGlCQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQXZDLFNBQUF3QyxPQUFBTixFQUFBLGVBQUFJLFFBTUEsUUFBQUcsS0FDQSxNQUFBUixHQUFBLHdEQUFBLE1BQUFsQixPQUFBb0IsT0FBQSxNQUFBUCxTQUFBLEtBaEJBLE9BQ0FkLFlBQUFBLEVBQ0EyQixpQkFBQUEsR0FQQXpDLFFBQ0FDLE9BQUEsT0FDQXlDLFFBQUEsa0JBQUEvQixHSnFIRUEsRUFBZ0JGLFNBQVcsWUFBYSIsImZpbGUiOiJhbGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcclxuICAgICd1aS5yb3V0ZXInLFxyXG4gICAgJ25nUmVzb3VyY2UnXHJcbiAgXSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmZpZygkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcblxyXG4gICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XHJcblxyXG4gICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgLnN0YXRlKFwiaG9tZVwiLCB7XHJcbiAgICAgICAgdXJsOiBcIi9cIixcclxuICAgICAgICB0ZW1wbGF0ZTogJzxwIGNsYXNzPVwibGVhZFwiPldlbGNvbWUgdG8gdGhlIFVJLVJvdXRlciBEZW1vPC9wPicgK1xyXG4gICAgICAgICAgJzxwPlVzZSB0aGUgbWVudSBhYm92ZSB0byBuYXZpZ2F0ZS4gJyArXHJcbiAgICAgICAgICAnUGF5IGF0dGVudGlvbiB0byB0aGUgPGNvZGU+JHN0YXRlPC9jb2RlPiBhbmQgPGNvZGU+JHN0YXRlUGFyYW1zPC9jb2RlPiB2YWx1ZXMgYmVsb3cuPC9wPicgK1xyXG4gICAgICAgICAgJzxwPkNsaWNrIHRoZXNlIGxpbmtz4oCUPGEgaHJlZj1cIiMvYz9pZD0xXCI+QWxpY2U8L2E+IG9yICcgK1xyXG4gICAgICAgICAgJzxhIGhyZWY9XCIjL3VzZXIvNDJcIj5Cb2I8L2E+4oCUdG8gc2VlIGEgdXJsIHJlZGlyZWN0IGluIGFjdGlvbi48L3A+J1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG59KSgpOyIsbnVsbCwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmNvbnRyb2xsZXIoJ0NvZnJhZGVzJywgQ29mcmFkZXMpO1xyXG5cclxuXHJcbiAgZnVuY3Rpb24gQ29mcmFkZXMoY29mcmFkZXNTZXJ2aWNlKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgY29uc29sZS5sb2coY29mcmFkZXNTZXJ2aWNlLmdldENvZnJhZGVzKCkucXVlcnkoKSk7XHJcbiAgICBjb2ZyYWRlc1NlcnZpY2UuZ2V0Q29mcmFkZXMoKS5nZXQoe2lkOiAnNTVlZDY4NWJmZjJhMjIxZjNkN2JjNmU0J30sIGZ1bmN0aW9uKGNvZnJhZGUpe1xyXG4gICAgICBjb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5ub21icmUgPSAnUGVww6knO1xyXG4gICAgICBjb25zb2xlLmxvZyhjb2ZyYWRlLmRhdG9zUGVyc29uYWxlcy5ub21icmUpO1xyXG4gICAgICBjb2ZyYWRlLiRzYXZlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIGFuZ3VsYXJcclxuICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAuY29uZmlnKGNvbmZpZyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmZpZygkc3RhdGVQcm92aWRlcikge1xyXG5cclxuICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgIC5zdGF0ZSgnY29mcmFkZXMnLCB7XHJcbiAgICAgICAgdXJsOiBcIi9jb2ZyYWRlc1wiLFxyXG4gICAgICAgIHRlbXBsYXRlUHJvdmlkZXI6IGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKXsgIFxyXG4gICAgICAgICAgcmV0dXJuICR0ZW1wbGF0ZUNhY2hlLmdldCgnY29mcmFkZXMvY29mcmFkZXMuaHRtbCcpOyBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRyb2xsZXI6ICdDb2ZyYWRlcycsXHJcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnYXBwJylcclxuICAgIC5maWx0ZXIoJ3JlbW92ZU51bGxzJywgcmVtb3ZlTnVsbHMpO1xyXG5cclxuICBmdW5jdGlvbiByZW1vdmVOdWxscygpe1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iail7XHJcbiAgICAgIHZhciBpc0FycmF5ID0gb2JqIGluc3RhbmNlb2YgQXJyYXk7XHJcbiAgICAgIGZvciAodmFyIGsgaW4gb2JqKXtcclxuICAgICAgICBpZiAob2JqW2tdPT09bnVsbCkgaXNBcnJheSA/IG9iai5zcGxpY2UoaywxKSA6IGRlbGV0ZSBvYmpba107XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9ialtrXT09XCJvYmplY3RcIikgcmVtb3ZlTnVsbHMob2JqW2tdKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gb2JqO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdhcHAnKVxyXG4gICAgLmZhY3RvcnkoJ2NvZnJhZGVzU2VydmljZScsIGNvZnJhZGVzU2VydmljZSk7XHJcblxyXG4gIGZ1bmN0aW9uIGNvZnJhZGVzU2VydmljZSgkcmVzb3VyY2UsICRmaWx0ZXIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGdldENvZnJhZGVzOiBnZXRDb2ZyYWRlcyxcclxuICAgICAgZ2V0Q29mcmFkZXNCYWphczogZ2V0Q29mcmFkZXNCYWphc1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDb2ZyYWRlcygpIHtcclxuICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovLzEyNy4wLjAuMTo1MDUwL2FwaS9jb2ZyYWRlcy86aWQuanNvbjpqc29uJywgbnVsbCwge1xyXG4gICAgICAgICdxdWVyeSc6ICB7bWV0aG9kOidHRVQnLCBpc0FycmF5OmZhbHNlfSxcclxuICAgICAgICAnc2F2ZSc6ICAge21ldGhvZDonUE9TVCcsIHRyYW5zZm9ybVJlcXVlc3Q6IGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIudG9Kc29uKCRmaWx0ZXIoJ3JlbW92ZU51bGxzJykoZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDb2ZyYWRlc0JhamFzKCkge1xyXG4gICAgICByZXR1cm4gJHJlc291cmNlKCdodHRwOi8vMTI3LjAuMC4xOjUwNTAvYXBpL2NvZnJhZGVzQmFqYXMvOmlkLmpzb246anNvbicsIG51bGwsIHsncXVlcnknOiAge21ldGhvZDonR0VUJywgaXNBcnJheTpmYWxzZX19KTtcclxuICAgIH1cclxuICAgIFxyXG4gIH1cclxuXHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9